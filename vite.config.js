import { defineConfig } from 'vite';
import handlebars from 'vite-plugin-handlebars';
import path from 'path';
import fs from 'fs';
import sharp from 'sharp';
import tailwindcss from '@tailwindcss/vite';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç input –¥–ª—è Rollup
const rollupInputs = {
  –ì–ª–∞–≤–Ω–∞—è: path.resolve(__dirname, 'src/html/index.html'),
  ui_kit: path.resolve(__dirname, 'src/html/ui-kit.html'),
  error: path.resolve(__dirname, 'src/html/404.html'),
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ JS —Ñ–∞–π–ª (–í–´–ó–´–í–ê–ï–ú –°–†–ê–ó–£)
function exportInputsToFile() {
  try {
    const exportPath = path.resolve(__dirname, 'src/js/libs/rollup-inputs.js');
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const exportDir = path.dirname(exportPath);
    if (!fs.existsSync(exportDir)) {
      fs.mkdirSync(exportDir, { recursive: true });
    }

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const relativePaths = Object.fromEntries(
      Object.entries(rollupInputs).map(([key, absolutePath]) => [
        key, 
        path.relative(path.resolve(__dirname, 'src'), absolutePath)
      ])
    );

    const content = `// Auto-generated from vite.config.js
// Generated on: ${new Date().toISOString()}
// DO NOT EDIT THIS FILE MANUALLY

/**
 * Rollup input configuration for Vite build
 * Contains absolute paths to HTML entry points
 */
export const rollupInputs = ${JSON.stringify(rollupInputs, null, 2)};

/**
 * Relative paths from src directory
 * Useful for navigation within the project
 */
export const relativePaths = ${JSON.stringify(relativePaths, null, 2)};

/**
 * List of available page keys
 */
export const pageKeys = ${JSON.stringify(Object.keys(rollupInputs), null, 2)};

/**
 * Get the path for a specific page
 * @param {string} pageKey - Key of the page (index, ui_kit, error, etc.)
 * @returns {string|null} Absolute path or null if not found
 */
export function getPagePath(pageKey) {
  return rollupInputs[pageKey] || null;
}

/**
 * Get the relative path for a specific page
 * @param {string} pageKey - Key of the page (index, ui_kit, error, etc.)
 * @returns {string|null} Relative path from src directory or null if not found
 */
export function getPageRelativePath(pageKey) {
  return relativePaths[pageKey] || null;
}

/**
 * Check if a page key exists
 * @param {string} pageKey - Key to check
 * @returns {boolean} True if the page exists
 */
export function hasPage(pageKey) {
  return pageKey in rollupInputs;
}

export default rollupInputs;
`;

    fs.writeFileSync(exportPath, content);
    console.log('üìÅ Rollup inputs exported to: src/js/libs/rollup-inputs.js');
    console.log('üìã Available pages:', Object.keys(rollupInputs));
    
  } catch (error) {
    console.error('‚ùå Error exporting rollup inputs:', error);
  }
}

// –í–´–ó–´–í–ê–ï–ú –§–£–ù–ö–¶–ò–Æ –≠–ö–°–ü–û–†–¢–ê –°–†–ê–ó–£ –ñ–ï
exportInputsToFile();

// –•–µ–ª–ø–µ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Å–∞ —à—Ä–∏—Ñ—Ç–∞
function getFontWeight(style) {
  const weights = {
    'thin': 100,
    'extralight': 200,
    'light': 300,
    'regular': 400,
    'normal': 400,
    'medium': 500,
    'semibold': 600,
    'bold': 700,
    'extrabold': 800,
    'black': 900
  };
  
  return weights[style.toLowerCase()] || 400;
}

// –•–µ–ª–ø–µ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
function getFormat(ext) {
  const formats = {
    'woff2': 'woff2',
    'woff': 'woff',
    'ttf': 'truetype',
    'otf': 'opentype'
  };
  
  return formats[ext] || ext;
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è dist –≤ docs —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º HTML
const copyDistToDocs = () => {
  return {
    name: 'copy-dist-to-docs',
    apply: 'build',

    async writeBundle() {
      console.log('üìÅ Copying dist to docs...');

      const distDir = path.resolve(__dirname, 'dist');
      const docsDir = path.resolve(__dirname, 'docs');

      if (!fs.existsSync(distDir)) {
        console.log('‚ùå dist directory not found');
        return;
      }

      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
      await new Promise(resolve => setTimeout(resolve, 2000));

      if (fs.existsSync(docsDir)) {
        console.log('üóëÔ∏è Cleaning docs directory...');
        fs.rmSync(docsDir, { recursive: true });
      }
      fs.mkdirSync(docsDir, { recursive: true });

      // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
      const copyRecursiveSync = (src, dest) => {
        if (!fs.existsSync(src)) return;
        
        const stats = fs.statSync(src);
        
        if (stats.isDirectory()) {
          if (!fs.existsSync(dest)) {
            fs.mkdirSync(dest, { recursive: true });
          }
          
          const items = fs.readdirSync(src);
          for (const item of items) {
            if (item === 'html') continue;
            copyRecursiveSync(path.join(src, item), path.join(dest, item));
          }
        } else {
          fs.copyFileSync(src, dest);
        }
      };

      // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å—ë –∏–∑ dist –≤ docs, –∫—Ä–æ–º–µ html –ø–∞–ø–∫–∏
      copyRecursiveSync(distDir, docsDir);
      console.log('‚úÖ Basic structure copied');

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º HTML —Ñ–∞–π–ª—ã –æ—Ç–¥–µ–ª—å–Ω–æ
      const htmlDir = path.join(distDir, 'html');
      if (fs.existsSync(htmlDir)) {
        const htmlFiles = fs.readdirSync(htmlDir).filter(f => f.endsWith('.html'));
        for (const htmlFile of htmlFiles) {
          const srcPath = path.join(htmlDir, htmlFile);
          const destPath = path.join(docsDir, htmlFile);
          
          if (fs.existsSync(srcPath)) {
            fs.copyFileSync(srcPath, destPath);

            console.log(`üîß Fixing HTML quotes in: ${htmlFile}`);
            
            // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ HTML —Ñ–∞–π–ª–∞
            let content = fs.readFileSync(destPath, 'utf8');
            
            // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ HTML —Ñ–∞–π–ª–∞—Ö
            content = content
              .replace(/(src|href|data-src|srcset)=["']\/(assets|images|files)\//g, '$1="./$2/')
              .replace(/(src|href|data-src|srcset)=["']\.\.\/(assets|images|files)\//g, '$1="./$2/')
              .replace(/(src|href|data-src|srcset)=["']\.(?!\.)\//g, '$1="./');

            // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –∫–∞–≤—ã—á–∫–∞–º–∏ –≤ picture —Ç–µ–≥–∞—Ö
            // –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥: –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ source —Ç–µ–≥–∞—Ö
            content = content.replace(
              /<picture>\s*<source\s+srcset=("|')([^"']+)("|')\s+type=("|')image\/webp("|')\s*>/gi,
              (match, quote1, srcset, quote2, quote3, quote4) => {
                // –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–æ–π–Ω—ã–µ –≤–µ–∑–¥–µ
                return `<picture><source srcset="${srcset}" type="image/webp">`;
              }
            );

            // –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥: –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –∫–∞–≤—ã—á–∫–∏ –≤–æ–æ–±—â–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
            content = content.replace(
              /<picture>\s*<source\s+srcset=([^\s>]+)\s+type=([^\s>]+)\s*>/gi,
              (match, srcset, type) => {
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                const fixedSrcset = srcset.includes('"') ? srcset : `"${srcset}"`;
                const fixedType = type.includes('"') ? type : `"${type}"`;
                return `<picture><source srcset=${fixedSrcset} type=${fixedType}>`;
              }
            );

            // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å mixed quotes –≤ img —Ç–µ–≥–∞—Ö
            content = content.replace(
              /<img([^>]*?)src=("|')([^"']+)("|')([^>]*?)>/gi,
              (match, before, quote1, src, quote2, after) => {
                // –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–æ–π–Ω—ã–µ
                // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã –Ω–∞ —Å–º–µ—à–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
                let fixedAfter = after.replace(/(\w+)=("|')([^"']+)("|')/g, '$1="$3"');
                return `<img${before}src="${src}"${fixedAfter}>`;
              }
            );

            // 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ alt, loading –∏ class
            content = content.replace(
              /<img([^>]*?)alt=("|')([^"']*)("|')([^>]*?)>/gi,
              (match, before, quote1, alt, quote2, after) => {
                return `<img${before}alt="${alt}"${after}>`;
              }
            );

            content = content.replace(
              /<img([^>]*?)loading=("|')([^"']*)("|')([^>]*?)>/gi,
              (match, before, quote1, loading, quote2, after) => {
                return `<img${before}loading="${loading}"${after}>`;
              }
            );

            content = content.replace(
              /<img([^>]*?)class=("|')([^"']*)("|')([^>]*?)>/gi,
              (match, before, quote1, className, quote2, after) => {
                return `<img${before}class="${className}"${after}>`;
              }
            );

            // 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
            content = content.replace(
              /<picture><source srcset=("|')([^"']+)("|') type=("|')image\/webp("|')><img([^>]*?)src=("|')([^"']+)("|')([^>]*?)><\/picture>/gi,
              (match, quote1, webpSrc, quote2, quote3, quote4, imgAttrs, quote5, imgSrc, quote6, imgAfter) => {
                // –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –≤—Å–µ –∫–∞–≤—ã—á–∫–∏ –≤ picture –±–ª–æ–∫–µ
                return `<picture><source srcset="${webpSrc}" type="image/webp"><img${imgAttrs}src="${imgSrc}"${imgAfter}></picture>`;
              }
            );

            // 6. –û–±—â–µ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–≥–æ–≤ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
            content = content.replace(
              /<(\w+)([^>]*?)>/gi,
              (match, tagName, attributes) => {
                if (tagName.toLowerCase() === 'script' || tagName.toLowerCase() === 'style') {
                  return match; // –ù–µ —Ç—Ä–æ–≥–∞–µ–º script –∏ style —Ç–µ–≥–∏
                }
                
                // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã –≤ —Ç–µ–≥–µ
                const fixedAttributes = attributes.replace(
                  /(\w+)=("|')([^"']*)("|')/g,
                  '$1="$3"'
                );
                
                return `<${tagName}${fixedAttributes}>`;
              }
            );

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            fs.writeFileSync(destPath, content, 'utf8');
            console.log(`‚úÖ Fixed HTML quotes in: ${htmlFile}`);
          }
        }
        console.log(`‚úÖ Copied and fixed ${htmlFiles.length} HTML files to docs root`);
      }

      console.log('‚úÖ dist successfully copied to docs with HTML fixes');
      
      // –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      console.log('üìÅ Final docs structure:');
      if (fs.existsSync(docsDir)) {
        const items = fs.readdirSync(docsDir);
        console.log('üìã Docs contents:', items);
        
        const imagesDir = path.join(docsDir, 'images');
        if (fs.existsSync(imagesDir)) {
          const images = fs.readdirSync(imagesDir);
          console.log('üñºÔ∏è Images in docs:', images.length, 'files');
        }
      }
    }
  };
};

// –ü–ª–∞–≥–∏–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–æ–≤
const fontAutoPlugin = () => {
  let lastFontHash = null;

  const getFontDirHash = (fontsDir) => {
    try {
      const files = fs.readdirSync(fontsDir)
        .filter(file => /\.(woff2|woff|ttf|otf)$/i.test(file))
        .sort()
        .map(file => `${file}-${fs.statSync(path.join(fontsDir, file)).mtimeMs}`)
        .join('|');
      return files ? require('crypto').createHash('md5').update(files).digest('hex') : null;
    } catch {
      return null;
    }
  };

  return {
    name: 'font-auto-plugin',

    async buildStart() {
      const fontsDir = path.resolve(__dirname, 'src/files/fonts');
      const cssOutputDir = path.resolve(__dirname, 'src/scss/main');
      const cssFilePath = path.join(cssOutputDir, 'fonts.scss');

      if (!fs.existsSync(fontsDir)) {
        console.log('Fonts directory not found, skipping font generation');
        return;
      }

      if (!fs.existsSync(cssOutputDir)) {
        fs.mkdirSync(cssOutputDir, { recursive: true });
      }

      const currentHash = getFontDirHash(fontsDir);

      if (lastFontHash === currentHash && fs.existsSync(cssFilePath)) {
        console.log('‚úÖ fonts.scss is up to date, skipping regeneration');
        return;
      }

      console.log('üîÑ Fonts changed or first run ‚Äî regenerating fonts.scss');

      try {
        const fontFiles = fs.readdirSync(fontsDir);
        const fontFaceRules = [];
        const fontFamilies = {};

        for (const file of fontFiles) {
          if (/\.(woff2|woff|ttf|otf)$/i.test(file)) {
            const fileName = path.parse(file).name;
            const ext = path.parse(file).ext.slice(1);

            const match = fileName.match(/(.*?)([-_](bold|italic|light|medium|regular|black|extrabold|semibold|thin|extralight))?$/i);
            const familyName = match ? match[1].replace(/[-_]/g, ' ') : fileName;
            const style = match && match[3] ? match[3] : 'regular';

            if (!fontFamilies[familyName]) {
              fontFamilies[familyName] = [];
            }

            fontFamilies[familyName].push({
              file,
              ext,
              style: style.toLowerCase(),
              weight: getFontWeight(style),
              isItalic: style.toLowerCase().includes('italic')
            });
          }
        }

        for (const [family, variants] of Object.entries(fontFamilies)) {
          for (const variant of variants) {
            const fontFaceRule = `
@font-face {
  font-family: '${family}';
  src: url('../../files/fonts/${variant.file}') format('${getFormat(variant.ext)}');
  font-weight: ${variant.weight};
  font-style: ${variant.isItalic ? 'italic' : 'normal'};
  font-display: swap;
}
            `.trim();
            fontFaceRules.push(fontFaceRule);
          }
        }

        if (fontFaceRules.length > 0) {
          const cssContent = `/* Auto-generated font styles */\n${fontFaceRules.join('\n\n')}`;
          fs.writeFileSync(cssFilePath, cssContent);
          console.log(`‚úÖ Generated fonts.scss with ${fontFaceRules.length} @font-face rules`);
          lastFontHash = currentHash;
        } else {
          console.log('‚ùå No font face rules were generated');
        }

      } catch (error) {
        console.error('Error generating font styles:', error);
      }
    }
  };
};

// –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–ª–∞–≥–∏–Ω –¥–ª—è –∑–∞–º–µ–Ω—ã –∞–ª–∏–∞—Å–æ–≤ –≤ HTML
const aliasHtmlPlugin = () => {
  return {
    name: 'alias-html',
    transformIndexHtml(html) {
      const aliasMap = {
        '@img/': '/images/',
        '@scss/': './scss/',
        '@js/': './js/',
        '@bg/': './img/',
        '@fonts/': './fonts/'
      };
      
      let transformedHtml = html;
      for (const [alias, realPath] of Object.entries(aliasMap)) {
        transformedHtml = transformedHtml.replace(new RegExp(alias, 'g'), realPath);
      }
      
      return transformedHtml;
    },
  };
};

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–ª–∞–≥–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
const imagesPlugin = () => {
  let isBuild = false;

  return {
    name: 'images-plugin',

    config(config, { command }) {
      isBuild = command === 'build';
    },

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º generateBundle –≤–º–µ—Å—Ç–æ buildStart
    async generateBundle() {
      if (!isBuild) return;

      console.log('üñºÔ∏è Processing images...');
      
      const imagesSrcDir = path.resolve(__dirname, 'src/images');
      const imagesDistDir = path.resolve(__dirname, 'dist/images');
      const webpDistDir = path.join(imagesDistDir, 'webp');

      if (!fs.existsSync(imagesSrcDir)) {
        console.log('üìÅ Images directory not found, skipping image processing');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      if (!fs.existsSync(imagesDistDir)) {
        fs.mkdirSync(imagesDistDir, { recursive: true });
      }
      if (!fs.existsSync(webpDistDir)) {
        fs.mkdirSync(webpDistDir, { recursive: true });
      }

      try {
        const files = fs.readdirSync(imagesSrcDir);
        let copiedCount = 0;
        let webpCount = 0;

        for (const file of files) {
          const srcPath = path.join(imagesSrcDir, file);
          const distPath = path.join(imagesDistDir, file);

          // –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          if (/\.(jpg|jpeg|png|gif|svg|ico)$/i.test(file)) {
            fs.copyFileSync(srcPath, distPath);
            copiedCount++;
            console.log(`üìÑ Copied: ${file}`);
          }

          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º WebP –¥–ª—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
          if (/\.(jpg|jpeg|png)$/i.test(file)) {
            const webpPath = path.join(webpDistDir, `${path.parse(file).name}.webp`);
            try {
              await sharp(srcPath)
                .webp({ quality: 80, effort: 4 })
                .toFile(webpPath);
              webpCount++;
              console.log(`üé® Created WebP: ${path.parse(file).name}.webp`);
            } catch (error) {
              console.warn(`‚ö†Ô∏è Could not convert ${file} to WebP:`, error.message);
            }
          }
        }

        console.log(`‚úÖ Copied ${copiedCount} original images`);
        console.log(`‚úÖ Generated ${webpCount} WebP images`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (fs.existsSync(imagesDistDir)) {
          const distImages = fs.readdirSync(imagesDistDir);
          console.log('üìã Images in dist:', distImages);
        }
        if (fs.existsSync(webpDistDir)) {
          const webpImages = fs.readdirSync(webpDistDir);
          console.log('üé® WebP images generated:', webpImages.length);
        }
        
      } catch (error) {
        console.error('‚ùå Error processing images:', error);
      }
    }
  };
};

// –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–ª–∞–≥–∏–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const pictureWebpPlugin = () => {
  let isBuild = false;

  return {
    name: 'picture-webp-plugin',

    config(config, { command }) {
      isBuild = command === 'build';
    },
    
    transformIndexHtml(html) {
      if (!isBuild) {
        return html;
      }

      console.log('üñºÔ∏è Wrapping images in <picture> tags for production...');
      
      // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ img —Ç–µ–≥–æ–≤
      const imgRegex = /<img\b([^>]*?\bsrc\s*=\s*(["'])([^"']+?\.(png|jpe?g|jpg))\2[^>]*?)>/gi;
      
      let result = html;
      let match;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
      while ((match = imgRegex.exec(html)) !== null) {
        const fullMatch = match[0];
        const attributes = match[1];
        const quote = match[2];
        const src = match[3];
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤ picture –∏–ª–∏ –∏–º–µ—é—Ç data-skip-webp
        if (fullMatch.includes('data-skip-webp') || 
            fullMatch.includes('<picture') || 
            html.substring(match.index - 50, match.index).includes('<picture')) {
          continue;
        }
        
        let webpSrc;
        
        if (src.startsWith('/images/')) {
          webpSrc = src.replace('/images/', '/images/webp/').replace(/\.(png|jpe?g|jpg)$/i, '.webp');
        } else if (src.startsWith('images/')) {
          webpSrc = src.replace('images/', 'images/webp/').replace(/\.(png|jpe?g|jpg)$/i, '.webp');
        } else if (src.startsWith('./images/')) {
          webpSrc = src.replace('./images/', './images/webp/').replace(/\.(png|jpe?g|jpg)$/i, '.webp');
        } else {
          const lastSlashIndex = src.lastIndexOf('/');
          if (lastSlashIndex !== -1) {
            const path = src.substring(0, lastSlashIndex);
            const fileName = src.substring(lastSlashIndex + 1);
            const webpFileName = fileName.replace(/\.(png|jpe?g|jpg)$/i, '.webp');
            webpSrc = `${path}/webp/${webpFileName}`;
          } else {
            webpSrc = src.replace(/\.(png|jpe?g|jpg)$/i, '.webp');
          }
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç–∏–ø –∫–∞–≤—ã—á–µ–∫, —á—Ç–æ –∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ–≥–µ
        const replacement = `<picture><source srcset=${quote}${webpSrc}${quote} type="image/webp">${fullMatch}</picture>`;
        result = result.replace(fullMatch, replacement);
      }
      
      return result;
    }
  };
};

export default defineConfig({
  root: path.resolve(__dirname, 'src'),
  base: './',

  resolve: {
    alias: {
      '@img': path.resolve(__dirname, 'src/images'),
      '@scss': path.resolve(__dirname, 'src/scss'),
      '@js': path.resolve(__dirname, 'src/js'),
      '@bg': path.resolve(__dirname, 'src/img'),
      '@fonts': path.resolve(__dirname, 'src/files/fonts'),
    },
  },

  plugins: [
    fontAutoPlugin(),
    handlebars({
      partialDirectory: path.resolve(__dirname, 'src/html/partials'),
      context: {
        title: {
          index: '–ì–ª–∞–≤–Ω–∞—è',
        },
      },
    }),
    aliasHtmlPlugin(),
    imagesPlugin(),
    pictureWebpPlugin(),
    tailwindcss(),
    copyDistToDocs(),
  ],

  build: {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô rollupOptions - –û–î–ò–ù –±–ª–æ–∫
    rollupOptions: {
      input: rollupInputs,
      output: {
        // ‚úÖ manualChunks –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è JavaScript
       manualChunks: {
          vendor: ['swiper', 'inputmask'],
          // utils: ['./src/js/libs/*']
        },
        assetFileNames: (assetInfo) => {
          if (assetInfo.name && /\.(woff|woff2|eot|ttf|otf)$/i.test(assetInfo.name)) {
            return `files/fonts/[name][extname]`;
          }
          if (assetInfo.name && /\.(jpg|jpeg|png|gif|svg|ico)$/i.test(assetInfo.name)) {
            return `images/[name][extname]`;
          }
          return `assets/[name]-[hash][extname]`;
        },
        chunkFileNames: 'assets/[name]-[hash].js',
        entryFileNames: 'assets/[name]-[hash].js',
      },
    },
    
    chunkSizeWarningLimit: 1000,
    minify: false,
    sourcemap: 'inline',
    outDir: path.resolve(__dirname, 'dist'),
    assetsInlineLimit: 0,
    emptyOutDir: true,
  },

  server: {
    open: '/html/index.html',
    watch: {
      ignored: [
        '**/node_modules/**',
        '**/.git/**',
        '**/dist/**',
        '**/docs/**',
        '**/src/files/**',
        '**/src/images/webp/**',
      ],
    },
  },
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { rollupInputs };