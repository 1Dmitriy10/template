import { g as getDocument, s as setCSSProperty, e as elementChildren, a as setInnerHTML, c as createElement, b as getWindow, d as elementParents, f as elementOffset, n as now, h as nextTick, m as makeElementsArray, i as elementOuterSize, j as elementIndex, k as classesToTokens, l as getTranslate, o as elementTransitionEnd, p as isObject, q as getSlideTransformEl, r as getRotateFix, S as Swiper, t as requireInputmask, u as getDefaultExportFromCjs } from "./vendor-BgpMiiJ6.js";
(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) return;
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) processPreload(link);
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") continue;
      for (const node of mutation.addedNodes) if (node.tagName === "LINK" && node.rel === "modulepreload") processPreload(node);
    }
  }).observe(document, {
    childList: true,
    subtree: true
  });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity) fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy) fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials") fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous") fetchOpts.credentials = "omit";
    else fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep) return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
class Spoilers {
  constructor(spoiler) {
    let check = document.querySelectorAll(`.${spoiler.item}`);
    if (check.length > 0) {
      this.spoiler = spoiler;
      this.class = [...document.querySelectorAll(`.${this.spoiler.item}`)];
      this.choice();
    } else {
      return null;
    }
  }
  choice() {
    if (!this.class || !this.class.length) {
      return;
    }
    if (this.spoiler.allOpen) {
      this.openAllSpoilers();
    } else {
      this.closeAllSpoilers();
    }
    if (this.spoiler.firstOpen && !this.spoiler.allOpen) {
      this.getOpenFirstSpoiler();
    }
    for (const el of this.class) {
      el.addEventListener("click", (event2) => {
        if (this.spoiler.accordion) {
          this.getAccordionSpoiler(event2);
        } else {
          this.getSpoiler(event2);
        }
      });
    }
  }
  // Метод для открытия всех спойлеров при инициализации
  openAllSpoilers() {
    this.class.forEach((item) => {
      const parent = item.parentElement;
      const content = item.nextElementSibling;
      if (content && content.classList.contains("spoiler-content")) {
        parent.setAttribute("open", "");
        item.classList.add("active");
        content.style.display = "block";
      }
    });
  }
  // Метод для закрытия всех спойлеров при инициализации
  closeAllSpoilers() {
    this.class.forEach((item) => {
      const content = item.nextElementSibling;
      if (content && content.classList.contains("spoiler-content")) {
        content.style.display = "none";
      }
      item.parentElement.removeAttribute("open");
      item.classList.remove("active");
    });
  }
  getOpenFirstSpoiler() {
    const firstItem = this.class[0];
    firstItem.parentElement.setAttribute("open", "");
    firstItem.classList.add("active");
    const firstContent = firstItem.nextElementSibling;
    if (firstContent && firstContent.classList.contains("spoiler-content")) {
      this.slideDown(firstContent, this.spoiler.timeAnimation);
    }
  }
  getAccordionSpoiler(event2) {
    const target = event2.currentTarget;
    const parent = target.parentElement;
    const content = target.nextElementSibling;
    if (parent.hasAttribute("open")) {
      event2.preventDefault();
      setTimeout(() => {
        parent.removeAttribute("open");
      }, this.spoiler.timeAnimation);
      target.classList.remove("active");
      this.slideUp(content, this.spoiler.timeAnimation);
    } else {
      document.querySelectorAll(`.${this.spoiler.item}`).forEach((item) => {
        const itemParent = item.parentElement;
        const itemContent = item.nextElementSibling;
        if (itemContent && itemContent.classList.contains("spoiler-content")) {
          itemParent.removeAttribute("open");
          item.classList.remove("active");
          this.slideUp(itemContent, this.spoiler.timeAnimation);
        }
      });
      this.slideDown(content, this.spoiler.timeAnimation);
      target.classList.add("active");
    }
  }
  getSpoiler(event2) {
    const target = event2.currentTarget;
    const parent = target.parentElement;
    const content = target.nextElementSibling;
    if (parent.hasAttribute("open")) {
      event2.preventDefault();
      target.classList.remove("active");
      this.slideUp(content, this.spoiler.timeAnimation);
      setTimeout(() => {
        parent.removeAttribute("open");
      }, this.spoiler.timeAnimation);
    } else {
      this.slideDown(content, this.spoiler.timeAnimation);
      target.classList.add("active");
    }
  }
  // Анимация slideDown (аналог jQuery)
  slideDown(element, duration) {
    element.style.display = "block";
    const height = element.scrollHeight;
    element.style.overflow = "hidden";
    element.style.height = "0";
    element.style.transition = `height ${duration}ms ease`;
    setTimeout(() => {
      element.style.height = `${height}px`;
    }, 10);
    setTimeout(() => {
      element.style.display = "block";
      element.style.height = "";
      element.style.overflow = "";
      element.style.transition = "";
    }, duration + 10);
  }
  // Анимация slideUp (аналог jQuery)
  slideUp(element, duration) {
    const height = element.scrollHeight;
    element.style.overflow = "hidden";
    element.style.height = `${height}px`;
    element.style.transition = `height ${duration}ms ease`;
    setTimeout(() => {
      element.style.height = "0";
    }, 10);
    setTimeout(() => {
      element.style.display = "none";
      element.style.height = "";
      element.style.overflow = "";
      element.style.transition = "";
    }, duration + 10);
  }
}
new Spoilers({
  item: "faq-prev__spoiler-js",
  /*класс споилера*/
  timeAnimation: 300,
  /*время анимации*/
  accordion: true,
  /*Режим аккордиона*/
  firstOpen: true,
  /*Первый элемент всегда открыт*/
  allOpen: false
  /*Все элементы открыты*/
});
class BurgerMenu {
  constructor(menu) {
    if (!document.querySelector(".mob-nav")) return null;
    this.mediaShow = menu.mediaShow || "";
    this.openBtn = menu.openBtn;
    this.closeBtn = menu.closeBtn || menu.openBtn;
    this.menuAnimationTime = menu.menuAnimationTime || 0.5;
    this.spoilersAnimationTime = menu.spoilersAnimationTime || 0.3;
    this.spoilersAccordion = menu.spoilersAccordion || false;
    this.openingSide = menu.openingSide || "horizontal";
    this.arrowIcon = menu.arrowIcon;
    this.menu = document.querySelector(".mob-nav");
    this.init();
  }
  init() {
    this.setEvents();
    this.getIconForSpoilers();
    this.setTimeAnimations();
    this.getSpoilersMenu();
    this.showMenu();
  }
  setEvents() {
    const openBtn = document.querySelector(`${this.openBtn}`);
    const closeBtn = document.querySelector(`${this.closeBtn}`);
    if (closeBtn.className === openBtn.className) {
      openBtn.addEventListener("click", () => this.toggleMenu(openBtn));
    } else {
      openBtn.addEventListener("click", () => this.openMenu(openBtn));
      closeBtn.addEventListener("click", () => this.closeMenu());
    }
  }
  openMenu(openBtn) {
    this.menu.classList.add("active");
    openBtn.style.zIndex = "0";
  }
  closeMenu() {
    this.menu.classList.remove("active");
  }
  toggleMenu(openBtn) {
    openBtn.style.zIndex = "101";
    openBtn.classList.toggle("active");
    this.menu.classList.toggle("active");
  }
  getIconForSpoilers() {
    document.querySelectorAll(".mob-nav-item").forEach((el) => {
      if (el.querySelector(".spoiler-content-menu")) {
        if (!el.querySelector("._spoiler-js-menu")) {
          el.insertAdjacentHTML("beforeend", this.renderArrow());
        }
      }
    });
  }
  renderArrow() {
    return `<btn class='_spoiler-js-menu'>${this.arrowIcon}</btn>`;
  }
  setTimeAnimations() {
    this.menu.style.transition = `${this.menuAnimationTime}s`;
    this.setOpeningSide();
  }
  setOpeningSide() {
    this.menu.classList.add(this.openingSide === "horizontal" ? "horizontal" : "vertical");
  }
  getSpoilersMenu() {
    const timeAnimation = this.spoilersAnimationTime * 1e3;
    const spoilers = document.querySelectorAll("._spoiler-js-menu");
    document.querySelectorAll(".spoiler-content-menu").forEach((content) => {
      this.slideUp(content, timeAnimation);
    });
    spoilers.forEach((spoiler) => {
      spoiler.addEventListener("click", () => {
        const content = spoiler.parentElement.querySelector(".spoiler-content-menu");
        if (this.spoilersAccordion) {
          this.handleAccordion(spoiler, content, timeAnimation);
        } else {
          this.handleDefault(spoiler, content, timeAnimation);
        }
      });
    });
  }
  handleAccordion(spoiler, content, timeAnimation) {
    const isActive = spoiler.classList.contains("active");
    document.querySelectorAll(".spoiler-content-menu").forEach((item) => {
      this.slideUp(item, timeAnimation);
      if (isActive) item.style.display = "none";
    });
    document.querySelectorAll("._spoiler-js-menu").forEach((item) => {
      item.classList.remove("active");
    });
    if (!isActive) {
      this.slideDown(content, timeAnimation);
      spoiler.classList.add("active");
    }
  }
  handleDefault(spoiler, content, timeAnimation) {
    if (spoiler.classList.contains("active")) {
      spoiler.classList.remove("active");
      this.slideUp(content, timeAnimation);
    } else {
      this.slideDown(content, timeAnimation);
      spoiler.classList.add("active");
    }
  }
  slideUp(element, duration) {
    const height = element.scrollHeight;
    element.style.cssText = `
            overflow: hidden;
            height: ${height}px;
            transition: height ${duration}ms ease;
        `;
    setTimeout(() => {
      element.style.height = "0";
    }, 10);
    setTimeout(() => {
      element.style.cssText = "display: none";
    }, duration + 10);
  }
  slideDown(element, duration) {
    element.style.display = "block";
    const height = element.scrollHeight;
    element.style.cssText = `
            overflow: hidden;
            height: 0;
            transition: height ${duration}ms ease;
        `;
    setTimeout(() => {
      element.style.height = `${height}px`;
    }, 10);
    setTimeout(() => {
      element.style.cssText = "display: flex";
    }, duration + 10);
  }
  showMenu() {
    if (!this.mediaShow) return;
    const checkVisibility = () => {
      const btn = document.querySelector(`${this.openBtn}`);
      btn?.classList.toggle("show", window.matchMedia(`(max-width: ${this.mediaShow})`).matches);
    };
    checkVisibility();
    window.addEventListener("resize", checkVisibility);
  }
}
new BurgerMenu({
  /*---Класс кнопки для открывания меню---*/
  openBtn: ".mob-nav-btn",
  /*---Класс кнопки для закрытия меню (если кнопка для откр/закр одна - то оставить пустой)---*/
  closeBtn: "",
  /*---Иконка стрелки спойлера (svg или <i>)---*/
  arrowIcon: `
    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M8 8.10811L10.6 5.47297C10.8567 5.21279 11.2766 5.21279 11.5333 5.47297C11.7921 5.73521 11.7921 6.15668 11.5333 6.41892L8.71184 9.27854C8.32025 9.67542 7.67974 9.67542 7.28816 9.27854L4.4604 6.41257C4.20514 6.15385 4.20514 5.73804 4.4604 5.47932C4.72056 5.21565 5.1461 5.21565 5.40626 5.47932L8 8.10811Z" fill="#1D222F" />
</svg>
    `,
  /*---Скорость анимации появления меню (0.3)---*/
  menuAnimationTime: "",
  /*---Скорость анимации спойлеров (0.3)---*/
  spoilersAnimationTime: "",
  /*---Режим аккордиона---*/
  spoilersAccordion: false,
  /*---Сторона открывания меню horizontal/vertical---*/
  openingSide: "horizontal",
  /*---Разрешение при котором появиться меню---*/
  mediaShow: "768px"
});
class Menu {
  constructor(options) {
    this.classMenu = document.querySelector(`${options.class}`);
    if (!this.classMenu) return null;
    this.mediaHidden = options.mediaHidden || "";
    this.blockMenu = this.classMenu;
    this.items = Array.from(this.classMenu.children);
    this.screenWidth = window.innerWidth;
    this.typeMenu = options.TypMenu;
    this.arrowSubmenu = options.arrowSubmenu || "";
    this.hasOpacityItems = options.opacityItem || false;
    this.hasSubmenuSolution = options.solutionForSubmenu || false;
    if (this.hasOpacityItems) {
      this.initOpacityItems();
    }
    this.firstRender();
    if (this.hasSubmenuSolution) {
      this.initSubmenuSolution();
    }
    this.addArrowSubmenu();
    this.setupMediaQueries();
    this.selectTypeMenu();
  }
  initOpacityItems() {
    this.classMenu.insertAdjacentHTML("beforeend", `
            <li class="nav__item-wrap" style="display: none;">
                <div class="nav__item-opacity-wrap">
                    <svg viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
                        <path d="m6 20a4 4 0 1 1 4-4 4 4 0 0 1 -4 4zm0-6a2 2 0 1 0 2 2 2 2 0 0 0 -2-2z"></path>
                        <path d="m16 20a4 4 0 1 1 4-4 4 4 0 0 1 -4 4zm0-6a2 2 0 1 0 2 2 2 2 0 0 0 -2-2z"></path>
                        <path d="m26 20a4 4 0 1 1 4-4 4 4 0 0 1 -4 4zm0-6a2 2 0 1 0 2 2 2 2 0 0 0 -2-2z"></path>
                    </svg>
                </div>
                <ul class="nav__item-opacity"></ul>
            </li>
        `);
    this.opacityMenuBlock = this.classMenu.querySelector(".nav__item-wrap");
    this.opacityMenuWrap = this.classMenu.querySelector(".nav__item-opacity");
    this.opacityMenuItems = [];
  }
  firstRender() {
    document.addEventListener("DOMContentLoaded", () => {
      if (!this.hasOpacityItems) return;
      const positionStart = this.items[0].getBoundingClientRect().top;
      this.menuItems = this.items.filter((item) => {
        const itemTop = item.getBoundingClientRect().top;
        if (itemTop !== positionStart) {
          this.opacityMenuItems.push(item);
          return false;
        }
        return true;
      });
      this.updateMenuLayout();
      this.setupResizeObserver();
    });
  }
  updateMenuLayout() {
    if (!this.hasOpacityItems) return;
    if (this.opacityMenuItems.length > 0) {
      this.opacityMenuBlock.style.display = "flex";
      for (let i2 = this.menuItems.length - 1; i2 >= 0; i2--) {
        const positionStart = this.menuItems[0].getBoundingClientRect().top;
        const itemTop = this.opacityMenuBlock.getBoundingClientRect().top;
        if (itemTop !== positionStart) {
          this.opacityMenuItems.push(this.menuItems.pop());
          this.renderMenu();
        }
      }
    } else if (this.opacityMenuBlock) {
      this.opacityMenuBlock.style.display = "none";
    }
  }
  renderMenu() {
    if (!this.hasOpacityItems) return;
    this.blockMenu.innerHTML = "";
    this.menuItems.forEach((item) => {
      Array.from(item.children).forEach((child) => {
        if (child.classList.contains("nav__item-opacity-wrap")) {
          child.remove();
        }
      });
      this.blockMenu.appendChild(item);
    });
    if (this.opacityMenuBlock) {
      this.blockMenu.appendChild(this.opacityMenuBlock);
    }
    this.opacityMenuWrap.innerHTML = "";
    this.opacityMenuItems.forEach((item) => {
      this.opacityMenuWrap.appendChild(item);
    });
  }
  setupMediaQueries() {
    if (!this.mediaHidden) return;
    const mediaQuery = window.matchMedia(`(max-width: ${this.mediaHidden})`);
    const updateVisibility = () => {
      this.classMenu.classList.toggle("hidden", mediaQuery.matches);
    };
    updateVisibility();
    mediaQuery.addListener(updateVisibility);
  }
  setupResizeObserver() {
    if (!this.hasOpacityItems) return;
    let resizeTimer;
    const handleResize = () => {
      clearTimeout(resizeTimer);
      resizeTimer = setTimeout(() => {
        const positionStart = this.menuItems[0]?.getBoundingClientRect().top;
        const newWidth = window.innerWidth;
        for (let i2 = 0; i2 < this.menuItems.length; i2++) {
          const itemTop = this.menuItems[i2].getBoundingClientRect().top;
          if (itemTop !== positionStart) {
            this.opacityMenuItems.push(this.menuItems.pop());
            this.renderMenu();
            break;
          }
        }
        if (newWidth > this.screenWidth) {
          for (let i2 = this.opacityMenuItems.length - 1; i2 >= 0; i2--) {
            this.menuItems.push(this.opacityMenuItems.pop());
            this.renderMenu();
            const firstItemTop = this.menuItems[0].getBoundingClientRect().top;
            const lastItemTop = this.menuItems[this.menuItems.length - 1].getBoundingClientRect().top;
            if (lastItemTop !== firstItemTop) {
              this.opacityMenuItems.push(this.menuItems.pop());
              this.renderMenu();
              break;
            }
          }
        }
        this.screenWidth = newWidth;
        this.updateMenuLayout();
      }, 100);
    };
    window.addEventListener("resize", handleResize);
  }
  initSubmenuSolution() {
    const subMenuWrap = this.classMenu.querySelector(".sub-menu-wrap");
    if (!subMenuWrap) return;
    this.opacityMenuItems.forEach((item) => {
      item.addEventListener("mouseenter", () => {
        const subMenu = item.querySelector(".sub-menu");
        if (!subMenu) return;
        subMenuWrap.innerHTML = "";
        subMenuWrap.appendChild(subMenu.cloneNode(true));
        subMenu.addEventListener("mouseenter", () => {
          subMenuWrap.innerHTML = "";
        });
        subMenuWrap.addEventListener("mouseleave", () => {
          subMenuWrap.innerHTML = "";
        });
      });
    });
  }
  addArrowSubmenu() {
    if (!this.arrowSubmenu) return;
    const items = this.blockMenu.querySelectorAll("li:not(.nav__item-wrap)");
    items.forEach((item) => {
      if (item.querySelector(".sub-menu")) {
        item.insertAdjacentHTML("beforeend", `
                    <button class="drop-menu" aria-expanded="false">
                        ${this.arrowSubmenu}
                    </button>
                `);
      }
    });
  }
  selectTypeMenu() {
    const submenus = this.classMenu.querySelectorAll(".sub-menu");
    if (!submenus.length) return;
    switch (this.typeMenu) {
      case "full":
        submenus.forEach((menu) => menu.classList.add("full"));
        break;
      case "item":
        submenus.forEach((menu) => {
          menu.classList.add("item");
          menu.parentElement.classList.add("item");
        });
        break;
    }
  }
}
new Menu({
  /*Класс меню */
  class: ".nav-list",
  /*Добавление не помещающихся элементов меню в специальный контейнер*/
  opacityItem: true,
  /*Тип меню full,container,item*/
  TypMenu: "container",
  /*Обертка для подменю скрытых элементов
  Разместить в нужном месте <div class="sub-menu-wrap"></div>*/
  solutionForSubmenu: true,
  /*Когда скрыть меню*/
  mediaHidden: "768px",
  /*Стрелка для выпадающего меню (svg/i)*/
  arrowSubmenu: `
            <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M8 8.10811L10.6 5.47297C10.8567 5.21279 11.2766 5.21279 11.5333 5.47297C11.7921 5.73521 11.7921 6.15668 11.5333 6.41892L8.71184 9.27854C8.32025 9.67542 7.67974 9.67542 7.28816 9.27854L4.4604 6.41257C4.20514 6.15385 4.20514 5.73804 4.4604 5.47932C4.72056 5.21565 5.1461 5.21565 5.40626 5.47932L8 8.10811Z" fill="#404040" />
</svg>
`
});
new Menu({
  /*Класс меню */
  class: ".nav-list-sticky",
  /*Добавление не помещающихся элементов меню в специальный контейнер*/
  opacityItem: true,
  /*Тип меню full,container,item*/
  TypMenu: "container",
  /*Обертка для подменю скрытых элементов
  Разместить в нужном месте <div class="sub-menu-wrap-sticky"></div>*/
  solutionForSubmenu: true,
  /*Когда скрыть меню*/
  mediaHidden: "768",
  /*Стрелка для выпадающего меню (svg/i)*/
  arrowSubmenu: `
            <svg width="10" height="10" viewBox="0 0 52 27"         fill="none" xmlns="http://www.w3.org/2000/svg">
                 <path d="M1.20711 1.70711L25.2929 25.7929C25.6834 26.1834 26.3166 26.1834 26.7071 25.7929L50.7929 1.70711C51.4229 1.07714 50.9767 1.57952e-06 50.0858 1.57952e-06H1.91422C1.02331 1.57952e-06 0.577144 1.07714 1.20711 1.70711Z" fill="black"/>
             </svg>
`
});
function stickyHeader() {
  let btnOpen = document.querySelector("#sticky-menu-open");
  let mobMenu = document.querySelector("#mob-menu");
  let stickyHeader2 = document.querySelector(".sticky-header");
  if (!stickyHeader2) {
    return null;
  }
  window.addEventListener("scroll", getStickyHeader);
  btnOpen.addEventListener("click", function() {
    mobMenu.classList.toggle("active");
  });
  function getStickyHeader() {
    let x2 = pageYOffset;
    if (x2 > 150) {
      stickyHeader2.classList.add("show");
    } else {
      stickyHeader2.classList.remove("show");
    }
  }
}
stickyHeader();
class Tabs {
  constructor(tab) {
    let check = document.querySelector(`.${tab.class}`);
    if (check != void 0) {
      this.item = document.querySelector(`.${tab.class}`);
      this.title = this.item.querySelectorAll(".tabs__title");
      this.content = this.item.querySelectorAll(".tabs__item");
      this.count = 1;
      this.countTabs = 1;
      this.setDataAttr();
      this.activFirstTab();
    } else {
      return null;
    }
  }
  setDataAttr() {
    for (const el of this.title) {
      if (el.classList.contains("tabs__title")) {
        el.dataset.number = `tab_${this.count} `;
        this.count++;
      }
    }
    for (const el of this.content) {
      el.dataset.number = `tab_${this.countTabs} `;
      this.countTabs++;
    }
  }
  activFirstTab() {
    if (this.item) {
      this.title[0].classList.add("active");
      this.content[0].classList.add("active");
      this.addEvents();
    }
  }
  addEvents() {
    let titleBox = this.item.querySelector(".tabs__title-box");
    titleBox.addEventListener("click", (e2) => {
      if (e2.target.classList.contains("tabs__title")) {
        this.changeActiveTab(e2);
      }
    });
  }
  changeActiveTab(e2) {
    let number = e2.target.dataset.number;
    for (const el of this.title) {
      el.classList.remove("active");
    }
    e2.target.classList.add("active");
    for (const el of this.content) {
      let data = el.dataset.number;
      el.classList.remove("active");
      if (number === data) {
        el.classList.add("active");
      }
    }
  }
}
new Tabs({ class: "_tabs-js" });
function Virtual(_ref) {
  let {
    swiper,
    extendParams,
    on,
    emit
  } = _ref;
  extendParams({
    virtual: {
      enabled: false,
      slides: [],
      cache: true,
      renderSlide: null,
      renderExternal: null,
      renderExternalUpdate: true,
      addSlidesBefore: 0,
      addSlidesAfter: 0
    }
  });
  let cssModeTimeout;
  const document2 = getDocument();
  swiper.virtual = {
    cache: {},
    from: void 0,
    to: void 0,
    slides: [],
    offset: 0,
    slidesGrid: []
  };
  const tempDOM = document2.createElement("div");
  function renderSlide(slide, index) {
    const params = swiper.params.virtual;
    if (params.cache && swiper.virtual.cache[index]) {
      return swiper.virtual.cache[index];
    }
    let slideEl;
    if (params.renderSlide) {
      slideEl = params.renderSlide.call(swiper, slide, index);
      if (typeof slideEl === "string") {
        setInnerHTML(tempDOM, slideEl);
        slideEl = tempDOM.children[0];
      }
    } else if (swiper.isElement) {
      slideEl = createElement("swiper-slide");
    } else {
      slideEl = createElement("div", swiper.params.slideClass);
    }
    slideEl.setAttribute("data-swiper-slide-index", index);
    if (!params.renderSlide) {
      setInnerHTML(slideEl, slide);
    }
    if (params.cache) {
      swiper.virtual.cache[index] = slideEl;
    }
    return slideEl;
  }
  function update(force, beforeInit, forceActiveIndex) {
    const {
      slidesPerView,
      slidesPerGroup,
      centeredSlides,
      loop: isLoop,
      initialSlide
    } = swiper.params;
    if (beforeInit && !isLoop && initialSlide > 0) {
      return;
    }
    const {
      addSlidesBefore,
      addSlidesAfter
    } = swiper.params.virtual;
    const {
      from: previousFrom,
      to: previousTo,
      slides,
      slidesGrid: previousSlidesGrid,
      offset: previousOffset
    } = swiper.virtual;
    if (!swiper.params.cssMode) {
      swiper.updateActiveIndex();
    }
    const activeIndex = typeof forceActiveIndex === "undefined" ? swiper.activeIndex || 0 : forceActiveIndex;
    let offsetProp;
    if (swiper.rtlTranslate) offsetProp = "right";
    else offsetProp = swiper.isHorizontal() ? "left" : "top";
    let slidesAfter;
    let slidesBefore;
    if (centeredSlides) {
      slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;
      slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesBefore;
    } else {
      slidesAfter = slidesPerView + (slidesPerGroup - 1) + addSlidesAfter;
      slidesBefore = (isLoop ? slidesPerView : slidesPerGroup) + addSlidesBefore;
    }
    let from = activeIndex - slidesBefore;
    let to = activeIndex + slidesAfter;
    if (!isLoop) {
      from = Math.max(from, 0);
      to = Math.min(to, slides.length - 1);
    }
    let offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);
    if (isLoop && activeIndex >= slidesBefore) {
      from -= slidesBefore;
      if (!centeredSlides) offset += swiper.slidesGrid[0];
    } else if (isLoop && activeIndex < slidesBefore) {
      from = -slidesBefore;
      if (centeredSlides) offset += swiper.slidesGrid[0];
    }
    Object.assign(swiper.virtual, {
      from,
      to,
      offset,
      slidesGrid: swiper.slidesGrid,
      slidesBefore,
      slidesAfter
    });
    function onRendered() {
      swiper.updateSlides();
      swiper.updateProgress();
      swiper.updateSlidesClasses();
      emit("virtualUpdate");
    }
    if (previousFrom === from && previousTo === to && !force) {
      if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {
        swiper.slides.forEach((slideEl) => {
          slideEl.style[offsetProp] = `${offset - Math.abs(swiper.cssOverflowAdjustment())}px`;
        });
      }
      swiper.updateProgress();
      emit("virtualUpdate");
      return;
    }
    if (swiper.params.virtual.renderExternal) {
      swiper.params.virtual.renderExternal.call(swiper, {
        offset,
        from,
        to,
        slides: (function getSlides() {
          const slidesToRender = [];
          for (let i2 = from; i2 <= to; i2 += 1) {
            slidesToRender.push(slides[i2]);
          }
          return slidesToRender;
        })()
      });
      if (swiper.params.virtual.renderExternalUpdate) {
        onRendered();
      } else {
        emit("virtualUpdate");
      }
      return;
    }
    const prependIndexes = [];
    const appendIndexes = [];
    const getSlideIndex = (index) => {
      let slideIndex = index;
      if (index < 0) {
        slideIndex = slides.length + index;
      } else if (slideIndex >= slides.length) {
        slideIndex = slideIndex - slides.length;
      }
      return slideIndex;
    };
    if (force) {
      swiper.slides.filter((el) => el.matches(`.${swiper.params.slideClass}, swiper-slide`)).forEach((slideEl) => {
        slideEl.remove();
      });
    } else {
      for (let i2 = previousFrom; i2 <= previousTo; i2 += 1) {
        if (i2 < from || i2 > to) {
          const slideIndex = getSlideIndex(i2);
          swiper.slides.filter((el) => el.matches(`.${swiper.params.slideClass}[data-swiper-slide-index="${slideIndex}"], swiper-slide[data-swiper-slide-index="${slideIndex}"]`)).forEach((slideEl) => {
            slideEl.remove();
          });
        }
      }
    }
    const loopFrom = isLoop ? -slides.length : 0;
    const loopTo = isLoop ? slides.length * 2 : slides.length;
    for (let i2 = loopFrom; i2 < loopTo; i2 += 1) {
      if (i2 >= from && i2 <= to) {
        const slideIndex = getSlideIndex(i2);
        if (typeof previousTo === "undefined" || force) {
          appendIndexes.push(slideIndex);
        } else {
          if (i2 > previousTo) appendIndexes.push(slideIndex);
          if (i2 < previousFrom) prependIndexes.push(slideIndex);
        }
      }
    }
    appendIndexes.forEach((index) => {
      swiper.slidesEl.append(renderSlide(slides[index], index));
    });
    if (isLoop) {
      for (let i2 = prependIndexes.length - 1; i2 >= 0; i2 -= 1) {
        const index = prependIndexes[i2];
        swiper.slidesEl.prepend(renderSlide(slides[index], index));
      }
    } else {
      prependIndexes.sort((a2, b2) => b2 - a2);
      prependIndexes.forEach((index) => {
        swiper.slidesEl.prepend(renderSlide(slides[index], index));
      });
    }
    elementChildren(swiper.slidesEl, ".swiper-slide, swiper-slide").forEach((slideEl) => {
      slideEl.style[offsetProp] = `${offset - Math.abs(swiper.cssOverflowAdjustment())}px`;
    });
    onRendered();
  }
  function appendSlide2(slides) {
    if (typeof slides === "object" && "length" in slides) {
      for (let i2 = 0; i2 < slides.length; i2 += 1) {
        if (slides[i2]) swiper.virtual.slides.push(slides[i2]);
      }
    } else {
      swiper.virtual.slides.push(slides);
    }
    update(true);
  }
  function prependSlide2(slides) {
    const activeIndex = swiper.activeIndex;
    let newActiveIndex = activeIndex + 1;
    let numberOfNewSlides = 1;
    if (Array.isArray(slides)) {
      for (let i2 = 0; i2 < slides.length; i2 += 1) {
        if (slides[i2]) swiper.virtual.slides.unshift(slides[i2]);
      }
      newActiveIndex = activeIndex + slides.length;
      numberOfNewSlides = slides.length;
    } else {
      swiper.virtual.slides.unshift(slides);
    }
    if (swiper.params.virtual.cache) {
      const cache = swiper.virtual.cache;
      const newCache = {};
      Object.keys(cache).forEach((cachedIndex) => {
        const cachedEl = cache[cachedIndex];
        const cachedElIndex = cachedEl.getAttribute("data-swiper-slide-index");
        if (cachedElIndex) {
          cachedEl.setAttribute("data-swiper-slide-index", parseInt(cachedElIndex, 10) + numberOfNewSlides);
        }
        newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = cachedEl;
      });
      swiper.virtual.cache = newCache;
    }
    update(true);
    swiper.slideTo(newActiveIndex, 0);
  }
  function removeSlide2(slidesIndexes) {
    if (typeof slidesIndexes === "undefined" || slidesIndexes === null) return;
    let activeIndex = swiper.activeIndex;
    if (Array.isArray(slidesIndexes)) {
      for (let i2 = slidesIndexes.length - 1; i2 >= 0; i2 -= 1) {
        if (swiper.params.virtual.cache) {
          delete swiper.virtual.cache[slidesIndexes[i2]];
          Object.keys(swiper.virtual.cache).forEach((key) => {
            if (key > slidesIndexes) {
              swiper.virtual.cache[key - 1] = swiper.virtual.cache[key];
              swiper.virtual.cache[key - 1].setAttribute("data-swiper-slide-index", key - 1);
              delete swiper.virtual.cache[key];
            }
          });
        }
        swiper.virtual.slides.splice(slidesIndexes[i2], 1);
        if (slidesIndexes[i2] < activeIndex) activeIndex -= 1;
        activeIndex = Math.max(activeIndex, 0);
      }
    } else {
      if (swiper.params.virtual.cache) {
        delete swiper.virtual.cache[slidesIndexes];
        Object.keys(swiper.virtual.cache).forEach((key) => {
          if (key > slidesIndexes) {
            swiper.virtual.cache[key - 1] = swiper.virtual.cache[key];
            swiper.virtual.cache[key - 1].setAttribute("data-swiper-slide-index", key - 1);
            delete swiper.virtual.cache[key];
          }
        });
      }
      swiper.virtual.slides.splice(slidesIndexes, 1);
      if (slidesIndexes < activeIndex) activeIndex -= 1;
      activeIndex = Math.max(activeIndex, 0);
    }
    update(true);
    swiper.slideTo(activeIndex, 0);
  }
  function removeAllSlides2() {
    swiper.virtual.slides = [];
    if (swiper.params.virtual.cache) {
      swiper.virtual.cache = {};
    }
    update(true);
    swiper.slideTo(0, 0);
  }
  on("beforeInit", () => {
    if (!swiper.params.virtual.enabled) return;
    let domSlidesAssigned;
    if (typeof swiper.passedParams.virtual.slides === "undefined") {
      const slides = [...swiper.slidesEl.children].filter((el) => el.matches(`.${swiper.params.slideClass}, swiper-slide`));
      if (slides && slides.length) {
        swiper.virtual.slides = [...slides];
        domSlidesAssigned = true;
        slides.forEach((slideEl, slideIndex) => {
          slideEl.setAttribute("data-swiper-slide-index", slideIndex);
          swiper.virtual.cache[slideIndex] = slideEl;
          slideEl.remove();
        });
      }
    }
    if (!domSlidesAssigned) {
      swiper.virtual.slides = swiper.params.virtual.slides;
    }
    swiper.classNames.push(`${swiper.params.containerModifierClass}virtual`);
    swiper.params.watchSlidesProgress = true;
    swiper.originalParams.watchSlidesProgress = true;
    update(false, true);
  });
  on("setTranslate", () => {
    if (!swiper.params.virtual.enabled) return;
    if (swiper.params.cssMode && !swiper._immediateVirtual) {
      clearTimeout(cssModeTimeout);
      cssModeTimeout = setTimeout(() => {
        update();
      }, 100);
    } else {
      update();
    }
  });
  on("init update resize", () => {
    if (!swiper.params.virtual.enabled) return;
    if (swiper.params.cssMode) {
      setCSSProperty(swiper.wrapperEl, "--swiper-virtual-size", `${swiper.virtualSize}px`);
    }
  });
  Object.assign(swiper.virtual, {
    appendSlide: appendSlide2,
    prependSlide: prependSlide2,
    removeSlide: removeSlide2,
    removeAllSlides: removeAllSlides2,
    update
  });
}
function Keyboard(_ref) {
  let {
    swiper,
    extendParams,
    on,
    emit
  } = _ref;
  const document2 = getDocument();
  const window2 = getWindow();
  swiper.keyboard = {
    enabled: false
  };
  extendParams({
    keyboard: {
      enabled: false,
      onlyInViewport: true,
      pageUpDown: true
    }
  });
  function handle(event2) {
    if (!swiper.enabled) return;
    const {
      rtlTranslate: rtl
    } = swiper;
    let e2 = event2;
    if (e2.originalEvent) e2 = e2.originalEvent;
    const kc = e2.keyCode || e2.charCode;
    const pageUpDown = swiper.params.keyboard.pageUpDown;
    const isPageUp = pageUpDown && kc === 33;
    const isPageDown = pageUpDown && kc === 34;
    const isArrowLeft = kc === 37;
    const isArrowRight = kc === 39;
    const isArrowUp = kc === 38;
    const isArrowDown = kc === 40;
    if (!swiper.allowSlideNext && (swiper.isHorizontal() && isArrowRight || swiper.isVertical() && isArrowDown || isPageDown)) {
      return false;
    }
    if (!swiper.allowSlidePrev && (swiper.isHorizontal() && isArrowLeft || swiper.isVertical() && isArrowUp || isPageUp)) {
      return false;
    }
    if (e2.shiftKey || e2.altKey || e2.ctrlKey || e2.metaKey) {
      return void 0;
    }
    if (document2.activeElement && (document2.activeElement.isContentEditable || document2.activeElement.nodeName && (document2.activeElement.nodeName.toLowerCase() === "input" || document2.activeElement.nodeName.toLowerCase() === "textarea"))) {
      return void 0;
    }
    if (swiper.params.keyboard.onlyInViewport && (isPageUp || isPageDown || isArrowLeft || isArrowRight || isArrowUp || isArrowDown)) {
      let inView = false;
      if (elementParents(swiper.el, `.${swiper.params.slideClass}, swiper-slide`).length > 0 && elementParents(swiper.el, `.${swiper.params.slideActiveClass}`).length === 0) {
        return void 0;
      }
      const el = swiper.el;
      const swiperWidth = el.clientWidth;
      const swiperHeight = el.clientHeight;
      const windowWidth = window2.innerWidth;
      const windowHeight = window2.innerHeight;
      const swiperOffset = elementOffset(el);
      if (rtl) swiperOffset.left -= el.scrollLeft;
      const swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiperWidth, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiperHeight], [swiperOffset.left + swiperWidth, swiperOffset.top + swiperHeight]];
      for (let i2 = 0; i2 < swiperCoord.length; i2 += 1) {
        const point = swiperCoord[i2];
        if (point[0] >= 0 && point[0] <= windowWidth && point[1] >= 0 && point[1] <= windowHeight) {
          if (point[0] === 0 && point[1] === 0) continue;
          inView = true;
        }
      }
      if (!inView) return void 0;
    }
    if (swiper.isHorizontal()) {
      if (isPageUp || isPageDown || isArrowLeft || isArrowRight) {
        if (e2.preventDefault) e2.preventDefault();
        else e2.returnValue = false;
      }
      if ((isPageDown || isArrowRight) && !rtl || (isPageUp || isArrowLeft) && rtl) swiper.slideNext();
      if ((isPageUp || isArrowLeft) && !rtl || (isPageDown || isArrowRight) && rtl) swiper.slidePrev();
    } else {
      if (isPageUp || isPageDown || isArrowUp || isArrowDown) {
        if (e2.preventDefault) e2.preventDefault();
        else e2.returnValue = false;
      }
      if (isPageDown || isArrowDown) swiper.slideNext();
      if (isPageUp || isArrowUp) swiper.slidePrev();
    }
    emit("keyPress", kc);
    return void 0;
  }
  function enable() {
    if (swiper.keyboard.enabled) return;
    document2.addEventListener("keydown", handle);
    swiper.keyboard.enabled = true;
  }
  function disable() {
    if (!swiper.keyboard.enabled) return;
    document2.removeEventListener("keydown", handle);
    swiper.keyboard.enabled = false;
  }
  on("init", () => {
    if (swiper.params.keyboard.enabled) {
      enable();
    }
  });
  on("destroy", () => {
    if (swiper.keyboard.enabled) {
      disable();
    }
  });
  Object.assign(swiper.keyboard, {
    enable,
    disable
  });
}
function Mousewheel(_ref) {
  let {
    swiper,
    extendParams,
    on,
    emit
  } = _ref;
  const window2 = getWindow();
  extendParams({
    mousewheel: {
      enabled: false,
      releaseOnEdges: false,
      invert: false,
      forceToAxis: false,
      sensitivity: 1,
      eventsTarget: "container",
      thresholdDelta: null,
      thresholdTime: null,
      noMousewheelClass: "swiper-no-mousewheel"
    }
  });
  swiper.mousewheel = {
    enabled: false
  };
  let timeout;
  let lastScrollTime = now();
  let lastEventBeforeSnap;
  const recentWheelEvents = [];
  function normalize(e2) {
    const PIXEL_STEP = 10;
    const LINE_HEIGHT = 40;
    const PAGE_HEIGHT = 800;
    let sX = 0;
    let sY = 0;
    let pX = 0;
    let pY = 0;
    if ("detail" in e2) {
      sY = e2.detail;
    }
    if ("wheelDelta" in e2) {
      sY = -e2.wheelDelta / 120;
    }
    if ("wheelDeltaY" in e2) {
      sY = -e2.wheelDeltaY / 120;
    }
    if ("wheelDeltaX" in e2) {
      sX = -e2.wheelDeltaX / 120;
    }
    if ("axis" in e2 && e2.axis === e2.HORIZONTAL_AXIS) {
      sX = sY;
      sY = 0;
    }
    pX = sX * PIXEL_STEP;
    pY = sY * PIXEL_STEP;
    if ("deltaY" in e2) {
      pY = e2.deltaY;
    }
    if ("deltaX" in e2) {
      pX = e2.deltaX;
    }
    if (e2.shiftKey && !pX) {
      pX = pY;
      pY = 0;
    }
    if ((pX || pY) && e2.deltaMode) {
      if (e2.deltaMode === 1) {
        pX *= LINE_HEIGHT;
        pY *= LINE_HEIGHT;
      } else {
        pX *= PAGE_HEIGHT;
        pY *= PAGE_HEIGHT;
      }
    }
    if (pX && !sX) {
      sX = pX < 1 ? -1 : 1;
    }
    if (pY && !sY) {
      sY = pY < 1 ? -1 : 1;
    }
    return {
      spinX: sX,
      spinY: sY,
      pixelX: pX,
      pixelY: pY
    };
  }
  function handleMouseEnter() {
    if (!swiper.enabled) return;
    swiper.mouseEntered = true;
  }
  function handleMouseLeave() {
    if (!swiper.enabled) return;
    swiper.mouseEntered = false;
  }
  function animateSlider(newEvent) {
    if (swiper.params.mousewheel.thresholdDelta && newEvent.delta < swiper.params.mousewheel.thresholdDelta) {
      return false;
    }
    if (swiper.params.mousewheel.thresholdTime && now() - lastScrollTime < swiper.params.mousewheel.thresholdTime) {
      return false;
    }
    if (newEvent.delta >= 6 && now() - lastScrollTime < 60) {
      return true;
    }
    if (newEvent.direction < 0) {
      if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {
        swiper.slideNext();
        emit("scroll", newEvent.raw);
      }
    } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {
      swiper.slidePrev();
      emit("scroll", newEvent.raw);
    }
    lastScrollTime = new window2.Date().getTime();
    return false;
  }
  function releaseScroll(newEvent) {
    const params = swiper.params.mousewheel;
    if (newEvent.direction < 0) {
      if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {
        return true;
      }
    } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {
      return true;
    }
    return false;
  }
  function handle(event2) {
    let e2 = event2;
    let disableParentSwiper = true;
    if (!swiper.enabled) return;
    if (event2.target.closest(`.${swiper.params.mousewheel.noMousewheelClass}`)) return;
    const params = swiper.params.mousewheel;
    if (swiper.params.cssMode) {
      e2.preventDefault();
    }
    let targetEl = swiper.el;
    if (swiper.params.mousewheel.eventsTarget !== "container") {
      targetEl = document.querySelector(swiper.params.mousewheel.eventsTarget);
    }
    const targetElContainsTarget = targetEl && targetEl.contains(e2.target);
    if (!swiper.mouseEntered && !targetElContainsTarget && !params.releaseOnEdges) return true;
    if (e2.originalEvent) e2 = e2.originalEvent;
    let delta = 0;
    const rtlFactor = swiper.rtlTranslate ? -1 : 1;
    const data = normalize(e2);
    if (params.forceToAxis) {
      if (swiper.isHorizontal()) {
        if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) delta = -data.pixelX * rtlFactor;
        else return true;
      } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) delta = -data.pixelY;
      else return true;
    } else {
      delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;
    }
    if (delta === 0) return true;
    if (params.invert) delta = -delta;
    let positions = swiper.getTranslate() + delta * params.sensitivity;
    if (positions >= swiper.minTranslate()) positions = swiper.minTranslate();
    if (positions <= swiper.maxTranslate()) positions = swiper.maxTranslate();
    disableParentSwiper = swiper.params.loop ? true : !(positions === swiper.minTranslate() || positions === swiper.maxTranslate());
    if (disableParentSwiper && swiper.params.nested) e2.stopPropagation();
    if (!swiper.params.freeMode || !swiper.params.freeMode.enabled) {
      const newEvent = {
        time: now(),
        delta: Math.abs(delta),
        direction: Math.sign(delta),
        raw: event2
      };
      if (recentWheelEvents.length >= 2) {
        recentWheelEvents.shift();
      }
      const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : void 0;
      recentWheelEvents.push(newEvent);
      if (prevEvent) {
        if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta || newEvent.time > prevEvent.time + 150) {
          animateSlider(newEvent);
        }
      } else {
        animateSlider(newEvent);
      }
      if (releaseScroll(newEvent)) {
        return true;
      }
    } else {
      const newEvent = {
        time: now(),
        delta: Math.abs(delta),
        direction: Math.sign(delta)
      };
      const ignoreWheelEvents = lastEventBeforeSnap && newEvent.time < lastEventBeforeSnap.time + 500 && newEvent.delta <= lastEventBeforeSnap.delta && newEvent.direction === lastEventBeforeSnap.direction;
      if (!ignoreWheelEvents) {
        lastEventBeforeSnap = void 0;
        let position = swiper.getTranslate() + delta * params.sensitivity;
        const wasBeginning = swiper.isBeginning;
        const wasEnd = swiper.isEnd;
        if (position >= swiper.minTranslate()) position = swiper.minTranslate();
        if (position <= swiper.maxTranslate()) position = swiper.maxTranslate();
        swiper.setTransition(0);
        swiper.setTranslate(position);
        swiper.updateProgress();
        swiper.updateActiveIndex();
        swiper.updateSlidesClasses();
        if (!wasBeginning && swiper.isBeginning || !wasEnd && swiper.isEnd) {
          swiper.updateSlidesClasses();
        }
        if (swiper.params.loop) {
          swiper.loopFix({
            direction: newEvent.direction < 0 ? "next" : "prev",
            byMousewheel: true
          });
        }
        if (swiper.params.freeMode.sticky) {
          clearTimeout(timeout);
          timeout = void 0;
          if (recentWheelEvents.length >= 15) {
            recentWheelEvents.shift();
          }
          const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : void 0;
          const firstEvent = recentWheelEvents[0];
          recentWheelEvents.push(newEvent);
          if (prevEvent && (newEvent.delta > prevEvent.delta || newEvent.direction !== prevEvent.direction)) {
            recentWheelEvents.splice(0);
          } else if (recentWheelEvents.length >= 15 && newEvent.time - firstEvent.time < 500 && firstEvent.delta - newEvent.delta >= 1 && newEvent.delta <= 6) {
            const snapToThreshold = delta > 0 ? 0.8 : 0.2;
            lastEventBeforeSnap = newEvent;
            recentWheelEvents.splice(0);
            timeout = nextTick(() => {
              if (swiper.destroyed || !swiper.params) return;
              swiper.slideToClosest(swiper.params.speed, true, void 0, snapToThreshold);
            }, 0);
          }
          if (!timeout) {
            timeout = nextTick(() => {
              if (swiper.destroyed || !swiper.params) return;
              const snapToThreshold = 0.5;
              lastEventBeforeSnap = newEvent;
              recentWheelEvents.splice(0);
              swiper.slideToClosest(swiper.params.speed, true, void 0, snapToThreshold);
            }, 500);
          }
        }
        if (!ignoreWheelEvents) emit("scroll", e2);
        if (swiper.params.autoplay && swiper.params.autoplay.disableOnInteraction) swiper.autoplay.stop();
        if (params.releaseOnEdges && (position === swiper.minTranslate() || position === swiper.maxTranslate())) {
          return true;
        }
      }
    }
    if (e2.preventDefault) e2.preventDefault();
    else e2.returnValue = false;
    return false;
  }
  function events(method) {
    let targetEl = swiper.el;
    if (swiper.params.mousewheel.eventsTarget !== "container") {
      targetEl = document.querySelector(swiper.params.mousewheel.eventsTarget);
    }
    targetEl[method]("mouseenter", handleMouseEnter);
    targetEl[method]("mouseleave", handleMouseLeave);
    targetEl[method]("wheel", handle);
  }
  function enable() {
    if (swiper.params.cssMode) {
      swiper.wrapperEl.removeEventListener("wheel", handle);
      return true;
    }
    if (swiper.mousewheel.enabled) return false;
    events("addEventListener");
    swiper.mousewheel.enabled = true;
    return true;
  }
  function disable() {
    if (swiper.params.cssMode) {
      swiper.wrapperEl.addEventListener(event, handle);
      return true;
    }
    if (!swiper.mousewheel.enabled) return false;
    events("removeEventListener");
    swiper.mousewheel.enabled = false;
    return true;
  }
  on("init", () => {
    if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {
      disable();
    }
    if (swiper.params.mousewheel.enabled) enable();
  });
  on("destroy", () => {
    if (swiper.params.cssMode) {
      enable();
    }
    if (swiper.mousewheel.enabled) disable();
  });
  Object.assign(swiper.mousewheel, {
    enable,
    disable
  });
}
function createElementIfNotDefined(swiper, originalParams, params, checkProps) {
  if (swiper.params.createElements) {
    Object.keys(checkProps).forEach((key) => {
      if (!params[key] && params.auto === true) {
        let element = elementChildren(swiper.el, `.${checkProps[key]}`)[0];
        if (!element) {
          element = createElement("div", checkProps[key]);
          element.className = checkProps[key];
          swiper.el.append(element);
        }
        params[key] = element;
        originalParams[key] = element;
      }
    });
  }
  return params;
}
function Navigation(_ref) {
  let {
    swiper,
    extendParams,
    on,
    emit
  } = _ref;
  extendParams({
    navigation: {
      nextEl: null,
      prevEl: null,
      hideOnClick: false,
      disabledClass: "swiper-button-disabled",
      hiddenClass: "swiper-button-hidden",
      lockClass: "swiper-button-lock",
      navigationDisabledClass: "swiper-navigation-disabled"
    }
  });
  swiper.navigation = {
    nextEl: null,
    prevEl: null
  };
  function getEl(el) {
    let res;
    if (el && typeof el === "string" && swiper.isElement) {
      res = swiper.el.querySelector(el) || swiper.hostEl.querySelector(el);
      if (res) return res;
    }
    if (el) {
      if (typeof el === "string") res = [...document.querySelectorAll(el)];
      if (swiper.params.uniqueNavElements && typeof el === "string" && res && res.length > 1 && swiper.el.querySelectorAll(el).length === 1) {
        res = swiper.el.querySelector(el);
      } else if (res && res.length === 1) {
        res = res[0];
      }
    }
    if (el && !res) return el;
    return res;
  }
  function toggleEl(el, disabled) {
    const params = swiper.params.navigation;
    el = makeElementsArray(el);
    el.forEach((subEl) => {
      if (subEl) {
        subEl.classList[disabled ? "add" : "remove"](...params.disabledClass.split(" "));
        if (subEl.tagName === "BUTTON") subEl.disabled = disabled;
        if (swiper.params.watchOverflow && swiper.enabled) {
          subEl.classList[swiper.isLocked ? "add" : "remove"](params.lockClass);
        }
      }
    });
  }
  function update() {
    const {
      nextEl,
      prevEl
    } = swiper.navigation;
    if (swiper.params.loop) {
      toggleEl(prevEl, false);
      toggleEl(nextEl, false);
      return;
    }
    toggleEl(prevEl, swiper.isBeginning && !swiper.params.rewind);
    toggleEl(nextEl, swiper.isEnd && !swiper.params.rewind);
  }
  function onPrevClick(e2) {
    e2.preventDefault();
    if (swiper.isBeginning && !swiper.params.loop && !swiper.params.rewind) return;
    swiper.slidePrev();
    emit("navigationPrev");
  }
  function onNextClick(e2) {
    e2.preventDefault();
    if (swiper.isEnd && !swiper.params.loop && !swiper.params.rewind) return;
    swiper.slideNext();
    emit("navigationNext");
  }
  function init() {
    const params = swiper.params.navigation;
    swiper.params.navigation = createElementIfNotDefined(swiper, swiper.originalParams.navigation, swiper.params.navigation, {
      nextEl: "swiper-button-next",
      prevEl: "swiper-button-prev"
    });
    if (!(params.nextEl || params.prevEl)) return;
    let nextEl = getEl(params.nextEl);
    let prevEl = getEl(params.prevEl);
    Object.assign(swiper.navigation, {
      nextEl,
      prevEl
    });
    nextEl = makeElementsArray(nextEl);
    prevEl = makeElementsArray(prevEl);
    const initButton = (el, dir) => {
      if (el) {
        el.addEventListener("click", dir === "next" ? onNextClick : onPrevClick);
      }
      if (!swiper.enabled && el) {
        el.classList.add(...params.lockClass.split(" "));
      }
    };
    nextEl.forEach((el) => initButton(el, "next"));
    prevEl.forEach((el) => initButton(el, "prev"));
  }
  function destroy() {
    let {
      nextEl,
      prevEl
    } = swiper.navigation;
    nextEl = makeElementsArray(nextEl);
    prevEl = makeElementsArray(prevEl);
    const destroyButton = (el, dir) => {
      el.removeEventListener("click", dir === "next" ? onNextClick : onPrevClick);
      el.classList.remove(...swiper.params.navigation.disabledClass.split(" "));
    };
    nextEl.forEach((el) => destroyButton(el, "next"));
    prevEl.forEach((el) => destroyButton(el, "prev"));
  }
  on("init", () => {
    if (swiper.params.navigation.enabled === false) {
      disable();
    } else {
      init();
      update();
    }
  });
  on("toEdge fromEdge lock unlock", () => {
    update();
  });
  on("destroy", () => {
    destroy();
  });
  on("enable disable", () => {
    let {
      nextEl,
      prevEl
    } = swiper.navigation;
    nextEl = makeElementsArray(nextEl);
    prevEl = makeElementsArray(prevEl);
    if (swiper.enabled) {
      update();
      return;
    }
    [...nextEl, ...prevEl].filter((el) => !!el).forEach((el) => el.classList.add(swiper.params.navigation.lockClass));
  });
  on("click", (_s, e2) => {
    let {
      nextEl,
      prevEl
    } = swiper.navigation;
    nextEl = makeElementsArray(nextEl);
    prevEl = makeElementsArray(prevEl);
    const targetEl = e2.target;
    let targetIsButton = prevEl.includes(targetEl) || nextEl.includes(targetEl);
    if (swiper.isElement && !targetIsButton) {
      const path = e2.path || e2.composedPath && e2.composedPath();
      if (path) {
        targetIsButton = path.find((pathEl) => nextEl.includes(pathEl) || prevEl.includes(pathEl));
      }
    }
    if (swiper.params.navigation.hideOnClick && !targetIsButton) {
      if (swiper.pagination && swiper.params.pagination && swiper.params.pagination.clickable && (swiper.pagination.el === targetEl || swiper.pagination.el.contains(targetEl))) return;
      let isHidden;
      if (nextEl.length) {
        isHidden = nextEl[0].classList.contains(swiper.params.navigation.hiddenClass);
      } else if (prevEl.length) {
        isHidden = prevEl[0].classList.contains(swiper.params.navigation.hiddenClass);
      }
      if (isHidden === true) {
        emit("navigationShow");
      } else {
        emit("navigationHide");
      }
      [...nextEl, ...prevEl].filter((el) => !!el).forEach((el) => el.classList.toggle(swiper.params.navigation.hiddenClass));
    }
  });
  const enable = () => {
    swiper.el.classList.remove(...swiper.params.navigation.navigationDisabledClass.split(" "));
    init();
    update();
  };
  const disable = () => {
    swiper.el.classList.add(...swiper.params.navigation.navigationDisabledClass.split(" "));
    destroy();
  };
  Object.assign(swiper.navigation, {
    enable,
    disable,
    update,
    init,
    destroy
  });
}
function classesToSelector(classes) {
  if (classes === void 0) {
    classes = "";
  }
  return `.${classes.trim().replace(/([\.:!+\/()[\]])/g, "\\$1").replace(/ /g, ".")}`;
}
function Pagination(_ref) {
  let {
    swiper,
    extendParams,
    on,
    emit
  } = _ref;
  const pfx = "swiper-pagination";
  extendParams({
    pagination: {
      el: null,
      bulletElement: "span",
      clickable: false,
      hideOnClick: false,
      renderBullet: null,
      renderProgressbar: null,
      renderFraction: null,
      renderCustom: null,
      progressbarOpposite: false,
      type: "bullets",
      // 'bullets' or 'progressbar' or 'fraction' or 'custom'
      dynamicBullets: false,
      dynamicMainBullets: 1,
      formatFractionCurrent: (number) => number,
      formatFractionTotal: (number) => number,
      bulletClass: `${pfx}-bullet`,
      bulletActiveClass: `${pfx}-bullet-active`,
      modifierClass: `${pfx}-`,
      currentClass: `${pfx}-current`,
      totalClass: `${pfx}-total`,
      hiddenClass: `${pfx}-hidden`,
      progressbarFillClass: `${pfx}-progressbar-fill`,
      progressbarOppositeClass: `${pfx}-progressbar-opposite`,
      clickableClass: `${pfx}-clickable`,
      lockClass: `${pfx}-lock`,
      horizontalClass: `${pfx}-horizontal`,
      verticalClass: `${pfx}-vertical`,
      paginationDisabledClass: `${pfx}-disabled`
    }
  });
  swiper.pagination = {
    el: null,
    bullets: []
  };
  let bulletSize;
  let dynamicBulletIndex = 0;
  function isPaginationDisabled() {
    return !swiper.params.pagination.el || !swiper.pagination.el || Array.isArray(swiper.pagination.el) && swiper.pagination.el.length === 0;
  }
  function setSideBullets(bulletEl, position) {
    const {
      bulletActiveClass
    } = swiper.params.pagination;
    if (!bulletEl) return;
    bulletEl = bulletEl[`${position === "prev" ? "previous" : "next"}ElementSibling`];
    if (bulletEl) {
      bulletEl.classList.add(`${bulletActiveClass}-${position}`);
      bulletEl = bulletEl[`${position === "prev" ? "previous" : "next"}ElementSibling`];
      if (bulletEl) {
        bulletEl.classList.add(`${bulletActiveClass}-${position}-${position}`);
      }
    }
  }
  function getMoveDirection(prevIndex, nextIndex, length) {
    prevIndex = prevIndex % length;
    nextIndex = nextIndex % length;
    if (nextIndex === prevIndex + 1) {
      return "next";
    } else if (nextIndex === prevIndex - 1) {
      return "previous";
    }
    return;
  }
  function onBulletClick(e2) {
    const bulletEl = e2.target.closest(classesToSelector(swiper.params.pagination.bulletClass));
    if (!bulletEl) {
      return;
    }
    e2.preventDefault();
    const index = elementIndex(bulletEl) * swiper.params.slidesPerGroup;
    if (swiper.params.loop) {
      if (swiper.realIndex === index) return;
      const moveDirection = getMoveDirection(swiper.realIndex, index, swiper.slides.length);
      if (moveDirection === "next") {
        swiper.slideNext();
      } else if (moveDirection === "previous") {
        swiper.slidePrev();
      } else {
        swiper.slideToLoop(index);
      }
    } else {
      swiper.slideTo(index);
    }
  }
  function update() {
    const rtl = swiper.rtl;
    const params = swiper.params.pagination;
    if (isPaginationDisabled()) return;
    let el = swiper.pagination.el;
    el = makeElementsArray(el);
    let current;
    let previousIndex;
    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
    const total = swiper.params.loop ? Math.ceil(slidesLength / swiper.params.slidesPerGroup) : swiper.snapGrid.length;
    if (swiper.params.loop) {
      previousIndex = swiper.previousRealIndex || 0;
      current = swiper.params.slidesPerGroup > 1 ? Math.floor(swiper.realIndex / swiper.params.slidesPerGroup) : swiper.realIndex;
    } else if (typeof swiper.snapIndex !== "undefined") {
      current = swiper.snapIndex;
      previousIndex = swiper.previousSnapIndex;
    } else {
      previousIndex = swiper.previousIndex || 0;
      current = swiper.activeIndex || 0;
    }
    if (params.type === "bullets" && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {
      const bullets = swiper.pagination.bullets;
      let firstIndex;
      let lastIndex;
      let midIndex;
      if (params.dynamicBullets) {
        bulletSize = elementOuterSize(bullets[0], swiper.isHorizontal() ? "width" : "height");
        el.forEach((subEl) => {
          subEl.style[swiper.isHorizontal() ? "width" : "height"] = `${bulletSize * (params.dynamicMainBullets + 4)}px`;
        });
        if (params.dynamicMainBullets > 1 && previousIndex !== void 0) {
          dynamicBulletIndex += current - (previousIndex || 0);
          if (dynamicBulletIndex > params.dynamicMainBullets - 1) {
            dynamicBulletIndex = params.dynamicMainBullets - 1;
          } else if (dynamicBulletIndex < 0) {
            dynamicBulletIndex = 0;
          }
        }
        firstIndex = Math.max(current - dynamicBulletIndex, 0);
        lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);
        midIndex = (lastIndex + firstIndex) / 2;
      }
      bullets.forEach((bulletEl) => {
        const classesToRemove = [...["", "-next", "-next-next", "-prev", "-prev-prev", "-main"].map((suffix) => `${params.bulletActiveClass}${suffix}`)].map((s2) => typeof s2 === "string" && s2.includes(" ") ? s2.split(" ") : s2).flat();
        bulletEl.classList.remove(...classesToRemove);
      });
      if (el.length > 1) {
        bullets.forEach((bullet) => {
          const bulletIndex = elementIndex(bullet);
          if (bulletIndex === current) {
            bullet.classList.add(...params.bulletActiveClass.split(" "));
          } else if (swiper.isElement) {
            bullet.setAttribute("part", "bullet");
          }
          if (params.dynamicBullets) {
            if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {
              bullet.classList.add(...`${params.bulletActiveClass}-main`.split(" "));
            }
            if (bulletIndex === firstIndex) {
              setSideBullets(bullet, "prev");
            }
            if (bulletIndex === lastIndex) {
              setSideBullets(bullet, "next");
            }
          }
        });
      } else {
        const bullet = bullets[current];
        if (bullet) {
          bullet.classList.add(...params.bulletActiveClass.split(" "));
        }
        if (swiper.isElement) {
          bullets.forEach((bulletEl, bulletIndex) => {
            bulletEl.setAttribute("part", bulletIndex === current ? "bullet-active" : "bullet");
          });
        }
        if (params.dynamicBullets) {
          const firstDisplayedBullet = bullets[firstIndex];
          const lastDisplayedBullet = bullets[lastIndex];
          for (let i2 = firstIndex; i2 <= lastIndex; i2 += 1) {
            if (bullets[i2]) {
              bullets[i2].classList.add(...`${params.bulletActiveClass}-main`.split(" "));
            }
          }
          setSideBullets(firstDisplayedBullet, "prev");
          setSideBullets(lastDisplayedBullet, "next");
        }
      }
      if (params.dynamicBullets) {
        const dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);
        const bulletsOffset = (bulletSize * dynamicBulletsLength - bulletSize) / 2 - midIndex * bulletSize;
        const offsetProp = rtl ? "right" : "left";
        bullets.forEach((bullet) => {
          bullet.style[swiper.isHorizontal() ? offsetProp : "top"] = `${bulletsOffset}px`;
        });
      }
    }
    el.forEach((subEl, subElIndex) => {
      if (params.type === "fraction") {
        subEl.querySelectorAll(classesToSelector(params.currentClass)).forEach((fractionEl) => {
          fractionEl.textContent = params.formatFractionCurrent(current + 1);
        });
        subEl.querySelectorAll(classesToSelector(params.totalClass)).forEach((totalEl) => {
          totalEl.textContent = params.formatFractionTotal(total);
        });
      }
      if (params.type === "progressbar") {
        let progressbarDirection;
        if (params.progressbarOpposite) {
          progressbarDirection = swiper.isHorizontal() ? "vertical" : "horizontal";
        } else {
          progressbarDirection = swiper.isHorizontal() ? "horizontal" : "vertical";
        }
        const scale = (current + 1) / total;
        let scaleX = 1;
        let scaleY = 1;
        if (progressbarDirection === "horizontal") {
          scaleX = scale;
        } else {
          scaleY = scale;
        }
        subEl.querySelectorAll(classesToSelector(params.progressbarFillClass)).forEach((progressEl) => {
          progressEl.style.transform = `translate3d(0,0,0) scaleX(${scaleX}) scaleY(${scaleY})`;
          progressEl.style.transitionDuration = `${swiper.params.speed}ms`;
        });
      }
      if (params.type === "custom" && params.renderCustom) {
        setInnerHTML(subEl, params.renderCustom(swiper, current + 1, total));
        if (subElIndex === 0) emit("paginationRender", subEl);
      } else {
        if (subElIndex === 0) emit("paginationRender", subEl);
        emit("paginationUpdate", subEl);
      }
      if (swiper.params.watchOverflow && swiper.enabled) {
        subEl.classList[swiper.isLocked ? "add" : "remove"](params.lockClass);
      }
    });
  }
  function render() {
    const params = swiper.params.pagination;
    if (isPaginationDisabled()) return;
    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.grid && swiper.params.grid.rows > 1 ? swiper.slides.length / Math.ceil(swiper.params.grid.rows) : swiper.slides.length;
    let el = swiper.pagination.el;
    el = makeElementsArray(el);
    let paginationHTML = "";
    if (params.type === "bullets") {
      let numberOfBullets = swiper.params.loop ? Math.ceil(slidesLength / swiper.params.slidesPerGroup) : swiper.snapGrid.length;
      if (swiper.params.freeMode && swiper.params.freeMode.enabled && numberOfBullets > slidesLength) {
        numberOfBullets = slidesLength;
      }
      for (let i2 = 0; i2 < numberOfBullets; i2 += 1) {
        if (params.renderBullet) {
          paginationHTML += params.renderBullet.call(swiper, i2, params.bulletClass);
        } else {
          paginationHTML += `<${params.bulletElement} ${swiper.isElement ? 'part="bullet"' : ""} class="${params.bulletClass}"></${params.bulletElement}>`;
        }
      }
    }
    if (params.type === "fraction") {
      if (params.renderFraction) {
        paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);
      } else {
        paginationHTML = `<span class="${params.currentClass}"></span> / <span class="${params.totalClass}"></span>`;
      }
    }
    if (params.type === "progressbar") {
      if (params.renderProgressbar) {
        paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);
      } else {
        paginationHTML = `<span class="${params.progressbarFillClass}"></span>`;
      }
    }
    swiper.pagination.bullets = [];
    el.forEach((subEl) => {
      if (params.type !== "custom") {
        setInnerHTML(subEl, paginationHTML || "");
      }
      if (params.type === "bullets") {
        swiper.pagination.bullets.push(...subEl.querySelectorAll(classesToSelector(params.bulletClass)));
      }
    });
    if (params.type !== "custom") {
      emit("paginationRender", el[0]);
    }
  }
  function init() {
    swiper.params.pagination = createElementIfNotDefined(swiper, swiper.originalParams.pagination, swiper.params.pagination, {
      el: "swiper-pagination"
    });
    const params = swiper.params.pagination;
    if (!params.el) return;
    let el;
    if (typeof params.el === "string" && swiper.isElement) {
      el = swiper.el.querySelector(params.el);
    }
    if (!el && typeof params.el === "string") {
      el = [...document.querySelectorAll(params.el)];
    }
    if (!el) {
      el = params.el;
    }
    if (!el || el.length === 0) return;
    if (swiper.params.uniqueNavElements && typeof params.el === "string" && Array.isArray(el) && el.length > 1) {
      el = [...swiper.el.querySelectorAll(params.el)];
      if (el.length > 1) {
        el = el.find((subEl) => {
          if (elementParents(subEl, ".swiper")[0] !== swiper.el) return false;
          return true;
        });
      }
    }
    if (Array.isArray(el) && el.length === 1) el = el[0];
    Object.assign(swiper.pagination, {
      el
    });
    el = makeElementsArray(el);
    el.forEach((subEl) => {
      if (params.type === "bullets" && params.clickable) {
        subEl.classList.add(...(params.clickableClass || "").split(" "));
      }
      subEl.classList.add(params.modifierClass + params.type);
      subEl.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);
      if (params.type === "bullets" && params.dynamicBullets) {
        subEl.classList.add(`${params.modifierClass}${params.type}-dynamic`);
        dynamicBulletIndex = 0;
        if (params.dynamicMainBullets < 1) {
          params.dynamicMainBullets = 1;
        }
      }
      if (params.type === "progressbar" && params.progressbarOpposite) {
        subEl.classList.add(params.progressbarOppositeClass);
      }
      if (params.clickable) {
        subEl.addEventListener("click", onBulletClick);
      }
      if (!swiper.enabled) {
        subEl.classList.add(params.lockClass);
      }
    });
  }
  function destroy() {
    const params = swiper.params.pagination;
    if (isPaginationDisabled()) return;
    let el = swiper.pagination.el;
    if (el) {
      el = makeElementsArray(el);
      el.forEach((subEl) => {
        subEl.classList.remove(params.hiddenClass);
        subEl.classList.remove(params.modifierClass + params.type);
        subEl.classList.remove(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);
        if (params.clickable) {
          subEl.classList.remove(...(params.clickableClass || "").split(" "));
          subEl.removeEventListener("click", onBulletClick);
        }
      });
    }
    if (swiper.pagination.bullets) swiper.pagination.bullets.forEach((subEl) => subEl.classList.remove(...params.bulletActiveClass.split(" ")));
  }
  on("changeDirection", () => {
    if (!swiper.pagination || !swiper.pagination.el) return;
    const params = swiper.params.pagination;
    let {
      el
    } = swiper.pagination;
    el = makeElementsArray(el);
    el.forEach((subEl) => {
      subEl.classList.remove(params.horizontalClass, params.verticalClass);
      subEl.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);
    });
  });
  on("init", () => {
    if (swiper.params.pagination.enabled === false) {
      disable();
    } else {
      init();
      render();
      update();
    }
  });
  on("activeIndexChange", () => {
    if (typeof swiper.snapIndex === "undefined") {
      update();
    }
  });
  on("snapIndexChange", () => {
    update();
  });
  on("snapGridLengthChange", () => {
    render();
    update();
  });
  on("destroy", () => {
    destroy();
  });
  on("enable disable", () => {
    let {
      el
    } = swiper.pagination;
    if (el) {
      el = makeElementsArray(el);
      el.forEach((subEl) => subEl.classList[swiper.enabled ? "remove" : "add"](swiper.params.pagination.lockClass));
    }
  });
  on("lock unlock", () => {
    update();
  });
  on("click", (_s, e2) => {
    const targetEl = e2.target;
    const el = makeElementsArray(swiper.pagination.el);
    if (swiper.params.pagination.el && swiper.params.pagination.hideOnClick && el && el.length > 0 && !targetEl.classList.contains(swiper.params.pagination.bulletClass)) {
      if (swiper.navigation && (swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl || swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl)) return;
      const isHidden = el[0].classList.contains(swiper.params.pagination.hiddenClass);
      if (isHidden === true) {
        emit("paginationShow");
      } else {
        emit("paginationHide");
      }
      el.forEach((subEl) => subEl.classList.toggle(swiper.params.pagination.hiddenClass));
    }
  });
  const enable = () => {
    swiper.el.classList.remove(swiper.params.pagination.paginationDisabledClass);
    let {
      el
    } = swiper.pagination;
    if (el) {
      el = makeElementsArray(el);
      el.forEach((subEl) => subEl.classList.remove(swiper.params.pagination.paginationDisabledClass));
    }
    init();
    render();
    update();
  };
  const disable = () => {
    swiper.el.classList.add(swiper.params.pagination.paginationDisabledClass);
    let {
      el
    } = swiper.pagination;
    if (el) {
      el = makeElementsArray(el);
      el.forEach((subEl) => subEl.classList.add(swiper.params.pagination.paginationDisabledClass));
    }
    destroy();
  };
  Object.assign(swiper.pagination, {
    enable,
    disable,
    render,
    update,
    init,
    destroy
  });
}
function Scrollbar(_ref) {
  let {
    swiper,
    extendParams,
    on,
    emit
  } = _ref;
  const document2 = getDocument();
  let isTouched = false;
  let timeout = null;
  let dragTimeout = null;
  let dragStartPos;
  let dragSize;
  let trackSize;
  let divider;
  extendParams({
    scrollbar: {
      el: null,
      dragSize: "auto",
      hide: false,
      draggable: false,
      snapOnRelease: true,
      lockClass: "swiper-scrollbar-lock",
      dragClass: "swiper-scrollbar-drag",
      scrollbarDisabledClass: "swiper-scrollbar-disabled",
      horizontalClass: `swiper-scrollbar-horizontal`,
      verticalClass: `swiper-scrollbar-vertical`
    }
  });
  swiper.scrollbar = {
    el: null,
    dragEl: null
  };
  function setTranslate() {
    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
    const {
      scrollbar,
      rtlTranslate: rtl
    } = swiper;
    const {
      dragEl,
      el
    } = scrollbar;
    const params = swiper.params.scrollbar;
    const progress = swiper.params.loop ? swiper.progressLoop : swiper.progress;
    let newSize = dragSize;
    let newPos = (trackSize - dragSize) * progress;
    if (rtl) {
      newPos = -newPos;
      if (newPos > 0) {
        newSize = dragSize - newPos;
        newPos = 0;
      } else if (-newPos + dragSize > trackSize) {
        newSize = trackSize + newPos;
      }
    } else if (newPos < 0) {
      newSize = dragSize + newPos;
      newPos = 0;
    } else if (newPos + dragSize > trackSize) {
      newSize = trackSize - newPos;
    }
    if (swiper.isHorizontal()) {
      dragEl.style.transform = `translate3d(${newPos}px, 0, 0)`;
      dragEl.style.width = `${newSize}px`;
    } else {
      dragEl.style.transform = `translate3d(0px, ${newPos}px, 0)`;
      dragEl.style.height = `${newSize}px`;
    }
    if (params.hide) {
      clearTimeout(timeout);
      el.style.opacity = 1;
      timeout = setTimeout(() => {
        el.style.opacity = 0;
        el.style.transitionDuration = "400ms";
      }, 1e3);
    }
  }
  function setTransition(duration) {
    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
    swiper.scrollbar.dragEl.style.transitionDuration = `${duration}ms`;
  }
  function updateSize() {
    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
    const {
      scrollbar
    } = swiper;
    const {
      dragEl,
      el
    } = scrollbar;
    dragEl.style.width = "";
    dragEl.style.height = "";
    trackSize = swiper.isHorizontal() ? el.offsetWidth : el.offsetHeight;
    divider = swiper.size / (swiper.virtualSize + swiper.params.slidesOffsetBefore - (swiper.params.centeredSlides ? swiper.snapGrid[0] : 0));
    if (swiper.params.scrollbar.dragSize === "auto") {
      dragSize = trackSize * divider;
    } else {
      dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);
    }
    if (swiper.isHorizontal()) {
      dragEl.style.width = `${dragSize}px`;
    } else {
      dragEl.style.height = `${dragSize}px`;
    }
    if (divider >= 1) {
      el.style.display = "none";
    } else {
      el.style.display = "";
    }
    if (swiper.params.scrollbar.hide) {
      el.style.opacity = 0;
    }
    if (swiper.params.watchOverflow && swiper.enabled) {
      scrollbar.el.classList[swiper.isLocked ? "add" : "remove"](swiper.params.scrollbar.lockClass);
    }
  }
  function getPointerPosition(e2) {
    return swiper.isHorizontal() ? e2.clientX : e2.clientY;
  }
  function setDragPosition(e2) {
    const {
      scrollbar,
      rtlTranslate: rtl
    } = swiper;
    const {
      el
    } = scrollbar;
    let positionRatio;
    positionRatio = (getPointerPosition(e2) - elementOffset(el)[swiper.isHorizontal() ? "left" : "top"] - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);
    positionRatio = Math.max(Math.min(positionRatio, 1), 0);
    if (rtl) {
      positionRatio = 1 - positionRatio;
    }
    const position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;
    swiper.updateProgress(position);
    swiper.setTranslate(position);
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();
  }
  function onDragStart(e2) {
    const params = swiper.params.scrollbar;
    const {
      scrollbar,
      wrapperEl
    } = swiper;
    const {
      el,
      dragEl
    } = scrollbar;
    isTouched = true;
    dragStartPos = e2.target === dragEl ? getPointerPosition(e2) - e2.target.getBoundingClientRect()[swiper.isHorizontal() ? "left" : "top"] : null;
    e2.preventDefault();
    e2.stopPropagation();
    wrapperEl.style.transitionDuration = "100ms";
    dragEl.style.transitionDuration = "100ms";
    setDragPosition(e2);
    clearTimeout(dragTimeout);
    el.style.transitionDuration = "0ms";
    if (params.hide) {
      el.style.opacity = 1;
    }
    if (swiper.params.cssMode) {
      swiper.wrapperEl.style["scroll-snap-type"] = "none";
    }
    emit("scrollbarDragStart", e2);
  }
  function onDragMove(e2) {
    const {
      scrollbar,
      wrapperEl
    } = swiper;
    const {
      el,
      dragEl
    } = scrollbar;
    if (!isTouched) return;
    if (e2.preventDefault && e2.cancelable) e2.preventDefault();
    else e2.returnValue = false;
    setDragPosition(e2);
    wrapperEl.style.transitionDuration = "0ms";
    el.style.transitionDuration = "0ms";
    dragEl.style.transitionDuration = "0ms";
    emit("scrollbarDragMove", e2);
  }
  function onDragEnd(e2) {
    const params = swiper.params.scrollbar;
    const {
      scrollbar,
      wrapperEl
    } = swiper;
    const {
      el
    } = scrollbar;
    if (!isTouched) return;
    isTouched = false;
    if (swiper.params.cssMode) {
      swiper.wrapperEl.style["scroll-snap-type"] = "";
      wrapperEl.style.transitionDuration = "";
    }
    if (params.hide) {
      clearTimeout(dragTimeout);
      dragTimeout = nextTick(() => {
        el.style.opacity = 0;
        el.style.transitionDuration = "400ms";
      }, 1e3);
    }
    emit("scrollbarDragEnd", e2);
    if (params.snapOnRelease) {
      swiper.slideToClosest();
    }
  }
  function events(method) {
    const {
      scrollbar,
      params
    } = swiper;
    const el = scrollbar.el;
    if (!el) return;
    const target = el;
    const activeListener = params.passiveListeners ? {
      passive: false,
      capture: false
    } : false;
    const passiveListener = params.passiveListeners ? {
      passive: true,
      capture: false
    } : false;
    if (!target) return;
    const eventMethod = method === "on" ? "addEventListener" : "removeEventListener";
    target[eventMethod]("pointerdown", onDragStart, activeListener);
    document2[eventMethod]("pointermove", onDragMove, activeListener);
    document2[eventMethod]("pointerup", onDragEnd, passiveListener);
  }
  function enableDraggable() {
    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
    events("on");
  }
  function disableDraggable() {
    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;
    events("off");
  }
  function init() {
    const {
      scrollbar,
      el: swiperEl
    } = swiper;
    swiper.params.scrollbar = createElementIfNotDefined(swiper, swiper.originalParams.scrollbar, swiper.params.scrollbar, {
      el: "swiper-scrollbar"
    });
    const params = swiper.params.scrollbar;
    if (!params.el) return;
    let el;
    if (typeof params.el === "string" && swiper.isElement) {
      el = swiper.el.querySelector(params.el);
    }
    if (!el && typeof params.el === "string") {
      el = document2.querySelectorAll(params.el);
      if (!el.length) return;
    } else if (!el) {
      el = params.el;
    }
    if (swiper.params.uniqueNavElements && typeof params.el === "string" && el.length > 1 && swiperEl.querySelectorAll(params.el).length === 1) {
      el = swiperEl.querySelector(params.el);
    }
    if (el.length > 0) el = el[0];
    el.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);
    let dragEl;
    if (el) {
      dragEl = el.querySelector(classesToSelector(swiper.params.scrollbar.dragClass));
      if (!dragEl) {
        dragEl = createElement("div", swiper.params.scrollbar.dragClass);
        el.append(dragEl);
      }
    }
    Object.assign(scrollbar, {
      el,
      dragEl
    });
    if (params.draggable) {
      enableDraggable();
    }
    if (el) {
      el.classList[swiper.enabled ? "remove" : "add"](...classesToTokens(swiper.params.scrollbar.lockClass));
    }
  }
  function destroy() {
    const params = swiper.params.scrollbar;
    const el = swiper.scrollbar.el;
    if (el) {
      el.classList.remove(...classesToTokens(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass));
    }
    disableDraggable();
  }
  on("changeDirection", () => {
    if (!swiper.scrollbar || !swiper.scrollbar.el) return;
    const params = swiper.params.scrollbar;
    let {
      el
    } = swiper.scrollbar;
    el = makeElementsArray(el);
    el.forEach((subEl) => {
      subEl.classList.remove(params.horizontalClass, params.verticalClass);
      subEl.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);
    });
  });
  on("init", () => {
    if (swiper.params.scrollbar.enabled === false) {
      disable();
    } else {
      init();
      updateSize();
      setTranslate();
    }
  });
  on("update resize observerUpdate lock unlock changeDirection", () => {
    updateSize();
  });
  on("setTranslate", () => {
    setTranslate();
  });
  on("setTransition", (_s, duration) => {
    setTransition(duration);
  });
  on("enable disable", () => {
    const {
      el
    } = swiper.scrollbar;
    if (el) {
      el.classList[swiper.enabled ? "remove" : "add"](...classesToTokens(swiper.params.scrollbar.lockClass));
    }
  });
  on("destroy", () => {
    destroy();
  });
  const enable = () => {
    swiper.el.classList.remove(...classesToTokens(swiper.params.scrollbar.scrollbarDisabledClass));
    if (swiper.scrollbar.el) {
      swiper.scrollbar.el.classList.remove(...classesToTokens(swiper.params.scrollbar.scrollbarDisabledClass));
    }
    init();
    updateSize();
    setTranslate();
  };
  const disable = () => {
    swiper.el.classList.add(...classesToTokens(swiper.params.scrollbar.scrollbarDisabledClass));
    if (swiper.scrollbar.el) {
      swiper.scrollbar.el.classList.add(...classesToTokens(swiper.params.scrollbar.scrollbarDisabledClass));
    }
    destroy();
  };
  Object.assign(swiper.scrollbar, {
    enable,
    disable,
    updateSize,
    setTranslate,
    init,
    destroy
  });
}
function Parallax(_ref) {
  let {
    swiper,
    extendParams,
    on
  } = _ref;
  extendParams({
    parallax: {
      enabled: false
    }
  });
  const elementsSelector = "[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]";
  const setTransform = (el, progress) => {
    const {
      rtl
    } = swiper;
    const rtlFactor = rtl ? -1 : 1;
    const p2 = el.getAttribute("data-swiper-parallax") || "0";
    let x2 = el.getAttribute("data-swiper-parallax-x");
    let y2 = el.getAttribute("data-swiper-parallax-y");
    const scale = el.getAttribute("data-swiper-parallax-scale");
    const opacity = el.getAttribute("data-swiper-parallax-opacity");
    const rotate = el.getAttribute("data-swiper-parallax-rotate");
    if (x2 || y2) {
      x2 = x2 || "0";
      y2 = y2 || "0";
    } else if (swiper.isHorizontal()) {
      x2 = p2;
      y2 = "0";
    } else {
      y2 = p2;
      x2 = "0";
    }
    if (x2.indexOf("%") >= 0) {
      x2 = `${parseInt(x2, 10) * progress * rtlFactor}%`;
    } else {
      x2 = `${x2 * progress * rtlFactor}px`;
    }
    if (y2.indexOf("%") >= 0) {
      y2 = `${parseInt(y2, 10) * progress}%`;
    } else {
      y2 = `${y2 * progress}px`;
    }
    if (typeof opacity !== "undefined" && opacity !== null) {
      const currentOpacity = opacity - (opacity - 1) * (1 - Math.abs(progress));
      el.style.opacity = currentOpacity;
    }
    let transform = `translate3d(${x2}, ${y2}, 0px)`;
    if (typeof scale !== "undefined" && scale !== null) {
      const currentScale = scale - (scale - 1) * (1 - Math.abs(progress));
      transform += ` scale(${currentScale})`;
    }
    if (rotate && typeof rotate !== "undefined" && rotate !== null) {
      const currentRotate = rotate * progress * -1;
      transform += ` rotate(${currentRotate}deg)`;
    }
    el.style.transform = transform;
  };
  const setTranslate = () => {
    const {
      el,
      slides,
      progress,
      snapGrid,
      isElement
    } = swiper;
    const elements = elementChildren(el, elementsSelector);
    if (swiper.isElement) {
      elements.push(...elementChildren(swiper.hostEl, elementsSelector));
    }
    elements.forEach((subEl) => {
      setTransform(subEl, progress);
    });
    slides.forEach((slideEl, slideIndex) => {
      let slideProgress = slideEl.progress;
      if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== "auto") {
        slideProgress += Math.ceil(slideIndex / 2) - progress * (snapGrid.length - 1);
      }
      slideProgress = Math.min(Math.max(slideProgress, -1), 1);
      slideEl.querySelectorAll(`${elementsSelector}, [data-swiper-parallax-rotate]`).forEach((subEl) => {
        setTransform(subEl, slideProgress);
      });
    });
  };
  const setTransition = function(duration) {
    if (duration === void 0) {
      duration = swiper.params.speed;
    }
    const {
      el,
      hostEl
    } = swiper;
    const elements = [...el.querySelectorAll(elementsSelector)];
    if (swiper.isElement) {
      elements.push(...hostEl.querySelectorAll(elementsSelector));
    }
    elements.forEach((parallaxEl) => {
      let parallaxDuration = parseInt(parallaxEl.getAttribute("data-swiper-parallax-duration"), 10) || duration;
      if (duration === 0) parallaxDuration = 0;
      parallaxEl.style.transitionDuration = `${parallaxDuration}ms`;
    });
  };
  on("beforeInit", () => {
    if (!swiper.params.parallax.enabled) return;
    swiper.params.watchSlidesProgress = true;
    swiper.originalParams.watchSlidesProgress = true;
  });
  on("init", () => {
    if (!swiper.params.parallax.enabled) return;
    setTranslate();
  });
  on("setTranslate", () => {
    if (!swiper.params.parallax.enabled) return;
    setTranslate();
  });
  on("setTransition", (_swiper, duration) => {
    if (!swiper.params.parallax.enabled) return;
    setTransition(duration);
  });
}
function Zoom(_ref) {
  let {
    swiper,
    extendParams,
    on,
    emit
  } = _ref;
  const window2 = getWindow();
  extendParams({
    zoom: {
      enabled: false,
      limitToOriginalSize: false,
      maxRatio: 3,
      minRatio: 1,
      panOnMouseMove: false,
      toggle: true,
      containerClass: "swiper-zoom-container",
      zoomedSlideClass: "swiper-slide-zoomed"
    }
  });
  swiper.zoom = {
    enabled: false
  };
  let currentScale = 1;
  let isScaling = false;
  let isPanningWithMouse = false;
  let mousePanStart = {
    x: 0,
    y: 0
  };
  const mousePanSensitivity = -3;
  let fakeGestureTouched;
  let fakeGestureMoved;
  const evCache = [];
  const gesture = {
    originX: 0,
    originY: 0,
    slideEl: void 0,
    slideWidth: void 0,
    slideHeight: void 0,
    imageEl: void 0,
    imageWrapEl: void 0,
    maxRatio: 3
  };
  const image = {
    isTouched: void 0,
    isMoved: void 0,
    currentX: void 0,
    currentY: void 0,
    minX: void 0,
    minY: void 0,
    maxX: void 0,
    maxY: void 0,
    width: void 0,
    height: void 0,
    startX: void 0,
    startY: void 0,
    touchesStart: {},
    touchesCurrent: {}
  };
  const velocity = {
    x: void 0,
    y: void 0,
    prevPositionX: void 0,
    prevPositionY: void 0,
    prevTime: void 0
  };
  let scale = 1;
  Object.defineProperty(swiper.zoom, "scale", {
    get() {
      return scale;
    },
    set(value) {
      if (scale !== value) {
        const imageEl = gesture.imageEl;
        const slideEl = gesture.slideEl;
        emit("zoomChange", value, imageEl, slideEl);
      }
      scale = value;
    }
  });
  function getDistanceBetweenTouches() {
    if (evCache.length < 2) return 1;
    const x1 = evCache[0].pageX;
    const y1 = evCache[0].pageY;
    const x2 = evCache[1].pageX;
    const y2 = evCache[1].pageY;
    const distance = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);
    return distance;
  }
  function getMaxRatio() {
    const params = swiper.params.zoom;
    const maxRatio = gesture.imageWrapEl.getAttribute("data-swiper-zoom") || params.maxRatio;
    if (params.limitToOriginalSize && gesture.imageEl && gesture.imageEl.naturalWidth) {
      const imageMaxRatio = gesture.imageEl.naturalWidth / gesture.imageEl.offsetWidth;
      return Math.min(imageMaxRatio, maxRatio);
    }
    return maxRatio;
  }
  function getScaleOrigin() {
    if (evCache.length < 2) return {
      x: null,
      y: null
    };
    const box = gesture.imageEl.getBoundingClientRect();
    return [(evCache[0].pageX + (evCache[1].pageX - evCache[0].pageX) / 2 - box.x - window2.scrollX) / currentScale, (evCache[0].pageY + (evCache[1].pageY - evCache[0].pageY) / 2 - box.y - window2.scrollY) / currentScale];
  }
  function getSlideSelector() {
    return swiper.isElement ? `swiper-slide` : `.${swiper.params.slideClass}`;
  }
  function eventWithinSlide(e2) {
    const slideSelector = getSlideSelector();
    if (e2.target.matches(slideSelector)) return true;
    if (swiper.slides.filter((slideEl) => slideEl.contains(e2.target)).length > 0) return true;
    return false;
  }
  function eventWithinZoomContainer(e2) {
    const selector = `.${swiper.params.zoom.containerClass}`;
    if (e2.target.matches(selector)) return true;
    if ([...swiper.hostEl.querySelectorAll(selector)].filter((containerEl) => containerEl.contains(e2.target)).length > 0) return true;
    return false;
  }
  function onGestureStart(e2) {
    if (e2.pointerType === "mouse") {
      evCache.splice(0, evCache.length);
    }
    if (!eventWithinSlide(e2)) return;
    const params = swiper.params.zoom;
    fakeGestureTouched = false;
    fakeGestureMoved = false;
    evCache.push(e2);
    if (evCache.length < 2) {
      return;
    }
    fakeGestureTouched = true;
    gesture.scaleStart = getDistanceBetweenTouches();
    if (!gesture.slideEl) {
      gesture.slideEl = e2.target.closest(`.${swiper.params.slideClass}, swiper-slide`);
      if (!gesture.slideEl) gesture.slideEl = swiper.slides[swiper.activeIndex];
      let imageEl = gesture.slideEl.querySelector(`.${params.containerClass}`);
      if (imageEl) {
        imageEl = imageEl.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0];
      }
      gesture.imageEl = imageEl;
      if (imageEl) {
        gesture.imageWrapEl = elementParents(gesture.imageEl, `.${params.containerClass}`)[0];
      } else {
        gesture.imageWrapEl = void 0;
      }
      if (!gesture.imageWrapEl) {
        gesture.imageEl = void 0;
        return;
      }
      gesture.maxRatio = getMaxRatio();
    }
    if (gesture.imageEl) {
      const [originX, originY] = getScaleOrigin();
      gesture.originX = originX;
      gesture.originY = originY;
      gesture.imageEl.style.transitionDuration = "0ms";
    }
    isScaling = true;
  }
  function onGestureChange(e2) {
    if (!eventWithinSlide(e2)) return;
    const params = swiper.params.zoom;
    const zoom = swiper.zoom;
    const pointerIndex = evCache.findIndex((cachedEv) => cachedEv.pointerId === e2.pointerId);
    if (pointerIndex >= 0) evCache[pointerIndex] = e2;
    if (evCache.length < 2) {
      return;
    }
    fakeGestureMoved = true;
    gesture.scaleMove = getDistanceBetweenTouches();
    if (!gesture.imageEl) {
      return;
    }
    zoom.scale = gesture.scaleMove / gesture.scaleStart * currentScale;
    if (zoom.scale > gesture.maxRatio) {
      zoom.scale = gesture.maxRatio - 1 + (zoom.scale - gesture.maxRatio + 1) ** 0.5;
    }
    if (zoom.scale < params.minRatio) {
      zoom.scale = params.minRatio + 1 - (params.minRatio - zoom.scale + 1) ** 0.5;
    }
    gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;
  }
  function onGestureEnd(e2) {
    if (!eventWithinSlide(e2)) return;
    if (e2.pointerType === "mouse" && e2.type === "pointerout") return;
    const params = swiper.params.zoom;
    const zoom = swiper.zoom;
    const pointerIndex = evCache.findIndex((cachedEv) => cachedEv.pointerId === e2.pointerId);
    if (pointerIndex >= 0) evCache.splice(pointerIndex, 1);
    if (!fakeGestureTouched || !fakeGestureMoved) {
      return;
    }
    fakeGestureTouched = false;
    fakeGestureMoved = false;
    if (!gesture.imageEl) return;
    zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);
    gesture.imageEl.style.transitionDuration = `${swiper.params.speed}ms`;
    gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;
    currentScale = zoom.scale;
    isScaling = false;
    if (zoom.scale > 1 && gesture.slideEl) {
      gesture.slideEl.classList.add(`${params.zoomedSlideClass}`);
    } else if (zoom.scale <= 1 && gesture.slideEl) {
      gesture.slideEl.classList.remove(`${params.zoomedSlideClass}`);
    }
    if (zoom.scale === 1) {
      gesture.originX = 0;
      gesture.originY = 0;
      gesture.slideEl = void 0;
    }
  }
  let allowTouchMoveTimeout;
  function allowTouchMove() {
    swiper.touchEventsData.preventTouchMoveFromPointerMove = false;
  }
  function preventTouchMove() {
    clearTimeout(allowTouchMoveTimeout);
    swiper.touchEventsData.preventTouchMoveFromPointerMove = true;
    allowTouchMoveTimeout = setTimeout(() => {
      if (swiper.destroyed) return;
      allowTouchMove();
    });
  }
  function onTouchStart(e2) {
    const device = swiper.device;
    if (!gesture.imageEl) return;
    if (image.isTouched) return;
    if (device.android && e2.cancelable) e2.preventDefault();
    image.isTouched = true;
    const event2 = evCache.length > 0 ? evCache[0] : e2;
    image.touchesStart.x = event2.pageX;
    image.touchesStart.y = event2.pageY;
  }
  function onTouchMove(e2) {
    const isMouseEvent = e2.pointerType === "mouse";
    const isMousePan = isMouseEvent && swiper.params.zoom.panOnMouseMove;
    if (!eventWithinSlide(e2) || !eventWithinZoomContainer(e2)) {
      return;
    }
    const zoom = swiper.zoom;
    if (!gesture.imageEl) {
      return;
    }
    if (!image.isTouched || !gesture.slideEl) {
      if (isMousePan) onMouseMove(e2);
      return;
    }
    if (isMousePan) {
      onMouseMove(e2);
      return;
    }
    if (!image.isMoved) {
      image.width = gesture.imageEl.offsetWidth || gesture.imageEl.clientWidth;
      image.height = gesture.imageEl.offsetHeight || gesture.imageEl.clientHeight;
      image.startX = getTranslate(gesture.imageWrapEl, "x") || 0;
      image.startY = getTranslate(gesture.imageWrapEl, "y") || 0;
      gesture.slideWidth = gesture.slideEl.offsetWidth;
      gesture.slideHeight = gesture.slideEl.offsetHeight;
      gesture.imageWrapEl.style.transitionDuration = "0ms";
    }
    const scaledWidth = image.width * zoom.scale;
    const scaledHeight = image.height * zoom.scale;
    image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);
    image.maxX = -image.minX;
    image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);
    image.maxY = -image.minY;
    image.touchesCurrent.x = evCache.length > 0 ? evCache[0].pageX : e2.pageX;
    image.touchesCurrent.y = evCache.length > 0 ? evCache[0].pageY : e2.pageY;
    const touchesDiff = Math.max(Math.abs(image.touchesCurrent.x - image.touchesStart.x), Math.abs(image.touchesCurrent.y - image.touchesStart.y));
    if (touchesDiff > 5) {
      swiper.allowClick = false;
    }
    if (!image.isMoved && !isScaling) {
      if (swiper.isHorizontal() && (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x || Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)) {
        image.isTouched = false;
        allowTouchMove();
        return;
      }
      if (!swiper.isHorizontal() && (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y || Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)) {
        image.isTouched = false;
        allowTouchMove();
        return;
      }
    }
    if (e2.cancelable) {
      e2.preventDefault();
    }
    e2.stopPropagation();
    preventTouchMove();
    image.isMoved = true;
    const scaleRatio = (zoom.scale - currentScale) / (gesture.maxRatio - swiper.params.zoom.minRatio);
    const {
      originX,
      originY
    } = gesture;
    image.currentX = image.touchesCurrent.x - image.touchesStart.x + image.startX + scaleRatio * (image.width - originX * 2);
    image.currentY = image.touchesCurrent.y - image.touchesStart.y + image.startY + scaleRatio * (image.height - originY * 2);
    if (image.currentX < image.minX) {
      image.currentX = image.minX + 1 - (image.minX - image.currentX + 1) ** 0.8;
    }
    if (image.currentX > image.maxX) {
      image.currentX = image.maxX - 1 + (image.currentX - image.maxX + 1) ** 0.8;
    }
    if (image.currentY < image.minY) {
      image.currentY = image.minY + 1 - (image.minY - image.currentY + 1) ** 0.8;
    }
    if (image.currentY > image.maxY) {
      image.currentY = image.maxY - 1 + (image.currentY - image.maxY + 1) ** 0.8;
    }
    if (!velocity.prevPositionX) velocity.prevPositionX = image.touchesCurrent.x;
    if (!velocity.prevPositionY) velocity.prevPositionY = image.touchesCurrent.y;
    if (!velocity.prevTime) velocity.prevTime = Date.now();
    velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;
    velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;
    if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) velocity.x = 0;
    if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) velocity.y = 0;
    velocity.prevPositionX = image.touchesCurrent.x;
    velocity.prevPositionY = image.touchesCurrent.y;
    velocity.prevTime = Date.now();
    gesture.imageWrapEl.style.transform = `translate3d(${image.currentX}px, ${image.currentY}px,0)`;
  }
  function onTouchEnd() {
    const zoom = swiper.zoom;
    evCache.length = 0;
    if (!gesture.imageEl) return;
    if (!image.isTouched || !image.isMoved) {
      image.isTouched = false;
      image.isMoved = false;
      return;
    }
    image.isTouched = false;
    image.isMoved = false;
    let momentumDurationX = 300;
    let momentumDurationY = 300;
    const momentumDistanceX = velocity.x * momentumDurationX;
    const newPositionX = image.currentX + momentumDistanceX;
    const momentumDistanceY = velocity.y * momentumDurationY;
    const newPositionY = image.currentY + momentumDistanceY;
    if (velocity.x !== 0) momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x);
    if (velocity.y !== 0) momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y);
    const momentumDuration = Math.max(momentumDurationX, momentumDurationY);
    image.currentX = newPositionX;
    image.currentY = newPositionY;
    const scaledWidth = image.width * zoom.scale;
    const scaledHeight = image.height * zoom.scale;
    image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);
    image.maxX = -image.minX;
    image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);
    image.maxY = -image.minY;
    image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);
    image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);
    gesture.imageWrapEl.style.transitionDuration = `${momentumDuration}ms`;
    gesture.imageWrapEl.style.transform = `translate3d(${image.currentX}px, ${image.currentY}px,0)`;
  }
  function onTransitionEnd() {
    const zoom = swiper.zoom;
    if (gesture.slideEl && swiper.activeIndex !== swiper.slides.indexOf(gesture.slideEl)) {
      if (gesture.imageEl) {
        gesture.imageEl.style.transform = "translate3d(0,0,0) scale(1)";
      }
      if (gesture.imageWrapEl) {
        gesture.imageWrapEl.style.transform = "translate3d(0,0,0)";
      }
      gesture.slideEl.classList.remove(`${swiper.params.zoom.zoomedSlideClass}`);
      zoom.scale = 1;
      currentScale = 1;
      gesture.slideEl = void 0;
      gesture.imageEl = void 0;
      gesture.imageWrapEl = void 0;
      gesture.originX = 0;
      gesture.originY = 0;
    }
  }
  function onMouseMove(e2) {
    if (currentScale <= 1 || !gesture.imageWrapEl) return;
    if (!eventWithinSlide(e2) || !eventWithinZoomContainer(e2)) return;
    const currentTransform = window2.getComputedStyle(gesture.imageWrapEl).transform;
    const matrix = new window2.DOMMatrix(currentTransform);
    if (!isPanningWithMouse) {
      isPanningWithMouse = true;
      mousePanStart.x = e2.clientX;
      mousePanStart.y = e2.clientY;
      image.startX = matrix.e;
      image.startY = matrix.f;
      image.width = gesture.imageEl.offsetWidth || gesture.imageEl.clientWidth;
      image.height = gesture.imageEl.offsetHeight || gesture.imageEl.clientHeight;
      gesture.slideWidth = gesture.slideEl.offsetWidth;
      gesture.slideHeight = gesture.slideEl.offsetHeight;
      return;
    }
    const deltaX = (e2.clientX - mousePanStart.x) * mousePanSensitivity;
    const deltaY = (e2.clientY - mousePanStart.y) * mousePanSensitivity;
    const scaledWidth = image.width * currentScale;
    const scaledHeight = image.height * currentScale;
    const slideWidth = gesture.slideWidth;
    const slideHeight = gesture.slideHeight;
    const minX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);
    const maxX = -minX;
    const minY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);
    const maxY = -minY;
    const newX = Math.max(Math.min(image.startX + deltaX, maxX), minX);
    const newY = Math.max(Math.min(image.startY + deltaY, maxY), minY);
    gesture.imageWrapEl.style.transitionDuration = "0ms";
    gesture.imageWrapEl.style.transform = `translate3d(${newX}px, ${newY}px, 0)`;
    mousePanStart.x = e2.clientX;
    mousePanStart.y = e2.clientY;
    image.startX = newX;
    image.startY = newY;
    image.currentX = newX;
    image.currentY = newY;
  }
  function zoomIn(e2) {
    const zoom = swiper.zoom;
    const params = swiper.params.zoom;
    if (!gesture.slideEl) {
      if (e2 && e2.target) {
        gesture.slideEl = e2.target.closest(`.${swiper.params.slideClass}, swiper-slide`);
      }
      if (!gesture.slideEl) {
        if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {
          gesture.slideEl = elementChildren(swiper.slidesEl, `.${swiper.params.slideActiveClass}`)[0];
        } else {
          gesture.slideEl = swiper.slides[swiper.activeIndex];
        }
      }
      let imageEl = gesture.slideEl.querySelector(`.${params.containerClass}`);
      if (imageEl) {
        imageEl = imageEl.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0];
      }
      gesture.imageEl = imageEl;
      if (imageEl) {
        gesture.imageWrapEl = elementParents(gesture.imageEl, `.${params.containerClass}`)[0];
      } else {
        gesture.imageWrapEl = void 0;
      }
    }
    if (!gesture.imageEl || !gesture.imageWrapEl) return;
    if (swiper.params.cssMode) {
      swiper.wrapperEl.style.overflow = "hidden";
      swiper.wrapperEl.style.touchAction = "none";
    }
    gesture.slideEl.classList.add(`${params.zoomedSlideClass}`);
    let touchX;
    let touchY;
    let offsetX;
    let offsetY;
    let diffX;
    let diffY;
    let translateX;
    let translateY;
    let imageWidth;
    let imageHeight;
    let scaledWidth;
    let scaledHeight;
    let translateMinX;
    let translateMinY;
    let translateMaxX;
    let translateMaxY;
    let slideWidth;
    let slideHeight;
    if (typeof image.touchesStart.x === "undefined" && e2) {
      touchX = e2.pageX;
      touchY = e2.pageY;
    } else {
      touchX = image.touchesStart.x;
      touchY = image.touchesStart.y;
    }
    const prevScale = currentScale;
    const forceZoomRatio = typeof e2 === "number" ? e2 : null;
    if (currentScale === 1 && forceZoomRatio) {
      touchX = void 0;
      touchY = void 0;
      image.touchesStart.x = void 0;
      image.touchesStart.y = void 0;
    }
    const maxRatio = getMaxRatio();
    zoom.scale = forceZoomRatio || maxRatio;
    currentScale = forceZoomRatio || maxRatio;
    if (e2 && !(currentScale === 1 && forceZoomRatio)) {
      slideWidth = gesture.slideEl.offsetWidth;
      slideHeight = gesture.slideEl.offsetHeight;
      offsetX = elementOffset(gesture.slideEl).left + window2.scrollX;
      offsetY = elementOffset(gesture.slideEl).top + window2.scrollY;
      diffX = offsetX + slideWidth / 2 - touchX;
      diffY = offsetY + slideHeight / 2 - touchY;
      imageWidth = gesture.imageEl.offsetWidth || gesture.imageEl.clientWidth;
      imageHeight = gesture.imageEl.offsetHeight || gesture.imageEl.clientHeight;
      scaledWidth = imageWidth * zoom.scale;
      scaledHeight = imageHeight * zoom.scale;
      translateMinX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);
      translateMinY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);
      translateMaxX = -translateMinX;
      translateMaxY = -translateMinY;
      if (prevScale > 0 && forceZoomRatio && typeof image.currentX === "number" && typeof image.currentY === "number") {
        translateX = image.currentX * zoom.scale / prevScale;
        translateY = image.currentY * zoom.scale / prevScale;
      } else {
        translateX = diffX * zoom.scale;
        translateY = diffY * zoom.scale;
      }
      if (translateX < translateMinX) {
        translateX = translateMinX;
      }
      if (translateX > translateMaxX) {
        translateX = translateMaxX;
      }
      if (translateY < translateMinY) {
        translateY = translateMinY;
      }
      if (translateY > translateMaxY) {
        translateY = translateMaxY;
      }
    } else {
      translateX = 0;
      translateY = 0;
    }
    if (forceZoomRatio && zoom.scale === 1) {
      gesture.originX = 0;
      gesture.originY = 0;
    }
    image.currentX = translateX;
    image.currentY = translateY;
    gesture.imageWrapEl.style.transitionDuration = "300ms";
    gesture.imageWrapEl.style.transform = `translate3d(${translateX}px, ${translateY}px,0)`;
    gesture.imageEl.style.transitionDuration = "300ms";
    gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;
  }
  function zoomOut() {
    const zoom = swiper.zoom;
    const params = swiper.params.zoom;
    if (!gesture.slideEl) {
      if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {
        gesture.slideEl = elementChildren(swiper.slidesEl, `.${swiper.params.slideActiveClass}`)[0];
      } else {
        gesture.slideEl = swiper.slides[swiper.activeIndex];
      }
      let imageEl = gesture.slideEl.querySelector(`.${params.containerClass}`);
      if (imageEl) {
        imageEl = imageEl.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0];
      }
      gesture.imageEl = imageEl;
      if (imageEl) {
        gesture.imageWrapEl = elementParents(gesture.imageEl, `.${params.containerClass}`)[0];
      } else {
        gesture.imageWrapEl = void 0;
      }
    }
    if (!gesture.imageEl || !gesture.imageWrapEl) return;
    if (swiper.params.cssMode) {
      swiper.wrapperEl.style.overflow = "";
      swiper.wrapperEl.style.touchAction = "";
    }
    zoom.scale = 1;
    currentScale = 1;
    image.currentX = void 0;
    image.currentY = void 0;
    image.touchesStart.x = void 0;
    image.touchesStart.y = void 0;
    gesture.imageWrapEl.style.transitionDuration = "300ms";
    gesture.imageWrapEl.style.transform = "translate3d(0,0,0)";
    gesture.imageEl.style.transitionDuration = "300ms";
    gesture.imageEl.style.transform = "translate3d(0,0,0) scale(1)";
    gesture.slideEl.classList.remove(`${params.zoomedSlideClass}`);
    gesture.slideEl = void 0;
    gesture.originX = 0;
    gesture.originY = 0;
    if (swiper.params.zoom.panOnMouseMove) {
      mousePanStart = {
        x: 0,
        y: 0
      };
      if (isPanningWithMouse) {
        isPanningWithMouse = false;
        image.startX = 0;
        image.startY = 0;
      }
    }
  }
  function zoomToggle(e2) {
    const zoom = swiper.zoom;
    if (zoom.scale && zoom.scale !== 1) {
      zoomOut();
    } else {
      zoomIn(e2);
    }
  }
  function getListeners() {
    const passiveListener = swiper.params.passiveListeners ? {
      passive: true,
      capture: false
    } : false;
    const activeListenerWithCapture = swiper.params.passiveListeners ? {
      passive: false,
      capture: true
    } : true;
    return {
      passiveListener,
      activeListenerWithCapture
    };
  }
  function enable() {
    const zoom = swiper.zoom;
    if (zoom.enabled) return;
    zoom.enabled = true;
    const {
      passiveListener,
      activeListenerWithCapture
    } = getListeners();
    swiper.wrapperEl.addEventListener("pointerdown", onGestureStart, passiveListener);
    swiper.wrapperEl.addEventListener("pointermove", onGestureChange, activeListenerWithCapture);
    ["pointerup", "pointercancel", "pointerout"].forEach((eventName) => {
      swiper.wrapperEl.addEventListener(eventName, onGestureEnd, passiveListener);
    });
    swiper.wrapperEl.addEventListener("pointermove", onTouchMove, activeListenerWithCapture);
  }
  function disable() {
    const zoom = swiper.zoom;
    if (!zoom.enabled) return;
    zoom.enabled = false;
    const {
      passiveListener,
      activeListenerWithCapture
    } = getListeners();
    swiper.wrapperEl.removeEventListener("pointerdown", onGestureStart, passiveListener);
    swiper.wrapperEl.removeEventListener("pointermove", onGestureChange, activeListenerWithCapture);
    ["pointerup", "pointercancel", "pointerout"].forEach((eventName) => {
      swiper.wrapperEl.removeEventListener(eventName, onGestureEnd, passiveListener);
    });
    swiper.wrapperEl.removeEventListener("pointermove", onTouchMove, activeListenerWithCapture);
  }
  on("init", () => {
    if (swiper.params.zoom.enabled) {
      enable();
    }
  });
  on("destroy", () => {
    disable();
  });
  on("touchStart", (_s, e2) => {
    if (!swiper.zoom.enabled) return;
    onTouchStart(e2);
  });
  on("touchEnd", (_s, e2) => {
    if (!swiper.zoom.enabled) return;
    onTouchEnd();
  });
  on("doubleTap", (_s, e2) => {
    if (!swiper.animating && swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {
      zoomToggle(e2);
    }
  });
  on("transitionEnd", () => {
    if (swiper.zoom.enabled && swiper.params.zoom.enabled) {
      onTransitionEnd();
    }
  });
  on("slideChange", () => {
    if (swiper.zoom.enabled && swiper.params.zoom.enabled && swiper.params.cssMode) {
      onTransitionEnd();
    }
  });
  Object.assign(swiper.zoom, {
    enable,
    disable,
    in: zoomIn,
    out: zoomOut,
    toggle: zoomToggle
  });
}
function Controller(_ref) {
  let {
    swiper,
    extendParams,
    on
  } = _ref;
  extendParams({
    controller: {
      control: void 0,
      inverse: false,
      by: "slide"
      // or 'container'
    }
  });
  swiper.controller = {
    control: void 0
  };
  function LinearSpline(x2, y2) {
    const binarySearch = /* @__PURE__ */ (function search() {
      let maxIndex;
      let minIndex;
      let guess;
      return (array, val) => {
        minIndex = -1;
        maxIndex = array.length;
        while (maxIndex - minIndex > 1) {
          guess = maxIndex + minIndex >> 1;
          if (array[guess] <= val) {
            minIndex = guess;
          } else {
            maxIndex = guess;
          }
        }
        return maxIndex;
      };
    })();
    this.x = x2;
    this.y = y2;
    this.lastIndex = x2.length - 1;
    let i1;
    let i3;
    this.interpolate = function interpolate(x22) {
      if (!x22) return 0;
      i3 = binarySearch(this.x, x22);
      i1 = i3 - 1;
      return (x22 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];
    };
    return this;
  }
  function getInterpolateFunction(c2) {
    swiper.controller.spline = swiper.params.loop ? new LinearSpline(swiper.slidesGrid, c2.slidesGrid) : new LinearSpline(swiper.snapGrid, c2.snapGrid);
  }
  function setTranslate(_t, byController) {
    const controlled = swiper.controller.control;
    let multiplier;
    let controlledTranslate;
    const Swiper2 = swiper.constructor;
    function setControlledTranslate(c2) {
      if (c2.destroyed) return;
      const translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;
      if (swiper.params.controller.by === "slide") {
        getInterpolateFunction(c2);
        controlledTranslate = -swiper.controller.spline.interpolate(-translate);
      }
      if (!controlledTranslate || swiper.params.controller.by === "container") {
        multiplier = (c2.maxTranslate() - c2.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());
        if (Number.isNaN(multiplier) || !Number.isFinite(multiplier)) {
          multiplier = 1;
        }
        controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c2.minTranslate();
      }
      if (swiper.params.controller.inverse) {
        controlledTranslate = c2.maxTranslate() - controlledTranslate;
      }
      c2.updateProgress(controlledTranslate);
      c2.setTranslate(controlledTranslate, swiper);
      c2.updateActiveIndex();
      c2.updateSlidesClasses();
    }
    if (Array.isArray(controlled)) {
      for (let i2 = 0; i2 < controlled.length; i2 += 1) {
        if (controlled[i2] !== byController && controlled[i2] instanceof Swiper2) {
          setControlledTranslate(controlled[i2]);
        }
      }
    } else if (controlled instanceof Swiper2 && byController !== controlled) {
      setControlledTranslate(controlled);
    }
  }
  function setTransition(duration, byController) {
    const Swiper2 = swiper.constructor;
    const controlled = swiper.controller.control;
    let i2;
    function setControlledTransition(c2) {
      if (c2.destroyed) return;
      c2.setTransition(duration, swiper);
      if (duration !== 0) {
        c2.transitionStart();
        if (c2.params.autoHeight) {
          nextTick(() => {
            c2.updateAutoHeight();
          });
        }
        elementTransitionEnd(c2.wrapperEl, () => {
          if (!controlled) return;
          c2.transitionEnd();
        });
      }
    }
    if (Array.isArray(controlled)) {
      for (i2 = 0; i2 < controlled.length; i2 += 1) {
        if (controlled[i2] !== byController && controlled[i2] instanceof Swiper2) {
          setControlledTransition(controlled[i2]);
        }
      }
    } else if (controlled instanceof Swiper2 && byController !== controlled) {
      setControlledTransition(controlled);
    }
  }
  function removeSpline() {
    if (!swiper.controller.control) return;
    if (swiper.controller.spline) {
      swiper.controller.spline = void 0;
      delete swiper.controller.spline;
    }
  }
  on("beforeInit", () => {
    if (typeof window !== "undefined" && // eslint-disable-line
    (typeof swiper.params.controller.control === "string" || swiper.params.controller.control instanceof HTMLElement)) {
      const controlElements = typeof swiper.params.controller.control === "string" ? [...document.querySelectorAll(swiper.params.controller.control)] : [swiper.params.controller.control];
      controlElements.forEach((controlElement) => {
        if (!swiper.controller.control) swiper.controller.control = [];
        if (controlElement && controlElement.swiper) {
          swiper.controller.control.push(controlElement.swiper);
        } else if (controlElement) {
          const eventName = `${swiper.params.eventsPrefix}init`;
          const onControllerSwiper = (e2) => {
            swiper.controller.control.push(e2.detail[0]);
            swiper.update();
            controlElement.removeEventListener(eventName, onControllerSwiper);
          };
          controlElement.addEventListener(eventName, onControllerSwiper);
        }
      });
      return;
    }
    swiper.controller.control = swiper.params.controller.control;
  });
  on("update", () => {
    removeSpline();
  });
  on("resize", () => {
    removeSpline();
  });
  on("observerUpdate", () => {
    removeSpline();
  });
  on("setTranslate", (_s, translate, byController) => {
    if (!swiper.controller.control || swiper.controller.control.destroyed) return;
    swiper.controller.setTranslate(translate, byController);
  });
  on("setTransition", (_s, duration, byController) => {
    if (!swiper.controller.control || swiper.controller.control.destroyed) return;
    swiper.controller.setTransition(duration, byController);
  });
  Object.assign(swiper.controller, {
    setTranslate,
    setTransition
  });
}
function A11y(_ref) {
  let {
    swiper,
    extendParams,
    on
  } = _ref;
  extendParams({
    a11y: {
      enabled: true,
      notificationClass: "swiper-notification",
      prevSlideMessage: "Previous slide",
      nextSlideMessage: "Next slide",
      firstSlideMessage: "This is the first slide",
      lastSlideMessage: "This is the last slide",
      paginationBulletMessage: "Go to slide {{index}}",
      slideLabelMessage: "{{index}} / {{slidesLength}}",
      containerMessage: null,
      containerRoleDescriptionMessage: null,
      containerRole: null,
      itemRoleDescriptionMessage: null,
      slideRole: "group",
      id: null,
      scrollOnFocus: true
    }
  });
  swiper.a11y = {
    clicked: false
  };
  let liveRegion = null;
  let preventFocusHandler;
  let focusTargetSlideEl;
  let visibilityChangedTimestamp = (/* @__PURE__ */ new Date()).getTime();
  function notify(message) {
    const notification = liveRegion;
    if (notification.length === 0) return;
    setInnerHTML(notification, message);
  }
  function getRandomNumber(size) {
    const randomChar = () => Math.round(16 * Math.random()).toString(16);
    return "x".repeat(size).replace(/x/g, randomChar);
  }
  function makeElFocusable(el) {
    el = makeElementsArray(el);
    el.forEach((subEl) => {
      subEl.setAttribute("tabIndex", "0");
    });
  }
  function makeElNotFocusable(el) {
    el = makeElementsArray(el);
    el.forEach((subEl) => {
      subEl.setAttribute("tabIndex", "-1");
    });
  }
  function addElRole(el, role) {
    el = makeElementsArray(el);
    el.forEach((subEl) => {
      subEl.setAttribute("role", role);
    });
  }
  function addElRoleDescription(el, description) {
    el = makeElementsArray(el);
    el.forEach((subEl) => {
      subEl.setAttribute("aria-roledescription", description);
    });
  }
  function addElControls(el, controls) {
    el = makeElementsArray(el);
    el.forEach((subEl) => {
      subEl.setAttribute("aria-controls", controls);
    });
  }
  function addElLabel(el, label) {
    el = makeElementsArray(el);
    el.forEach((subEl) => {
      subEl.setAttribute("aria-label", label);
    });
  }
  function addElId(el, id) {
    el = makeElementsArray(el);
    el.forEach((subEl) => {
      subEl.setAttribute("id", id);
    });
  }
  function addElLive(el, live) {
    el = makeElementsArray(el);
    el.forEach((subEl) => {
      subEl.setAttribute("aria-live", live);
    });
  }
  function disableEl(el) {
    el = makeElementsArray(el);
    el.forEach((subEl) => {
      subEl.setAttribute("aria-disabled", true);
    });
  }
  function enableEl(el) {
    el = makeElementsArray(el);
    el.forEach((subEl) => {
      subEl.setAttribute("aria-disabled", false);
    });
  }
  function onEnterOrSpaceKey(e2) {
    if (e2.keyCode !== 13 && e2.keyCode !== 32) return;
    const params = swiper.params.a11y;
    const targetEl = e2.target;
    if (swiper.pagination && swiper.pagination.el && (targetEl === swiper.pagination.el || swiper.pagination.el.contains(e2.target))) {
      if (!e2.target.matches(classesToSelector(swiper.params.pagination.bulletClass))) return;
    }
    if (swiper.navigation && swiper.navigation.prevEl && swiper.navigation.nextEl) {
      const prevEls = makeElementsArray(swiper.navigation.prevEl);
      const nextEls = makeElementsArray(swiper.navigation.nextEl);
      if (nextEls.includes(targetEl)) {
        if (!(swiper.isEnd && !swiper.params.loop)) {
          swiper.slideNext();
        }
        if (swiper.isEnd) {
          notify(params.lastSlideMessage);
        } else {
          notify(params.nextSlideMessage);
        }
      }
      if (prevEls.includes(targetEl)) {
        if (!(swiper.isBeginning && !swiper.params.loop)) {
          swiper.slidePrev();
        }
        if (swiper.isBeginning) {
          notify(params.firstSlideMessage);
        } else {
          notify(params.prevSlideMessage);
        }
      }
    }
    if (swiper.pagination && targetEl.matches(classesToSelector(swiper.params.pagination.bulletClass))) {
      targetEl.click();
    }
  }
  function updateNavigation() {
    if (swiper.params.loop || swiper.params.rewind || !swiper.navigation) return;
    const {
      nextEl,
      prevEl
    } = swiper.navigation;
    if (prevEl) {
      if (swiper.isBeginning) {
        disableEl(prevEl);
        makeElNotFocusable(prevEl);
      } else {
        enableEl(prevEl);
        makeElFocusable(prevEl);
      }
    }
    if (nextEl) {
      if (swiper.isEnd) {
        disableEl(nextEl);
        makeElNotFocusable(nextEl);
      } else {
        enableEl(nextEl);
        makeElFocusable(nextEl);
      }
    }
  }
  function hasPagination() {
    return swiper.pagination && swiper.pagination.bullets && swiper.pagination.bullets.length;
  }
  function hasClickablePagination() {
    return hasPagination() && swiper.params.pagination.clickable;
  }
  function updatePagination() {
    const params = swiper.params.a11y;
    if (!hasPagination()) return;
    swiper.pagination.bullets.forEach((bulletEl) => {
      if (swiper.params.pagination.clickable) {
        makeElFocusable(bulletEl);
        if (!swiper.params.pagination.renderBullet) {
          addElRole(bulletEl, "button");
          addElLabel(bulletEl, params.paginationBulletMessage.replace(/\{\{index\}\}/, elementIndex(bulletEl) + 1));
        }
      }
      if (bulletEl.matches(classesToSelector(swiper.params.pagination.bulletActiveClass))) {
        bulletEl.setAttribute("aria-current", "true");
      } else {
        bulletEl.removeAttribute("aria-current");
      }
    });
  }
  const initNavEl = (el, wrapperId, message) => {
    makeElFocusable(el);
    if (el.tagName !== "BUTTON") {
      addElRole(el, "button");
      el.addEventListener("keydown", onEnterOrSpaceKey);
    }
    addElLabel(el, message);
    addElControls(el, wrapperId);
  };
  const handlePointerDown = (e2) => {
    if (focusTargetSlideEl && focusTargetSlideEl !== e2.target && !focusTargetSlideEl.contains(e2.target)) {
      preventFocusHandler = true;
    }
    swiper.a11y.clicked = true;
  };
  const handlePointerUp = () => {
    preventFocusHandler = false;
    requestAnimationFrame(() => {
      requestAnimationFrame(() => {
        if (!swiper.destroyed) {
          swiper.a11y.clicked = false;
        }
      });
    });
  };
  const onVisibilityChange = (e2) => {
    visibilityChangedTimestamp = (/* @__PURE__ */ new Date()).getTime();
  };
  const handleFocus = (e2) => {
    if (swiper.a11y.clicked || !swiper.params.a11y.scrollOnFocus) return;
    if ((/* @__PURE__ */ new Date()).getTime() - visibilityChangedTimestamp < 100) return;
    const slideEl = e2.target.closest(`.${swiper.params.slideClass}, swiper-slide`);
    if (!slideEl || !swiper.slides.includes(slideEl)) return;
    focusTargetSlideEl = slideEl;
    const isActive = swiper.slides.indexOf(slideEl) === swiper.activeIndex;
    const isVisible = swiper.params.watchSlidesProgress && swiper.visibleSlides && swiper.visibleSlides.includes(slideEl);
    if (isActive || isVisible) return;
    if (e2.sourceCapabilities && e2.sourceCapabilities.firesTouchEvents) return;
    if (swiper.isHorizontal()) {
      swiper.el.scrollLeft = 0;
    } else {
      swiper.el.scrollTop = 0;
    }
    requestAnimationFrame(() => {
      if (preventFocusHandler) return;
      if (swiper.params.loop) {
        swiper.slideToLoop(swiper.getSlideIndexWhenGrid(parseInt(slideEl.getAttribute("data-swiper-slide-index"))), 0);
      } else {
        swiper.slideTo(swiper.getSlideIndexWhenGrid(swiper.slides.indexOf(slideEl)), 0);
      }
      preventFocusHandler = false;
    });
  };
  const initSlides = () => {
    const params = swiper.params.a11y;
    if (params.itemRoleDescriptionMessage) {
      addElRoleDescription(swiper.slides, params.itemRoleDescriptionMessage);
    }
    if (params.slideRole) {
      addElRole(swiper.slides, params.slideRole);
    }
    const slidesLength = swiper.slides.length;
    if (params.slideLabelMessage) {
      swiper.slides.forEach((slideEl, index) => {
        const slideIndex = swiper.params.loop ? parseInt(slideEl.getAttribute("data-swiper-slide-index"), 10) : index;
        const ariaLabelMessage = params.slideLabelMessage.replace(/\{\{index\}\}/, slideIndex + 1).replace(/\{\{slidesLength\}\}/, slidesLength);
        addElLabel(slideEl, ariaLabelMessage);
      });
    }
  };
  const init = () => {
    const params = swiper.params.a11y;
    swiper.el.append(liveRegion);
    const containerEl = swiper.el;
    if (params.containerRoleDescriptionMessage) {
      addElRoleDescription(containerEl, params.containerRoleDescriptionMessage);
    }
    if (params.containerMessage) {
      addElLabel(containerEl, params.containerMessage);
    }
    if (params.containerRole) {
      addElRole(containerEl, params.containerRole);
    }
    const wrapperEl = swiper.wrapperEl;
    const wrapperId = params.id || wrapperEl.getAttribute("id") || `swiper-wrapper-${getRandomNumber(16)}`;
    const live = swiper.params.autoplay && swiper.params.autoplay.enabled ? "off" : "polite";
    addElId(wrapperEl, wrapperId);
    addElLive(wrapperEl, live);
    initSlides();
    let {
      nextEl,
      prevEl
    } = swiper.navigation ? swiper.navigation : {};
    nextEl = makeElementsArray(nextEl);
    prevEl = makeElementsArray(prevEl);
    if (nextEl) {
      nextEl.forEach((el) => initNavEl(el, wrapperId, params.nextSlideMessage));
    }
    if (prevEl) {
      prevEl.forEach((el) => initNavEl(el, wrapperId, params.prevSlideMessage));
    }
    if (hasClickablePagination()) {
      const paginationEl = makeElementsArray(swiper.pagination.el);
      paginationEl.forEach((el) => {
        el.addEventListener("keydown", onEnterOrSpaceKey);
      });
    }
    const document2 = getDocument();
    document2.addEventListener("visibilitychange", onVisibilityChange);
    swiper.el.addEventListener("focus", handleFocus, true);
    swiper.el.addEventListener("focus", handleFocus, true);
    swiper.el.addEventListener("pointerdown", handlePointerDown, true);
    swiper.el.addEventListener("pointerup", handlePointerUp, true);
  };
  function destroy() {
    if (liveRegion) liveRegion.remove();
    let {
      nextEl,
      prevEl
    } = swiper.navigation ? swiper.navigation : {};
    nextEl = makeElementsArray(nextEl);
    prevEl = makeElementsArray(prevEl);
    if (nextEl) {
      nextEl.forEach((el) => el.removeEventListener("keydown", onEnterOrSpaceKey));
    }
    if (prevEl) {
      prevEl.forEach((el) => el.removeEventListener("keydown", onEnterOrSpaceKey));
    }
    if (hasClickablePagination()) {
      const paginationEl = makeElementsArray(swiper.pagination.el);
      paginationEl.forEach((el) => {
        el.removeEventListener("keydown", onEnterOrSpaceKey);
      });
    }
    const document2 = getDocument();
    document2.removeEventListener("visibilitychange", onVisibilityChange);
    if (swiper.el && typeof swiper.el !== "string") {
      swiper.el.removeEventListener("focus", handleFocus, true);
      swiper.el.removeEventListener("pointerdown", handlePointerDown, true);
      swiper.el.removeEventListener("pointerup", handlePointerUp, true);
    }
  }
  on("beforeInit", () => {
    liveRegion = createElement("span", swiper.params.a11y.notificationClass);
    liveRegion.setAttribute("aria-live", "assertive");
    liveRegion.setAttribute("aria-atomic", "true");
  });
  on("afterInit", () => {
    if (!swiper.params.a11y.enabled) return;
    init();
  });
  on("slidesLengthChange snapGridLengthChange slidesGridLengthChange", () => {
    if (!swiper.params.a11y.enabled) return;
    initSlides();
  });
  on("fromEdge toEdge afterInit lock unlock", () => {
    if (!swiper.params.a11y.enabled) return;
    updateNavigation();
  });
  on("paginationUpdate", () => {
    if (!swiper.params.a11y.enabled) return;
    updatePagination();
  });
  on("destroy", () => {
    if (!swiper.params.a11y.enabled) return;
    destroy();
  });
}
function History(_ref) {
  let {
    swiper,
    extendParams,
    on
  } = _ref;
  extendParams({
    history: {
      enabled: false,
      root: "",
      replaceState: false,
      key: "slides",
      keepQuery: false
    }
  });
  let initialized = false;
  let paths = {};
  const slugify = (text) => {
    return text.toString().replace(/\s+/g, "-").replace(/[^\w-]+/g, "").replace(/--+/g, "-").replace(/^-+/, "").replace(/-+$/, "");
  };
  const getPathValues = (urlOverride) => {
    const window2 = getWindow();
    let location2;
    if (urlOverride) {
      location2 = new URL(urlOverride);
    } else {
      location2 = window2.location;
    }
    const pathArray = location2.pathname.slice(1).split("/").filter((part) => part !== "");
    const total = pathArray.length;
    const key = pathArray[total - 2];
    const value = pathArray[total - 1];
    return {
      key,
      value
    };
  };
  const setHistory = (key, index) => {
    const window2 = getWindow();
    if (!initialized || !swiper.params.history.enabled) return;
    let location2;
    if (swiper.params.url) {
      location2 = new URL(swiper.params.url);
    } else {
      location2 = window2.location;
    }
    const slide = swiper.virtual && swiper.params.virtual.enabled ? swiper.slidesEl.querySelector(`[data-swiper-slide-index="${index}"]`) : swiper.slides[index];
    let value = slugify(slide.getAttribute("data-history"));
    if (swiper.params.history.root.length > 0) {
      let root = swiper.params.history.root;
      if (root[root.length - 1] === "/") root = root.slice(0, root.length - 1);
      value = `${root}/${key ? `${key}/` : ""}${value}`;
    } else if (!location2.pathname.includes(key)) {
      value = `${key ? `${key}/` : ""}${value}`;
    }
    if (swiper.params.history.keepQuery) {
      value += location2.search;
    }
    const currentState = window2.history.state;
    if (currentState && currentState.value === value) {
      return;
    }
    if (swiper.params.history.replaceState) {
      window2.history.replaceState({
        value
      }, null, value);
    } else {
      window2.history.pushState({
        value
      }, null, value);
    }
  };
  const scrollToSlide = (speed, value, runCallbacks) => {
    if (value) {
      for (let i2 = 0, length = swiper.slides.length; i2 < length; i2 += 1) {
        const slide = swiper.slides[i2];
        const slideHistory = slugify(slide.getAttribute("data-history"));
        if (slideHistory === value) {
          const index = swiper.getSlideIndex(slide);
          swiper.slideTo(index, speed, runCallbacks);
        }
      }
    } else {
      swiper.slideTo(0, speed, runCallbacks);
    }
  };
  const setHistoryPopState = () => {
    paths = getPathValues(swiper.params.url);
    scrollToSlide(swiper.params.speed, paths.value, false);
  };
  const init = () => {
    const window2 = getWindow();
    if (!swiper.params.history) return;
    if (!window2.history || !window2.history.pushState) {
      swiper.params.history.enabled = false;
      swiper.params.hashNavigation.enabled = true;
      return;
    }
    initialized = true;
    paths = getPathValues(swiper.params.url);
    if (!paths.key && !paths.value) {
      if (!swiper.params.history.replaceState) {
        window2.addEventListener("popstate", setHistoryPopState);
      }
      return;
    }
    scrollToSlide(0, paths.value, swiper.params.runCallbacksOnInit);
    if (!swiper.params.history.replaceState) {
      window2.addEventListener("popstate", setHistoryPopState);
    }
  };
  const destroy = () => {
    const window2 = getWindow();
    if (!swiper.params.history.replaceState) {
      window2.removeEventListener("popstate", setHistoryPopState);
    }
  };
  on("init", () => {
    if (swiper.params.history.enabled) {
      init();
    }
  });
  on("destroy", () => {
    if (swiper.params.history.enabled) {
      destroy();
    }
  });
  on("transitionEnd _freeModeNoMomentumRelease", () => {
    if (initialized) {
      setHistory(swiper.params.history.key, swiper.activeIndex);
    }
  });
  on("slideChange", () => {
    if (initialized && swiper.params.cssMode) {
      setHistory(swiper.params.history.key, swiper.activeIndex);
    }
  });
}
function HashNavigation(_ref) {
  let {
    swiper,
    extendParams,
    emit,
    on
  } = _ref;
  let initialized = false;
  const document2 = getDocument();
  const window2 = getWindow();
  extendParams({
    hashNavigation: {
      enabled: false,
      replaceState: false,
      watchState: false,
      getSlideIndex(_s, hash) {
        if (swiper.virtual && swiper.params.virtual.enabled) {
          const slideWithHash = swiper.slides.find((slideEl) => slideEl.getAttribute("data-hash") === hash);
          if (!slideWithHash) return 0;
          const index = parseInt(slideWithHash.getAttribute("data-swiper-slide-index"), 10);
          return index;
        }
        return swiper.getSlideIndex(elementChildren(swiper.slidesEl, `.${swiper.params.slideClass}[data-hash="${hash}"], swiper-slide[data-hash="${hash}"]`)[0]);
      }
    }
  });
  const onHashChange = () => {
    emit("hashChange");
    const newHash = document2.location.hash.replace("#", "");
    const activeSlideEl = swiper.virtual && swiper.params.virtual.enabled ? swiper.slidesEl.querySelector(`[data-swiper-slide-index="${swiper.activeIndex}"]`) : swiper.slides[swiper.activeIndex];
    const activeSlideHash = activeSlideEl ? activeSlideEl.getAttribute("data-hash") : "";
    if (newHash !== activeSlideHash) {
      const newIndex = swiper.params.hashNavigation.getSlideIndex(swiper, newHash);
      if (typeof newIndex === "undefined" || Number.isNaN(newIndex)) return;
      swiper.slideTo(newIndex);
    }
  };
  const setHash = () => {
    if (!initialized || !swiper.params.hashNavigation.enabled) return;
    const activeSlideEl = swiper.virtual && swiper.params.virtual.enabled ? swiper.slidesEl.querySelector(`[data-swiper-slide-index="${swiper.activeIndex}"]`) : swiper.slides[swiper.activeIndex];
    const activeSlideHash = activeSlideEl ? activeSlideEl.getAttribute("data-hash") || activeSlideEl.getAttribute("data-history") : "";
    if (swiper.params.hashNavigation.replaceState && window2.history && window2.history.replaceState) {
      window2.history.replaceState(null, null, `#${activeSlideHash}` || "");
      emit("hashSet");
    } else {
      document2.location.hash = activeSlideHash || "";
      emit("hashSet");
    }
  };
  const init = () => {
    if (!swiper.params.hashNavigation.enabled || swiper.params.history && swiper.params.history.enabled) return;
    initialized = true;
    const hash = document2.location.hash.replace("#", "");
    if (hash) {
      const speed = 0;
      const index = swiper.params.hashNavigation.getSlideIndex(swiper, hash);
      swiper.slideTo(index || 0, speed, swiper.params.runCallbacksOnInit, true);
    }
    if (swiper.params.hashNavigation.watchState) {
      window2.addEventListener("hashchange", onHashChange);
    }
  };
  const destroy = () => {
    if (swiper.params.hashNavigation.watchState) {
      window2.removeEventListener("hashchange", onHashChange);
    }
  };
  on("init", () => {
    if (swiper.params.hashNavigation.enabled) {
      init();
    }
  });
  on("destroy", () => {
    if (swiper.params.hashNavigation.enabled) {
      destroy();
    }
  });
  on("transitionEnd _freeModeNoMomentumRelease", () => {
    if (initialized) {
      setHash();
    }
  });
  on("slideChange", () => {
    if (initialized && swiper.params.cssMode) {
      setHash();
    }
  });
}
function Autoplay(_ref) {
  let {
    swiper,
    extendParams,
    on,
    emit,
    params
  } = _ref;
  swiper.autoplay = {
    running: false,
    paused: false,
    timeLeft: 0
  };
  extendParams({
    autoplay: {
      enabled: false,
      delay: 3e3,
      waitForTransition: true,
      disableOnInteraction: false,
      stopOnLastSlide: false,
      reverseDirection: false,
      pauseOnMouseEnter: false
    }
  });
  let timeout;
  let raf;
  let autoplayDelayTotal = params && params.autoplay ? params.autoplay.delay : 3e3;
  let autoplayDelayCurrent = params && params.autoplay ? params.autoplay.delay : 3e3;
  let autoplayTimeLeft;
  let autoplayStartTime = (/* @__PURE__ */ new Date()).getTime();
  let wasPaused;
  let isTouched;
  let pausedByTouch;
  let touchStartTimeout;
  let slideChanged;
  let pausedByInteraction;
  let pausedByPointerEnter;
  function onTransitionEnd(e2) {
    if (!swiper || swiper.destroyed || !swiper.wrapperEl) return;
    if (e2.target !== swiper.wrapperEl) return;
    swiper.wrapperEl.removeEventListener("transitionend", onTransitionEnd);
    if (pausedByPointerEnter || e2.detail && e2.detail.bySwiperTouchMove) {
      return;
    }
    resume();
  }
  const calcTimeLeft = () => {
    if (swiper.destroyed || !swiper.autoplay.running) return;
    if (swiper.autoplay.paused) {
      wasPaused = true;
    } else if (wasPaused) {
      autoplayDelayCurrent = autoplayTimeLeft;
      wasPaused = false;
    }
    const timeLeft = swiper.autoplay.paused ? autoplayTimeLeft : autoplayStartTime + autoplayDelayCurrent - (/* @__PURE__ */ new Date()).getTime();
    swiper.autoplay.timeLeft = timeLeft;
    emit("autoplayTimeLeft", timeLeft, timeLeft / autoplayDelayTotal);
    raf = requestAnimationFrame(() => {
      calcTimeLeft();
    });
  };
  const getSlideDelay = () => {
    let activeSlideEl;
    if (swiper.virtual && swiper.params.virtual.enabled) {
      activeSlideEl = swiper.slides.find((slideEl) => slideEl.classList.contains("swiper-slide-active"));
    } else {
      activeSlideEl = swiper.slides[swiper.activeIndex];
    }
    if (!activeSlideEl) return void 0;
    const currentSlideDelay = parseInt(activeSlideEl.getAttribute("data-swiper-autoplay"), 10);
    return currentSlideDelay;
  };
  const run = (delayForce) => {
    if (swiper.destroyed || !swiper.autoplay.running) return;
    cancelAnimationFrame(raf);
    calcTimeLeft();
    let delay = typeof delayForce === "undefined" ? swiper.params.autoplay.delay : delayForce;
    autoplayDelayTotal = swiper.params.autoplay.delay;
    autoplayDelayCurrent = swiper.params.autoplay.delay;
    const currentSlideDelay = getSlideDelay();
    if (!Number.isNaN(currentSlideDelay) && currentSlideDelay > 0 && typeof delayForce === "undefined") {
      delay = currentSlideDelay;
      autoplayDelayTotal = currentSlideDelay;
      autoplayDelayCurrent = currentSlideDelay;
    }
    autoplayTimeLeft = delay;
    const speed = swiper.params.speed;
    const proceed = () => {
      if (!swiper || swiper.destroyed) return;
      if (swiper.params.autoplay.reverseDirection) {
        if (!swiper.isBeginning || swiper.params.loop || swiper.params.rewind) {
          swiper.slidePrev(speed, true, true);
          emit("autoplay");
        } else if (!swiper.params.autoplay.stopOnLastSlide) {
          swiper.slideTo(swiper.slides.length - 1, speed, true, true);
          emit("autoplay");
        }
      } else {
        if (!swiper.isEnd || swiper.params.loop || swiper.params.rewind) {
          swiper.slideNext(speed, true, true);
          emit("autoplay");
        } else if (!swiper.params.autoplay.stopOnLastSlide) {
          swiper.slideTo(0, speed, true, true);
          emit("autoplay");
        }
      }
      if (swiper.params.cssMode) {
        autoplayStartTime = (/* @__PURE__ */ new Date()).getTime();
        requestAnimationFrame(() => {
          run();
        });
      }
    };
    if (delay > 0) {
      clearTimeout(timeout);
      timeout = setTimeout(() => {
        proceed();
      }, delay);
    } else {
      requestAnimationFrame(() => {
        proceed();
      });
    }
    return delay;
  };
  const start = () => {
    autoplayStartTime = (/* @__PURE__ */ new Date()).getTime();
    swiper.autoplay.running = true;
    run();
    emit("autoplayStart");
  };
  const stop = () => {
    swiper.autoplay.running = false;
    clearTimeout(timeout);
    cancelAnimationFrame(raf);
    emit("autoplayStop");
  };
  const pause = (internal, reset) => {
    if (swiper.destroyed || !swiper.autoplay.running) return;
    clearTimeout(timeout);
    if (!internal) {
      pausedByInteraction = true;
    }
    const proceed = () => {
      emit("autoplayPause");
      if (swiper.params.autoplay.waitForTransition) {
        swiper.wrapperEl.addEventListener("transitionend", onTransitionEnd);
      } else {
        resume();
      }
    };
    swiper.autoplay.paused = true;
    if (reset) {
      if (slideChanged) {
        autoplayTimeLeft = swiper.params.autoplay.delay;
      }
      slideChanged = false;
      proceed();
      return;
    }
    const delay = autoplayTimeLeft || swiper.params.autoplay.delay;
    autoplayTimeLeft = delay - ((/* @__PURE__ */ new Date()).getTime() - autoplayStartTime);
    if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop) return;
    if (autoplayTimeLeft < 0) autoplayTimeLeft = 0;
    proceed();
  };
  const resume = () => {
    if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop || swiper.destroyed || !swiper.autoplay.running) return;
    autoplayStartTime = (/* @__PURE__ */ new Date()).getTime();
    if (pausedByInteraction) {
      pausedByInteraction = false;
      run(autoplayTimeLeft);
    } else {
      run();
    }
    swiper.autoplay.paused = false;
    emit("autoplayResume");
  };
  const onVisibilityChange = () => {
    if (swiper.destroyed || !swiper.autoplay.running) return;
    const document2 = getDocument();
    if (document2.visibilityState === "hidden") {
      pausedByInteraction = true;
      pause(true);
    }
    if (document2.visibilityState === "visible") {
      resume();
    }
  };
  const onPointerEnter = (e2) => {
    if (e2.pointerType !== "mouse") return;
    pausedByInteraction = true;
    pausedByPointerEnter = true;
    if (swiper.animating || swiper.autoplay.paused) return;
    pause(true);
  };
  const onPointerLeave = (e2) => {
    if (e2.pointerType !== "mouse") return;
    pausedByPointerEnter = false;
    if (swiper.autoplay.paused) {
      resume();
    }
  };
  const attachMouseEvents = () => {
    if (swiper.params.autoplay.pauseOnMouseEnter) {
      swiper.el.addEventListener("pointerenter", onPointerEnter);
      swiper.el.addEventListener("pointerleave", onPointerLeave);
    }
  };
  const detachMouseEvents = () => {
    if (swiper.el && typeof swiper.el !== "string") {
      swiper.el.removeEventListener("pointerenter", onPointerEnter);
      swiper.el.removeEventListener("pointerleave", onPointerLeave);
    }
  };
  const attachDocumentEvents = () => {
    const document2 = getDocument();
    document2.addEventListener("visibilitychange", onVisibilityChange);
  };
  const detachDocumentEvents = () => {
    const document2 = getDocument();
    document2.removeEventListener("visibilitychange", onVisibilityChange);
  };
  on("init", () => {
    if (swiper.params.autoplay.enabled) {
      attachMouseEvents();
      attachDocumentEvents();
      start();
    }
  });
  on("destroy", () => {
    detachMouseEvents();
    detachDocumentEvents();
    if (swiper.autoplay.running) {
      stop();
    }
  });
  on("_freeModeStaticRelease", () => {
    if (pausedByTouch || pausedByInteraction) {
      resume();
    }
  });
  on("_freeModeNoMomentumRelease", () => {
    if (!swiper.params.autoplay.disableOnInteraction) {
      pause(true, true);
    } else {
      stop();
    }
  });
  on("beforeTransitionStart", (_s, speed, internal) => {
    if (swiper.destroyed || !swiper.autoplay.running) return;
    if (internal || !swiper.params.autoplay.disableOnInteraction) {
      pause(true, true);
    } else {
      stop();
    }
  });
  on("sliderFirstMove", () => {
    if (swiper.destroyed || !swiper.autoplay.running) return;
    if (swiper.params.autoplay.disableOnInteraction) {
      stop();
      return;
    }
    isTouched = true;
    pausedByTouch = false;
    pausedByInteraction = false;
    touchStartTimeout = setTimeout(() => {
      pausedByInteraction = true;
      pausedByTouch = true;
      pause(true);
    }, 200);
  });
  on("touchEnd", () => {
    if (swiper.destroyed || !swiper.autoplay.running || !isTouched) return;
    clearTimeout(touchStartTimeout);
    clearTimeout(timeout);
    if (swiper.params.autoplay.disableOnInteraction) {
      pausedByTouch = false;
      isTouched = false;
      return;
    }
    if (pausedByTouch && swiper.params.cssMode) resume();
    pausedByTouch = false;
    isTouched = false;
  });
  on("slideChange", () => {
    if (swiper.destroyed || !swiper.autoplay.running) return;
    slideChanged = true;
  });
  Object.assign(swiper.autoplay, {
    start,
    stop,
    pause,
    resume
  });
}
function Thumb(_ref) {
  let {
    swiper,
    extendParams,
    on
  } = _ref;
  extendParams({
    thumbs: {
      swiper: null,
      multipleActiveThumbs: true,
      autoScrollOffset: 0,
      slideThumbActiveClass: "swiper-slide-thumb-active",
      thumbsContainerClass: "swiper-thumbs"
    }
  });
  let initialized = false;
  let swiperCreated = false;
  swiper.thumbs = {
    swiper: null
  };
  function onThumbClick() {
    const thumbsSwiper = swiper.thumbs.swiper;
    if (!thumbsSwiper || thumbsSwiper.destroyed) return;
    const clickedIndex = thumbsSwiper.clickedIndex;
    const clickedSlide = thumbsSwiper.clickedSlide;
    if (clickedSlide && clickedSlide.classList.contains(swiper.params.thumbs.slideThumbActiveClass)) return;
    if (typeof clickedIndex === "undefined" || clickedIndex === null) return;
    let slideToIndex;
    if (thumbsSwiper.params.loop) {
      slideToIndex = parseInt(thumbsSwiper.clickedSlide.getAttribute("data-swiper-slide-index"), 10);
    } else {
      slideToIndex = clickedIndex;
    }
    if (swiper.params.loop) {
      swiper.slideToLoop(slideToIndex);
    } else {
      swiper.slideTo(slideToIndex);
    }
  }
  function init() {
    const {
      thumbs: thumbsParams
    } = swiper.params;
    if (initialized) return false;
    initialized = true;
    const SwiperClass = swiper.constructor;
    if (thumbsParams.swiper instanceof SwiperClass) {
      if (thumbsParams.swiper.destroyed) {
        initialized = false;
        return false;
      }
      swiper.thumbs.swiper = thumbsParams.swiper;
      Object.assign(swiper.thumbs.swiper.originalParams, {
        watchSlidesProgress: true,
        slideToClickedSlide: false
      });
      Object.assign(swiper.thumbs.swiper.params, {
        watchSlidesProgress: true,
        slideToClickedSlide: false
      });
      swiper.thumbs.swiper.update();
    } else if (isObject(thumbsParams.swiper)) {
      const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);
      Object.assign(thumbsSwiperParams, {
        watchSlidesProgress: true,
        slideToClickedSlide: false
      });
      swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);
      swiperCreated = true;
    }
    swiper.thumbs.swiper.el.classList.add(swiper.params.thumbs.thumbsContainerClass);
    swiper.thumbs.swiper.on("tap", onThumbClick);
    return true;
  }
  function update(initial) {
    const thumbsSwiper = swiper.thumbs.swiper;
    if (!thumbsSwiper || thumbsSwiper.destroyed) return;
    const slidesPerView = thumbsSwiper.params.slidesPerView === "auto" ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;
    let thumbsToActivate = 1;
    const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;
    if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {
      thumbsToActivate = swiper.params.slidesPerView;
    }
    if (!swiper.params.thumbs.multipleActiveThumbs) {
      thumbsToActivate = 1;
    }
    thumbsToActivate = Math.floor(thumbsToActivate);
    thumbsSwiper.slides.forEach((slideEl) => slideEl.classList.remove(thumbActiveClass));
    if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {
      for (let i2 = 0; i2 < thumbsToActivate; i2 += 1) {
        elementChildren(thumbsSwiper.slidesEl, `[data-swiper-slide-index="${swiper.realIndex + i2}"]`).forEach((slideEl) => {
          slideEl.classList.add(thumbActiveClass);
        });
      }
    } else {
      for (let i2 = 0; i2 < thumbsToActivate; i2 += 1) {
        if (thumbsSwiper.slides[swiper.realIndex + i2]) {
          thumbsSwiper.slides[swiper.realIndex + i2].classList.add(thumbActiveClass);
        }
      }
    }
    const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;
    const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;
    if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {
      const currentThumbsIndex = thumbsSwiper.activeIndex;
      let newThumbsIndex;
      let direction;
      if (thumbsSwiper.params.loop) {
        const newThumbsSlide = thumbsSwiper.slides.find((slideEl) => slideEl.getAttribute("data-swiper-slide-index") === `${swiper.realIndex}`);
        newThumbsIndex = thumbsSwiper.slides.indexOf(newThumbsSlide);
        direction = swiper.activeIndex > swiper.previousIndex ? "next" : "prev";
      } else {
        newThumbsIndex = swiper.realIndex;
        direction = newThumbsIndex > swiper.previousIndex ? "next" : "prev";
      }
      if (useOffset) {
        newThumbsIndex += direction === "next" ? autoScrollOffset : -1 * autoScrollOffset;
      }
      if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {
        if (thumbsSwiper.params.centeredSlides) {
          if (newThumbsIndex > currentThumbsIndex) {
            newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;
          } else {
            newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;
          }
        } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) ;
        thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : void 0);
      }
    }
  }
  on("beforeInit", () => {
    const {
      thumbs
    } = swiper.params;
    if (!thumbs || !thumbs.swiper) return;
    if (typeof thumbs.swiper === "string" || thumbs.swiper instanceof HTMLElement) {
      const document2 = getDocument();
      const getThumbsElementAndInit = () => {
        const thumbsElement = typeof thumbs.swiper === "string" ? document2.querySelector(thumbs.swiper) : thumbs.swiper;
        if (thumbsElement && thumbsElement.swiper) {
          thumbs.swiper = thumbsElement.swiper;
          init();
          update(true);
        } else if (thumbsElement) {
          const eventName = `${swiper.params.eventsPrefix}init`;
          const onThumbsSwiper = (e2) => {
            thumbs.swiper = e2.detail[0];
            thumbsElement.removeEventListener(eventName, onThumbsSwiper);
            init();
            update(true);
            thumbs.swiper.update();
            swiper.update();
          };
          thumbsElement.addEventListener(eventName, onThumbsSwiper);
        }
        return thumbsElement;
      };
      const watchForThumbsToAppear = () => {
        if (swiper.destroyed) return;
        const thumbsElement = getThumbsElementAndInit();
        if (!thumbsElement) {
          requestAnimationFrame(watchForThumbsToAppear);
        }
      };
      requestAnimationFrame(watchForThumbsToAppear);
    } else {
      init();
      update(true);
    }
  });
  on("slideChange update resize observerUpdate", () => {
    update();
  });
  on("setTransition", (_s, duration) => {
    const thumbsSwiper = swiper.thumbs.swiper;
    if (!thumbsSwiper || thumbsSwiper.destroyed) return;
    thumbsSwiper.setTransition(duration);
  });
  on("beforeDestroy", () => {
    const thumbsSwiper = swiper.thumbs.swiper;
    if (!thumbsSwiper || thumbsSwiper.destroyed) return;
    if (swiperCreated) {
      thumbsSwiper.destroy();
    }
  });
  Object.assign(swiper.thumbs, {
    init,
    update
  });
}
function freeMode(_ref) {
  let {
    swiper,
    extendParams,
    emit,
    once
  } = _ref;
  extendParams({
    freeMode: {
      enabled: false,
      momentum: true,
      momentumRatio: 1,
      momentumBounce: true,
      momentumBounceRatio: 1,
      momentumVelocityRatio: 1,
      sticky: false,
      minimumVelocity: 0.02
    }
  });
  function onTouchStart() {
    if (swiper.params.cssMode) return;
    const translate = swiper.getTranslate();
    swiper.setTranslate(translate);
    swiper.setTransition(0);
    swiper.touchEventsData.velocities.length = 0;
    swiper.freeMode.onTouchEnd({
      currentPos: swiper.rtl ? swiper.translate : -swiper.translate
    });
  }
  function onTouchMove() {
    if (swiper.params.cssMode) return;
    const {
      touchEventsData: data,
      touches
    } = swiper;
    if (data.velocities.length === 0) {
      data.velocities.push({
        position: touches[swiper.isHorizontal() ? "startX" : "startY"],
        time: data.touchStartTime
      });
    }
    data.velocities.push({
      position: touches[swiper.isHorizontal() ? "currentX" : "currentY"],
      time: now()
    });
  }
  function onTouchEnd(_ref2) {
    let {
      currentPos
    } = _ref2;
    if (swiper.params.cssMode) return;
    const {
      params,
      wrapperEl,
      rtlTranslate: rtl,
      snapGrid,
      touchEventsData: data
    } = swiper;
    const touchEndTime = now();
    const timeDiff = touchEndTime - data.touchStartTime;
    if (currentPos < -swiper.minTranslate()) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }
    if (currentPos > -swiper.maxTranslate()) {
      if (swiper.slides.length < snapGrid.length) {
        swiper.slideTo(snapGrid.length - 1);
      } else {
        swiper.slideTo(swiper.slides.length - 1);
      }
      return;
    }
    if (params.freeMode.momentum) {
      if (data.velocities.length > 1) {
        const lastMoveEvent = data.velocities.pop();
        const velocityEvent = data.velocities.pop();
        const distance = lastMoveEvent.position - velocityEvent.position;
        const time = lastMoveEvent.time - velocityEvent.time;
        swiper.velocity = distance / time;
        swiper.velocity /= 2;
        if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {
          swiper.velocity = 0;
        }
        if (time > 150 || now() - lastMoveEvent.time > 300) {
          swiper.velocity = 0;
        }
      } else {
        swiper.velocity = 0;
      }
      swiper.velocity *= params.freeMode.momentumVelocityRatio;
      data.velocities.length = 0;
      let momentumDuration = 1e3 * params.freeMode.momentumRatio;
      const momentumDistance = swiper.velocity * momentumDuration;
      let newPosition = swiper.translate + momentumDistance;
      if (rtl) newPosition = -newPosition;
      let doBounce = false;
      let afterBouncePosition;
      const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;
      let needsLoopFix;
      if (newPosition < swiper.maxTranslate()) {
        if (params.freeMode.momentumBounce) {
          if (newPosition + swiper.maxTranslate() < -bounceAmount) {
            newPosition = swiper.maxTranslate() - bounceAmount;
          }
          afterBouncePosition = swiper.maxTranslate();
          doBounce = true;
          data.allowMomentumBounce = true;
        } else {
          newPosition = swiper.maxTranslate();
        }
        if (params.loop && params.centeredSlides) needsLoopFix = true;
      } else if (newPosition > swiper.minTranslate()) {
        if (params.freeMode.momentumBounce) {
          if (newPosition - swiper.minTranslate() > bounceAmount) {
            newPosition = swiper.minTranslate() + bounceAmount;
          }
          afterBouncePosition = swiper.minTranslate();
          doBounce = true;
          data.allowMomentumBounce = true;
        } else {
          newPosition = swiper.minTranslate();
        }
        if (params.loop && params.centeredSlides) needsLoopFix = true;
      } else if (params.freeMode.sticky) {
        let nextSlide;
        for (let j = 0; j < snapGrid.length; j += 1) {
          if (snapGrid[j] > -newPosition) {
            nextSlide = j;
            break;
          }
        }
        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === "next") {
          newPosition = snapGrid[nextSlide];
        } else {
          newPosition = snapGrid[nextSlide - 1];
        }
        newPosition = -newPosition;
      }
      if (needsLoopFix) {
        once("transitionEnd", () => {
          swiper.loopFix();
        });
      }
      if (swiper.velocity !== 0) {
        if (rtl) {
          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);
        } else {
          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);
        }
        if (params.freeMode.sticky) {
          const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);
          const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];
          if (moveDistance < currentSlideSize) {
            momentumDuration = params.speed;
          } else if (moveDistance < 2 * currentSlideSize) {
            momentumDuration = params.speed * 1.5;
          } else {
            momentumDuration = params.speed * 2.5;
          }
        }
      } else if (params.freeMode.sticky) {
        swiper.slideToClosest();
        return;
      }
      if (params.freeMode.momentumBounce && doBounce) {
        swiper.updateProgress(afterBouncePosition);
        swiper.setTransition(momentumDuration);
        swiper.setTranslate(newPosition);
        swiper.transitionStart(true, swiper.swipeDirection);
        swiper.animating = true;
        elementTransitionEnd(wrapperEl, () => {
          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;
          emit("momentumBounce");
          swiper.setTransition(params.speed);
          setTimeout(() => {
            swiper.setTranslate(afterBouncePosition);
            elementTransitionEnd(wrapperEl, () => {
              if (!swiper || swiper.destroyed) return;
              swiper.transitionEnd();
            });
          }, 0);
        });
      } else if (swiper.velocity) {
        emit("_freeModeNoMomentumRelease");
        swiper.updateProgress(newPosition);
        swiper.setTransition(momentumDuration);
        swiper.setTranslate(newPosition);
        swiper.transitionStart(true, swiper.swipeDirection);
        if (!swiper.animating) {
          swiper.animating = true;
          elementTransitionEnd(wrapperEl, () => {
            if (!swiper || swiper.destroyed) return;
            swiper.transitionEnd();
          });
        }
      } else {
        swiper.updateProgress(newPosition);
      }
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    } else if (params.freeMode.sticky) {
      swiper.slideToClosest();
      return;
    } else if (params.freeMode) {
      emit("_freeModeNoMomentumRelease");
    }
    if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {
      emit("_freeModeStaticRelease");
      swiper.updateProgress();
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    }
  }
  Object.assign(swiper, {
    freeMode: {
      onTouchStart,
      onTouchMove,
      onTouchEnd
    }
  });
}
function Grid(_ref) {
  let {
    swiper,
    extendParams,
    on
  } = _ref;
  extendParams({
    grid: {
      rows: 1,
      fill: "column"
    }
  });
  let slidesNumberEvenToRows;
  let slidesPerRow;
  let numFullColumns;
  let wasMultiRow;
  const getSpaceBetween = () => {
    let spaceBetween = swiper.params.spaceBetween;
    if (typeof spaceBetween === "string" && spaceBetween.indexOf("%") >= 0) {
      spaceBetween = parseFloat(spaceBetween.replace("%", "")) / 100 * swiper.size;
    } else if (typeof spaceBetween === "string") {
      spaceBetween = parseFloat(spaceBetween);
    }
    return spaceBetween;
  };
  const initSlides = (slides) => {
    const {
      slidesPerView
    } = swiper.params;
    const {
      rows,
      fill
    } = swiper.params.grid;
    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : slides.length;
    numFullColumns = Math.floor(slidesLength / rows);
    if (Math.floor(slidesLength / rows) === slidesLength / rows) {
      slidesNumberEvenToRows = slidesLength;
    } else {
      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;
    }
    if (slidesPerView !== "auto" && fill === "row") {
      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);
    }
    slidesPerRow = slidesNumberEvenToRows / rows;
  };
  const unsetSlides = () => {
    if (swiper.slides) {
      swiper.slides.forEach((slide) => {
        if (slide.swiperSlideGridSet) {
          slide.style.height = "";
          slide.style[swiper.getDirectionLabel("margin-top")] = "";
        }
      });
    }
  };
  const updateSlide = (i2, slide, slides) => {
    const {
      slidesPerGroup
    } = swiper.params;
    const spaceBetween = getSpaceBetween();
    const {
      rows,
      fill
    } = swiper.params.grid;
    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : slides.length;
    let newSlideOrderIndex;
    let column;
    let row;
    if (fill === "row" && slidesPerGroup > 1) {
      const groupIndex = Math.floor(i2 / (slidesPerGroup * rows));
      const slideIndexInGroup = i2 - rows * slidesPerGroup * groupIndex;
      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);
      row = Math.floor(slideIndexInGroup / columnsInGroup);
      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;
      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;
      slide.style.order = newSlideOrderIndex;
    } else if (fill === "column") {
      column = Math.floor(i2 / rows);
      row = i2 - column * rows;
      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {
        row += 1;
        if (row >= rows) {
          row = 0;
          column += 1;
        }
      }
    } else {
      row = Math.floor(i2 / slidesPerRow);
      column = i2 - row * slidesPerRow;
    }
    slide.row = row;
    slide.column = column;
    slide.style.height = `calc((100% - ${(rows - 1) * spaceBetween}px) / ${rows})`;
    slide.style[swiper.getDirectionLabel("margin-top")] = row !== 0 ? spaceBetween && `${spaceBetween}px` : "";
    slide.swiperSlideGridSet = true;
  };
  const updateWrapperSize = (slideSize, snapGrid) => {
    const {
      centeredSlides,
      roundLengths
    } = swiper.params;
    const spaceBetween = getSpaceBetween();
    const {
      rows
    } = swiper.params.grid;
    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;
    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;
    if (!swiper.params.cssMode) {
      swiper.wrapperEl.style[swiper.getDirectionLabel("width")] = `${swiper.virtualSize + spaceBetween}px`;
    }
    if (centeredSlides) {
      const newSlidesGrid = [];
      for (let i2 = 0; i2 < snapGrid.length; i2 += 1) {
        let slidesGridItem = snapGrid[i2];
        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);
        if (snapGrid[i2] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);
      }
      snapGrid.splice(0, snapGrid.length);
      snapGrid.push(...newSlidesGrid);
    }
  };
  const onInit = () => {
    wasMultiRow = swiper.params.grid && swiper.params.grid.rows > 1;
  };
  const onUpdate = () => {
    const {
      params,
      el
    } = swiper;
    const isMultiRow = params.grid && params.grid.rows > 1;
    if (wasMultiRow && !isMultiRow) {
      el.classList.remove(`${params.containerModifierClass}grid`, `${params.containerModifierClass}grid-column`);
      numFullColumns = 1;
      swiper.emitContainerClasses();
    } else if (!wasMultiRow && isMultiRow) {
      el.classList.add(`${params.containerModifierClass}grid`);
      if (params.grid.fill === "column") {
        el.classList.add(`${params.containerModifierClass}grid-column`);
      }
      swiper.emitContainerClasses();
    }
    wasMultiRow = isMultiRow;
  };
  on("init", onInit);
  on("update", onUpdate);
  swiper.grid = {
    initSlides,
    unsetSlides,
    updateSlide,
    updateWrapperSize
  };
}
function appendSlide(slides) {
  const swiper = this;
  const {
    params,
    slidesEl
  } = swiper;
  if (params.loop) {
    swiper.loopDestroy();
  }
  const appendElement = (slideEl) => {
    if (typeof slideEl === "string") {
      const tempDOM = document.createElement("div");
      setInnerHTML(tempDOM, slideEl);
      slidesEl.append(tempDOM.children[0]);
      setInnerHTML(tempDOM, "");
    } else {
      slidesEl.append(slideEl);
    }
  };
  if (typeof slides === "object" && "length" in slides) {
    for (let i2 = 0; i2 < slides.length; i2 += 1) {
      if (slides[i2]) appendElement(slides[i2]);
    }
  } else {
    appendElement(slides);
  }
  swiper.recalcSlides();
  if (params.loop) {
    swiper.loopCreate();
  }
  if (!params.observer || swiper.isElement) {
    swiper.update();
  }
}
function prependSlide(slides) {
  const swiper = this;
  const {
    params,
    activeIndex,
    slidesEl
  } = swiper;
  if (params.loop) {
    swiper.loopDestroy();
  }
  let newActiveIndex = activeIndex + 1;
  const prependElement = (slideEl) => {
    if (typeof slideEl === "string") {
      const tempDOM = document.createElement("div");
      setInnerHTML(tempDOM, slideEl);
      slidesEl.prepend(tempDOM.children[0]);
      setInnerHTML(tempDOM, "");
    } else {
      slidesEl.prepend(slideEl);
    }
  };
  if (typeof slides === "object" && "length" in slides) {
    for (let i2 = 0; i2 < slides.length; i2 += 1) {
      if (slides[i2]) prependElement(slides[i2]);
    }
    newActiveIndex = activeIndex + slides.length;
  } else {
    prependElement(slides);
  }
  swiper.recalcSlides();
  if (params.loop) {
    swiper.loopCreate();
  }
  if (!params.observer || swiper.isElement) {
    swiper.update();
  }
  swiper.slideTo(newActiveIndex, 0, false);
}
function addSlide(index, slides) {
  const swiper = this;
  const {
    params,
    activeIndex,
    slidesEl
  } = swiper;
  let activeIndexBuffer = activeIndex;
  if (params.loop) {
    activeIndexBuffer -= swiper.loopedSlides;
    swiper.loopDestroy();
    swiper.recalcSlides();
  }
  const baseLength = swiper.slides.length;
  if (index <= 0) {
    swiper.prependSlide(slides);
    return;
  }
  if (index >= baseLength) {
    swiper.appendSlide(slides);
    return;
  }
  let newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;
  const slidesBuffer = [];
  for (let i2 = baseLength - 1; i2 >= index; i2 -= 1) {
    const currentSlide = swiper.slides[i2];
    currentSlide.remove();
    slidesBuffer.unshift(currentSlide);
  }
  if (typeof slides === "object" && "length" in slides) {
    for (let i2 = 0; i2 < slides.length; i2 += 1) {
      if (slides[i2]) slidesEl.append(slides[i2]);
    }
    newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;
  } else {
    slidesEl.append(slides);
  }
  for (let i2 = 0; i2 < slidesBuffer.length; i2 += 1) {
    slidesEl.append(slidesBuffer[i2]);
  }
  swiper.recalcSlides();
  if (params.loop) {
    swiper.loopCreate();
  }
  if (!params.observer || swiper.isElement) {
    swiper.update();
  }
  if (params.loop) {
    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
  } else {
    swiper.slideTo(newActiveIndex, 0, false);
  }
}
function removeSlide(slidesIndexes) {
  const swiper = this;
  const {
    params,
    activeIndex
  } = swiper;
  let activeIndexBuffer = activeIndex;
  if (params.loop) {
    activeIndexBuffer -= swiper.loopedSlides;
    swiper.loopDestroy();
  }
  let newActiveIndex = activeIndexBuffer;
  let indexToRemove;
  if (typeof slidesIndexes === "object" && "length" in slidesIndexes) {
    for (let i2 = 0; i2 < slidesIndexes.length; i2 += 1) {
      indexToRemove = slidesIndexes[i2];
      if (swiper.slides[indexToRemove]) swiper.slides[indexToRemove].remove();
      if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
    }
    newActiveIndex = Math.max(newActiveIndex, 0);
  } else {
    indexToRemove = slidesIndexes;
    if (swiper.slides[indexToRemove]) swiper.slides[indexToRemove].remove();
    if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
    newActiveIndex = Math.max(newActiveIndex, 0);
  }
  swiper.recalcSlides();
  if (params.loop) {
    swiper.loopCreate();
  }
  if (!params.observer || swiper.isElement) {
    swiper.update();
  }
  if (params.loop) {
    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
  } else {
    swiper.slideTo(newActiveIndex, 0, false);
  }
}
function removeAllSlides() {
  const swiper = this;
  const slidesIndexes = [];
  for (let i2 = 0; i2 < swiper.slides.length; i2 += 1) {
    slidesIndexes.push(i2);
  }
  swiper.removeSlide(slidesIndexes);
}
function Manipulation(_ref) {
  let {
    swiper
  } = _ref;
  Object.assign(swiper, {
    appendSlide: appendSlide.bind(swiper),
    prependSlide: prependSlide.bind(swiper),
    addSlide: addSlide.bind(swiper),
    removeSlide: removeSlide.bind(swiper),
    removeAllSlides: removeAllSlides.bind(swiper)
  });
}
function effectInit(params) {
  const {
    effect,
    swiper,
    on,
    setTranslate,
    setTransition,
    overwriteParams,
    perspective,
    recreateShadows,
    getEffectParams
  } = params;
  on("beforeInit", () => {
    if (swiper.params.effect !== effect) return;
    swiper.classNames.push(`${swiper.params.containerModifierClass}${effect}`);
    if (perspective && perspective()) {
      swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);
    }
    const overwriteParamsResult = overwriteParams ? overwriteParams() : {};
    Object.assign(swiper.params, overwriteParamsResult);
    Object.assign(swiper.originalParams, overwriteParamsResult);
  });
  on("setTranslate _virtualUpdated", () => {
    if (swiper.params.effect !== effect) return;
    setTranslate();
  });
  on("setTransition", (_s, duration) => {
    if (swiper.params.effect !== effect) return;
    setTransition(duration);
  });
  on("transitionEnd", () => {
    if (swiper.params.effect !== effect) return;
    if (recreateShadows) {
      if (!getEffectParams || !getEffectParams().slideShadows) return;
      swiper.slides.forEach((slideEl) => {
        slideEl.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((shadowEl) => shadowEl.remove());
      });
      recreateShadows();
    }
  });
  let requireUpdateOnVirtual;
  on("virtualUpdate", () => {
    if (swiper.params.effect !== effect) return;
    if (!swiper.slides.length) {
      requireUpdateOnVirtual = true;
    }
    requestAnimationFrame(() => {
      if (requireUpdateOnVirtual && swiper.slides && swiper.slides.length) {
        setTranslate();
        requireUpdateOnVirtual = false;
      }
    });
  });
}
function effectTarget(effectParams, slideEl) {
  const transformEl = getSlideTransformEl(slideEl);
  if (transformEl !== slideEl) {
    transformEl.style.backfaceVisibility = "hidden";
    transformEl.style["-webkit-backface-visibility"] = "hidden";
  }
  return transformEl;
}
function effectVirtualTransitionEnd(_ref) {
  let {
    swiper,
    duration,
    transformElements,
    allSlides
  } = _ref;
  const {
    activeIndex
  } = swiper;
  const getSlide = (el) => {
    if (!el.parentElement) {
      const slide = swiper.slides.find((slideEl) => slideEl.shadowRoot && slideEl.shadowRoot === el.parentNode);
      return slide;
    }
    return el.parentElement;
  };
  if (swiper.params.virtualTranslate && duration !== 0) {
    let eventTriggered = false;
    let transitionEndTarget;
    if (allSlides) {
      transitionEndTarget = transformElements;
    } else {
      transitionEndTarget = transformElements.filter((transformEl) => {
        const el = transformEl.classList.contains("swiper-slide-transform") ? getSlide(transformEl) : transformEl;
        return swiper.getSlideIndex(el) === activeIndex;
      });
    }
    transitionEndTarget.forEach((el) => {
      elementTransitionEnd(el, () => {
        if (eventTriggered) return;
        if (!swiper || swiper.destroyed) return;
        eventTriggered = true;
        swiper.animating = false;
        const evt = new window.CustomEvent("transitionend", {
          bubbles: true,
          cancelable: true
        });
        swiper.wrapperEl.dispatchEvent(evt);
      });
    });
  }
}
function EffectFade(_ref) {
  let {
    swiper,
    extendParams,
    on
  } = _ref;
  extendParams({
    fadeEffect: {
      crossFade: false
    }
  });
  const setTranslate = () => {
    const {
      slides
    } = swiper;
    const params = swiper.params.fadeEffect;
    for (let i2 = 0; i2 < slides.length; i2 += 1) {
      const slideEl = swiper.slides[i2];
      const offset = slideEl.swiperSlideOffset;
      let tx = -offset;
      if (!swiper.params.virtualTranslate) tx -= swiper.translate;
      let ty = 0;
      if (!swiper.isHorizontal()) {
        ty = tx;
        tx = 0;
      }
      const slideOpacity = swiper.params.fadeEffect.crossFade ? Math.max(1 - Math.abs(slideEl.progress), 0) : 1 + Math.min(Math.max(slideEl.progress, -1), 0);
      const targetEl = effectTarget(params, slideEl);
      targetEl.style.opacity = slideOpacity;
      targetEl.style.transform = `translate3d(${tx}px, ${ty}px, 0px)`;
    }
  };
  const setTransition = (duration) => {
    const transformElements = swiper.slides.map((slideEl) => getSlideTransformEl(slideEl));
    transformElements.forEach((el) => {
      el.style.transitionDuration = `${duration}ms`;
    });
    effectVirtualTransitionEnd({
      swiper,
      duration,
      transformElements,
      allSlides: true
    });
  };
  effectInit({
    effect: "fade",
    swiper,
    on,
    setTranslate,
    setTransition,
    overwriteParams: () => ({
      slidesPerView: 1,
      slidesPerGroup: 1,
      watchSlidesProgress: true,
      spaceBetween: 0,
      virtualTranslate: !swiper.params.cssMode
    })
  });
}
function EffectCube(_ref) {
  let {
    swiper,
    extendParams,
    on
  } = _ref;
  extendParams({
    cubeEffect: {
      slideShadows: true,
      shadow: true,
      shadowOffset: 20,
      shadowScale: 0.94
    }
  });
  const createSlideShadows = (slideEl, progress, isHorizontal) => {
    let shadowBefore = isHorizontal ? slideEl.querySelector(".swiper-slide-shadow-left") : slideEl.querySelector(".swiper-slide-shadow-top");
    let shadowAfter = isHorizontal ? slideEl.querySelector(".swiper-slide-shadow-right") : slideEl.querySelector(".swiper-slide-shadow-bottom");
    if (!shadowBefore) {
      shadowBefore = createElement("div", `swiper-slide-shadow-cube swiper-slide-shadow-${isHorizontal ? "left" : "top"}`.split(" "));
      slideEl.append(shadowBefore);
    }
    if (!shadowAfter) {
      shadowAfter = createElement("div", `swiper-slide-shadow-cube swiper-slide-shadow-${isHorizontal ? "right" : "bottom"}`.split(" "));
      slideEl.append(shadowAfter);
    }
    if (shadowBefore) shadowBefore.style.opacity = Math.max(-progress, 0);
    if (shadowAfter) shadowAfter.style.opacity = Math.max(progress, 0);
  };
  const recreateShadows = () => {
    const isHorizontal = swiper.isHorizontal();
    swiper.slides.forEach((slideEl) => {
      const progress = Math.max(Math.min(slideEl.progress, 1), -1);
      createSlideShadows(slideEl, progress, isHorizontal);
    });
  };
  const setTranslate = () => {
    const {
      el,
      wrapperEl,
      slides,
      width: swiperWidth,
      height: swiperHeight,
      rtlTranslate: rtl,
      size: swiperSize,
      browser
    } = swiper;
    const r2 = getRotateFix(swiper);
    const params = swiper.params.cubeEffect;
    const isHorizontal = swiper.isHorizontal();
    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;
    let wrapperRotate = 0;
    let cubeShadowEl;
    if (params.shadow) {
      if (isHorizontal) {
        cubeShadowEl = swiper.wrapperEl.querySelector(".swiper-cube-shadow");
        if (!cubeShadowEl) {
          cubeShadowEl = createElement("div", "swiper-cube-shadow");
          swiper.wrapperEl.append(cubeShadowEl);
        }
        cubeShadowEl.style.height = `${swiperWidth}px`;
      } else {
        cubeShadowEl = el.querySelector(".swiper-cube-shadow");
        if (!cubeShadowEl) {
          cubeShadowEl = createElement("div", "swiper-cube-shadow");
          el.append(cubeShadowEl);
        }
      }
    }
    for (let i2 = 0; i2 < slides.length; i2 += 1) {
      const slideEl = slides[i2];
      let slideIndex = i2;
      if (isVirtual) {
        slideIndex = parseInt(slideEl.getAttribute("data-swiper-slide-index"), 10);
      }
      let slideAngle = slideIndex * 90;
      let round = Math.floor(slideAngle / 360);
      if (rtl) {
        slideAngle = -slideAngle;
        round = Math.floor(-slideAngle / 360);
      }
      const progress = Math.max(Math.min(slideEl.progress, 1), -1);
      let tx = 0;
      let ty = 0;
      let tz = 0;
      if (slideIndex % 4 === 0) {
        tx = -round * 4 * swiperSize;
        tz = 0;
      } else if ((slideIndex - 1) % 4 === 0) {
        tx = 0;
        tz = -round * 4 * swiperSize;
      } else if ((slideIndex - 2) % 4 === 0) {
        tx = swiperSize + round * 4 * swiperSize;
        tz = swiperSize;
      } else if ((slideIndex - 3) % 4 === 0) {
        tx = -swiperSize;
        tz = 3 * swiperSize + swiperSize * 4 * round;
      }
      if (rtl) {
        tx = -tx;
      }
      if (!isHorizontal) {
        ty = tx;
        tx = 0;
      }
      const transform = `rotateX(${r2(isHorizontal ? 0 : -slideAngle)}deg) rotateY(${r2(isHorizontal ? slideAngle : 0)}deg) translate3d(${tx}px, ${ty}px, ${tz}px)`;
      if (progress <= 1 && progress > -1) {
        wrapperRotate = slideIndex * 90 + progress * 90;
        if (rtl) wrapperRotate = -slideIndex * 90 - progress * 90;
      }
      slideEl.style.transform = transform;
      if (params.slideShadows) {
        createSlideShadows(slideEl, progress, isHorizontal);
      }
    }
    wrapperEl.style.transformOrigin = `50% 50% -${swiperSize / 2}px`;
    wrapperEl.style["-webkit-transform-origin"] = `50% 50% -${swiperSize / 2}px`;
    if (params.shadow) {
      if (isHorizontal) {
        cubeShadowEl.style.transform = `translate3d(0px, ${swiperWidth / 2 + params.shadowOffset}px, ${-swiperWidth / 2}px) rotateX(89.99deg) rotateZ(0deg) scale(${params.shadowScale})`;
      } else {
        const shadowAngle = Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;
        const multiplier = 1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);
        const scale1 = params.shadowScale;
        const scale2 = params.shadowScale / multiplier;
        const offset = params.shadowOffset;
        cubeShadowEl.style.transform = `scale3d(${scale1}, 1, ${scale2}) translate3d(0px, ${swiperHeight / 2 + offset}px, ${-swiperHeight / 2 / scale2}px) rotateX(-89.99deg)`;
      }
    }
    const zFactor = (browser.isSafari || browser.isWebView) && browser.needPerspectiveFix ? -swiperSize / 2 : 0;
    wrapperEl.style.transform = `translate3d(0px,0,${zFactor}px) rotateX(${r2(swiper.isHorizontal() ? 0 : wrapperRotate)}deg) rotateY(${r2(swiper.isHorizontal() ? -wrapperRotate : 0)}deg)`;
    wrapperEl.style.setProperty("--swiper-cube-translate-z", `${zFactor}px`);
  };
  const setTransition = (duration) => {
    const {
      el,
      slides
    } = swiper;
    slides.forEach((slideEl) => {
      slideEl.style.transitionDuration = `${duration}ms`;
      slideEl.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((subEl) => {
        subEl.style.transitionDuration = `${duration}ms`;
      });
    });
    if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {
      const shadowEl = el.querySelector(".swiper-cube-shadow");
      if (shadowEl) shadowEl.style.transitionDuration = `${duration}ms`;
    }
  };
  effectInit({
    effect: "cube",
    swiper,
    on,
    setTranslate,
    setTransition,
    recreateShadows,
    getEffectParams: () => swiper.params.cubeEffect,
    perspective: () => true,
    overwriteParams: () => ({
      slidesPerView: 1,
      slidesPerGroup: 1,
      watchSlidesProgress: true,
      resistanceRatio: 0,
      spaceBetween: 0,
      centeredSlides: false,
      virtualTranslate: true
    })
  });
}
function createShadow(suffix, slideEl, side) {
  const shadowClass = `swiper-slide-shadow${side ? `-${side}` : ""}${suffix ? ` swiper-slide-shadow-${suffix}` : ""}`;
  const shadowContainer = getSlideTransformEl(slideEl);
  let shadowEl = shadowContainer.querySelector(`.${shadowClass.split(" ").join(".")}`);
  if (!shadowEl) {
    shadowEl = createElement("div", shadowClass.split(" "));
    shadowContainer.append(shadowEl);
  }
  return shadowEl;
}
function EffectFlip(_ref) {
  let {
    swiper,
    extendParams,
    on
  } = _ref;
  extendParams({
    flipEffect: {
      slideShadows: true,
      limitRotation: true
    }
  });
  const createSlideShadows = (slideEl, progress) => {
    let shadowBefore = swiper.isHorizontal() ? slideEl.querySelector(".swiper-slide-shadow-left") : slideEl.querySelector(".swiper-slide-shadow-top");
    let shadowAfter = swiper.isHorizontal() ? slideEl.querySelector(".swiper-slide-shadow-right") : slideEl.querySelector(".swiper-slide-shadow-bottom");
    if (!shadowBefore) {
      shadowBefore = createShadow("flip", slideEl, swiper.isHorizontal() ? "left" : "top");
    }
    if (!shadowAfter) {
      shadowAfter = createShadow("flip", slideEl, swiper.isHorizontal() ? "right" : "bottom");
    }
    if (shadowBefore) shadowBefore.style.opacity = Math.max(-progress, 0);
    if (shadowAfter) shadowAfter.style.opacity = Math.max(progress, 0);
  };
  const recreateShadows = () => {
    swiper.params.flipEffect;
    swiper.slides.forEach((slideEl) => {
      let progress = slideEl.progress;
      if (swiper.params.flipEffect.limitRotation) {
        progress = Math.max(Math.min(slideEl.progress, 1), -1);
      }
      createSlideShadows(slideEl, progress);
    });
  };
  const setTranslate = () => {
    const {
      slides,
      rtlTranslate: rtl
    } = swiper;
    const params = swiper.params.flipEffect;
    const rotateFix = getRotateFix(swiper);
    for (let i2 = 0; i2 < slides.length; i2 += 1) {
      const slideEl = slides[i2];
      let progress = slideEl.progress;
      if (swiper.params.flipEffect.limitRotation) {
        progress = Math.max(Math.min(slideEl.progress, 1), -1);
      }
      const offset = slideEl.swiperSlideOffset;
      const rotate = -180 * progress;
      let rotateY = rotate;
      let rotateX = 0;
      let tx = swiper.params.cssMode ? -offset - swiper.translate : -offset;
      let ty = 0;
      if (!swiper.isHorizontal()) {
        ty = tx;
        tx = 0;
        rotateX = -rotateY;
        rotateY = 0;
      } else if (rtl) {
        rotateY = -rotateY;
      }
      slideEl.style.zIndex = -Math.abs(Math.round(progress)) + slides.length;
      if (params.slideShadows) {
        createSlideShadows(slideEl, progress);
      }
      const transform = `translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateFix(rotateX)}deg) rotateY(${rotateFix(rotateY)}deg)`;
      const targetEl = effectTarget(params, slideEl);
      targetEl.style.transform = transform;
    }
  };
  const setTransition = (duration) => {
    const transformElements = swiper.slides.map((slideEl) => getSlideTransformEl(slideEl));
    transformElements.forEach((el) => {
      el.style.transitionDuration = `${duration}ms`;
      el.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((shadowEl) => {
        shadowEl.style.transitionDuration = `${duration}ms`;
      });
    });
    effectVirtualTransitionEnd({
      swiper,
      duration,
      transformElements
    });
  };
  effectInit({
    effect: "flip",
    swiper,
    on,
    setTranslate,
    setTransition,
    recreateShadows,
    getEffectParams: () => swiper.params.flipEffect,
    perspective: () => true,
    overwriteParams: () => ({
      slidesPerView: 1,
      slidesPerGroup: 1,
      watchSlidesProgress: true,
      spaceBetween: 0,
      virtualTranslate: !swiper.params.cssMode
    })
  });
}
function EffectCoverflow(_ref) {
  let {
    swiper,
    extendParams,
    on
  } = _ref;
  extendParams({
    coverflowEffect: {
      rotate: 50,
      stretch: 0,
      depth: 100,
      scale: 1,
      modifier: 1,
      slideShadows: true
    }
  });
  const setTranslate = () => {
    const {
      width: swiperWidth,
      height: swiperHeight,
      slides,
      slidesSizesGrid
    } = swiper;
    const params = swiper.params.coverflowEffect;
    const isHorizontal = swiper.isHorizontal();
    const transform = swiper.translate;
    const center = isHorizontal ? -transform + swiperWidth / 2 : -transform + swiperHeight / 2;
    const rotate = isHorizontal ? params.rotate : -params.rotate;
    const translate = params.depth;
    const r2 = getRotateFix(swiper);
    for (let i2 = 0, length = slides.length; i2 < length; i2 += 1) {
      const slideEl = slides[i2];
      const slideSize = slidesSizesGrid[i2];
      const slideOffset = slideEl.swiperSlideOffset;
      const centerOffset = (center - slideOffset - slideSize / 2) / slideSize;
      const offsetMultiplier = typeof params.modifier === "function" ? params.modifier(centerOffset) : centerOffset * params.modifier;
      let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;
      let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier;
      let translateZ = -translate * Math.abs(offsetMultiplier);
      let stretch = params.stretch;
      if (typeof stretch === "string" && stretch.indexOf("%") !== -1) {
        stretch = parseFloat(params.stretch) / 100 * slideSize;
      }
      let translateY = isHorizontal ? 0 : stretch * offsetMultiplier;
      let translateX = isHorizontal ? stretch * offsetMultiplier : 0;
      let scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier);
      if (Math.abs(translateX) < 1e-3) translateX = 0;
      if (Math.abs(translateY) < 1e-3) translateY = 0;
      if (Math.abs(translateZ) < 1e-3) translateZ = 0;
      if (Math.abs(rotateY) < 1e-3) rotateY = 0;
      if (Math.abs(rotateX) < 1e-3) rotateX = 0;
      if (Math.abs(scale) < 1e-3) scale = 0;
      const slideTransform = `translate3d(${translateX}px,${translateY}px,${translateZ}px)  rotateX(${r2(rotateX)}deg) rotateY(${r2(rotateY)}deg) scale(${scale})`;
      const targetEl = effectTarget(params, slideEl);
      targetEl.style.transform = slideTransform;
      slideEl.style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;
      if (params.slideShadows) {
        let shadowBeforeEl = isHorizontal ? slideEl.querySelector(".swiper-slide-shadow-left") : slideEl.querySelector(".swiper-slide-shadow-top");
        let shadowAfterEl = isHorizontal ? slideEl.querySelector(".swiper-slide-shadow-right") : slideEl.querySelector(".swiper-slide-shadow-bottom");
        if (!shadowBeforeEl) {
          shadowBeforeEl = createShadow("coverflow", slideEl, isHorizontal ? "left" : "top");
        }
        if (!shadowAfterEl) {
          shadowAfterEl = createShadow("coverflow", slideEl, isHorizontal ? "right" : "bottom");
        }
        if (shadowBeforeEl) shadowBeforeEl.style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;
        if (shadowAfterEl) shadowAfterEl.style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;
      }
    }
  };
  const setTransition = (duration) => {
    const transformElements = swiper.slides.map((slideEl) => getSlideTransformEl(slideEl));
    transformElements.forEach((el) => {
      el.style.transitionDuration = `${duration}ms`;
      el.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((shadowEl) => {
        shadowEl.style.transitionDuration = `${duration}ms`;
      });
    });
  };
  effectInit({
    effect: "coverflow",
    swiper,
    on,
    setTranslate,
    setTransition,
    perspective: () => true,
    overwriteParams: () => ({
      watchSlidesProgress: true
    })
  });
}
function EffectCreative(_ref) {
  let {
    swiper,
    extendParams,
    on
  } = _ref;
  extendParams({
    creativeEffect: {
      limitProgress: 1,
      shadowPerProgress: false,
      progressMultiplier: 1,
      perspective: true,
      prev: {
        translate: [0, 0, 0],
        rotate: [0, 0, 0],
        opacity: 1,
        scale: 1
      },
      next: {
        translate: [0, 0, 0],
        rotate: [0, 0, 0],
        opacity: 1,
        scale: 1
      }
    }
  });
  const getTranslateValue = (value) => {
    if (typeof value === "string") return value;
    return `${value}px`;
  };
  const setTranslate = () => {
    const {
      slides,
      wrapperEl,
      slidesSizesGrid
    } = swiper;
    const params = swiper.params.creativeEffect;
    const {
      progressMultiplier: multiplier
    } = params;
    const isCenteredSlides = swiper.params.centeredSlides;
    const rotateFix = getRotateFix(swiper);
    if (isCenteredSlides) {
      const margin = slidesSizesGrid[0] / 2 - swiper.params.slidesOffsetBefore || 0;
      wrapperEl.style.transform = `translateX(calc(50% - ${margin}px))`;
    }
    for (let i2 = 0; i2 < slides.length; i2 += 1) {
      const slideEl = slides[i2];
      const slideProgress = slideEl.progress;
      const progress = Math.min(Math.max(slideEl.progress, -params.limitProgress), params.limitProgress);
      let originalProgress = progress;
      if (!isCenteredSlides) {
        originalProgress = Math.min(Math.max(slideEl.originalProgress, -params.limitProgress), params.limitProgress);
      }
      const offset = slideEl.swiperSlideOffset;
      const t2 = [swiper.params.cssMode ? -offset - swiper.translate : -offset, 0, 0];
      const r2 = [0, 0, 0];
      let custom = false;
      if (!swiper.isHorizontal()) {
        t2[1] = t2[0];
        t2[0] = 0;
      }
      let data = {
        translate: [0, 0, 0],
        rotate: [0, 0, 0],
        scale: 1,
        opacity: 1
      };
      if (progress < 0) {
        data = params.next;
        custom = true;
      } else if (progress > 0) {
        data = params.prev;
        custom = true;
      }
      t2.forEach((value, index) => {
        t2[index] = `calc(${value}px + (${getTranslateValue(data.translate[index])} * ${Math.abs(progress * multiplier)}))`;
      });
      r2.forEach((value, index) => {
        let val = data.rotate[index] * Math.abs(progress * multiplier);
        r2[index] = val;
      });
      slideEl.style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;
      const translateString = t2.join(", ");
      const rotateString = `rotateX(${rotateFix(r2[0])}deg) rotateY(${rotateFix(r2[1])}deg) rotateZ(${rotateFix(r2[2])}deg)`;
      const scaleString = originalProgress < 0 ? `scale(${1 + (1 - data.scale) * originalProgress * multiplier})` : `scale(${1 - (1 - data.scale) * originalProgress * multiplier})`;
      const opacityString = originalProgress < 0 ? 1 + (1 - data.opacity) * originalProgress * multiplier : 1 - (1 - data.opacity) * originalProgress * multiplier;
      const transform = `translate3d(${translateString}) ${rotateString} ${scaleString}`;
      if (custom && data.shadow || !custom) {
        let shadowEl = slideEl.querySelector(".swiper-slide-shadow");
        if (!shadowEl && data.shadow) {
          shadowEl = createShadow("creative", slideEl);
        }
        if (shadowEl) {
          const shadowOpacity = params.shadowPerProgress ? progress * (1 / params.limitProgress) : progress;
          shadowEl.style.opacity = Math.min(Math.max(Math.abs(shadowOpacity), 0), 1);
        }
      }
      const targetEl = effectTarget(params, slideEl);
      targetEl.style.transform = transform;
      targetEl.style.opacity = opacityString;
      if (data.origin) {
        targetEl.style.transformOrigin = data.origin;
      }
    }
  };
  const setTransition = (duration) => {
    const transformElements = swiper.slides.map((slideEl) => getSlideTransformEl(slideEl));
    transformElements.forEach((el) => {
      el.style.transitionDuration = `${duration}ms`;
      el.querySelectorAll(".swiper-slide-shadow").forEach((shadowEl) => {
        shadowEl.style.transitionDuration = `${duration}ms`;
      });
    });
    effectVirtualTransitionEnd({
      swiper,
      duration,
      transformElements,
      allSlides: true
    });
  };
  effectInit({
    effect: "creative",
    swiper,
    on,
    setTranslate,
    setTransition,
    perspective: () => swiper.params.creativeEffect.perspective,
    overwriteParams: () => ({
      watchSlidesProgress: true,
      virtualTranslate: !swiper.params.cssMode
    })
  });
}
function EffectCards(_ref) {
  let {
    swiper,
    extendParams,
    on
  } = _ref;
  extendParams({
    cardsEffect: {
      slideShadows: true,
      rotate: true,
      perSlideRotate: 2,
      perSlideOffset: 8
    }
  });
  const setTranslate = () => {
    const {
      slides,
      activeIndex,
      rtlTranslate: rtl
    } = swiper;
    const params = swiper.params.cardsEffect;
    const {
      startTranslate,
      isTouched
    } = swiper.touchEventsData;
    const currentTranslate = rtl ? -swiper.translate : swiper.translate;
    for (let i2 = 0; i2 < slides.length; i2 += 1) {
      const slideEl = slides[i2];
      const slideProgress = slideEl.progress;
      const progress = Math.min(Math.max(slideProgress, -4), 4);
      let offset = slideEl.swiperSlideOffset;
      if (swiper.params.centeredSlides && !swiper.params.cssMode) {
        swiper.wrapperEl.style.transform = `translateX(${swiper.minTranslate()}px)`;
      }
      if (swiper.params.centeredSlides && swiper.params.cssMode) {
        offset -= slides[0].swiperSlideOffset;
      }
      let tX = swiper.params.cssMode ? -offset - swiper.translate : -offset;
      let tY = 0;
      const tZ = -100 * Math.abs(progress);
      let scale = 1;
      let rotate = -params.perSlideRotate * progress;
      let tXAdd = params.perSlideOffset - Math.abs(progress) * 0.75;
      const slideIndex = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.from + i2 : i2;
      const isSwipeToNext = (slideIndex === activeIndex || slideIndex === activeIndex - 1) && progress > 0 && progress < 1 && (isTouched || swiper.params.cssMode) && currentTranslate < startTranslate;
      const isSwipeToPrev = (slideIndex === activeIndex || slideIndex === activeIndex + 1) && progress < 0 && progress > -1 && (isTouched || swiper.params.cssMode) && currentTranslate > startTranslate;
      if (isSwipeToNext || isSwipeToPrev) {
        const subProgress = (1 - Math.abs((Math.abs(progress) - 0.5) / 0.5)) ** 0.5;
        rotate += -28 * progress * subProgress;
        scale += -0.5 * subProgress;
        tXAdd += 96 * subProgress;
        tY = `${-25 * subProgress * Math.abs(progress)}%`;
      }
      if (progress < 0) {
        tX = `calc(${tX}px ${rtl ? "-" : "+"} (${tXAdd * Math.abs(progress)}%))`;
      } else if (progress > 0) {
        tX = `calc(${tX}px ${rtl ? "-" : "+"} (-${tXAdd * Math.abs(progress)}%))`;
      } else {
        tX = `${tX}px`;
      }
      if (!swiper.isHorizontal()) {
        const prevY = tY;
        tY = tX;
        tX = prevY;
      }
      const scaleString = progress < 0 ? `${1 + (1 - scale) * progress}` : `${1 - (1 - scale) * progress}`;
      const transform = `
        translate3d(${tX}, ${tY}, ${tZ}px)
        rotateZ(${params.rotate ? rtl ? -rotate : rotate : 0}deg)
        scale(${scaleString})
      `;
      if (params.slideShadows) {
        let shadowEl = slideEl.querySelector(".swiper-slide-shadow");
        if (!shadowEl) {
          shadowEl = createShadow("cards", slideEl);
        }
        if (shadowEl) shadowEl.style.opacity = Math.min(Math.max((Math.abs(progress) - 0.5) / 0.5, 0), 1);
      }
      slideEl.style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;
      const targetEl = effectTarget(params, slideEl);
      targetEl.style.transform = transform;
    }
  };
  const setTransition = (duration) => {
    const transformElements = swiper.slides.map((slideEl) => getSlideTransformEl(slideEl));
    transformElements.forEach((el) => {
      el.style.transitionDuration = `${duration}ms`;
      el.querySelectorAll(".swiper-slide-shadow").forEach((shadowEl) => {
        shadowEl.style.transitionDuration = `${duration}ms`;
      });
    });
    effectVirtualTransitionEnd({
      swiper,
      duration,
      transformElements
    });
  };
  effectInit({
    effect: "cards",
    swiper,
    on,
    setTranslate,
    setTransition,
    perspective: () => true,
    overwriteParams: () => ({
      _loopSwapReset: false,
      watchSlidesProgress: true,
      loopAdditionalSlides: swiper.params.cardsEffect.rotate ? 3 : 2,
      centeredSlides: true,
      virtualTranslate: !swiper.params.cssMode
    })
  });
}
const modules = [Virtual, Keyboard, Mousewheel, Navigation, Pagination, Scrollbar, Parallax, Zoom, Controller, A11y, History, HashNavigation, Autoplay, Thumb, freeMode, Grid, Manipulation, EffectFade, EffectCube, EffectFlip, EffectCoverflow, EffectCreative, EffectCards];
Swiper.use(modules);
new Swiper(".reviews-prev__slider", {
  // Стрелки
  navigation: {
    nextEl: ".swiper-button-next",
    prevEl: ".swiper-button-prev"
  },
  pagination: {
    el: ".swiper-pagination",
    clickable: true
  },
  /*Скорость переключения слайдов*/
  speed: 700,
  /*Отступ у карточек*/
  spaceBetween: 10,
  /*Показывать по n карточек*/
  slidesPerView: 1.2,
  /* При достижении конца, перепрыгнуть в начало */
  rewind: true,
  /*Ленивая подгрузка */
  lazy: true,
  /*Бесконечная прокрутка */
  loop: true,
  /*иконка захвата при наведении на слайд*/
  grabCursor: true,
  /*Автоматическое перелистывание*/
  autoplay: {
    delay: 3e3,
    // Интервал между слайдами (3 сек)
    disableOnInteraction: false,
    // Не отключать автопрокрутку после ручного перелистывания
    pauseOnMouseEnter: true
    // Пауза при наведении (по умолчанию false в новых версиях)
  },
  /*Брек-поинты*/
  breakpoints: {
    1440: {
      slidesPerView: 4,
      spaceBetween: 20
    },
    1200: {
      slidesPerView: 3,
      spaceBetween: 15
    },
    900: {
      slidesPerView: 2.3,
      spaceBetween: 15
    },
    600: {
      slidesPerView: 2,
      spaceBetween: 10
    }
  }
});
new Swiper(".team-prev__slider", {
  // Стрелки
  navigation: {
    nextEl: ".swiper-button-next",
    prevEl: ".swiper-button-prev"
  },
  pagination: {
    el: ".swiper-pagination",
    clickable: true
  },
  /*Скорость переключения слайдов*/
  speed: 700,
  /*Отступ у карточек*/
  spaceBetween: 10,
  /*Показывать по n карточек*/
  slidesPerView: 1.2,
  /* При достижении конца, перепрыгнуть в начало */
  rewind: true,
  /*Ленивая подгрузка */
  lazy: true,
  /*Бесконечная прокрутка */
  loop: true,
  /*иконка захвата при наведении на слайд*/
  grabCursor: true,
  /*Автоматическое перелистывание*/
  autoplay: {
    delay: 3e3,
    // Интервал между слайдами (3 сек)
    disableOnInteraction: false,
    // Не отключать автопрокрутку после ручного перелистывания
    pauseOnMouseEnter: true
    // Пауза при наведении (по умолчанию false в новых версиях)
  },
  /*Брек-поинты*/
  breakpoints: {
    1440: {
      slidesPerView: 4,
      spaceBetween: 20
    },
    1200: {
      slidesPerView: 3,
      spaceBetween: 15
    },
    900: {
      slidesPerView: 2.3,
      spaceBetween: 15
    },
    600: {
      slidesPerView: 2,
      spaceBetween: 10
    }
  }
});
/*! License details at fancyapps.com/license */
const t$8 = (t2) => "string" == typeof t2;
/*! License details at fancyapps.com/license */
const n$8 = (n2) => n2 && null !== n2 && n2 instanceof Element && "nodeType" in n2;
/*! License details at fancyapps.com/license */
const e$9 = function(e2) {
  if (!(e2 && e2 instanceof Element && e2.offsetParent)) return false;
  const n2 = e2.scrollHeight > e2.clientHeight, t2 = window.getComputedStyle(e2).overflowY, o2 = -1 !== t2.indexOf("hidden"), i2 = -1 !== t2.indexOf("visible");
  return n2 && !o2 && !i2;
}, n$7 = function(t2, o2 = void 0) {
  return !t2 || t2 === document.body || o2 && t2 === o2 ? null : e$9(t2) ? t2 : n$7(t2.parentElement, o2);
};
/*! License details at fancyapps.com/license */
const e$8 = function(e2) {
  var t2 = new DOMParser().parseFromString(e2, "text/html").body;
  if (t2.childElementCount > 1) {
    for (var n2 = document.createElement("div"); t2.firstChild; ) n2.appendChild(t2.firstChild);
    return n2;
  }
  let r2 = t2.firstChild;
  return !r2 || r2 instanceof HTMLElement ? r2 : ((n2 = document.createElement("div")).appendChild(r2), n2);
};
/*! License details at fancyapps.com/license */
const t$7 = function(t2 = 0, n2 = 0, a2 = 0) {
  return Math.max(Math.min(n2, a2), t2);
};
/*! License details at fancyapps.com/license */
const t$6 = (t2) => "object" == typeof t2 && null !== t2 && t2.constructor === Object && "[object Object]" === Object.prototype.toString.call(t2);
/*! License details at fancyapps.com/license */
function e$7(e2) {
  return t$6(e2) || Array.isArray(e2);
}
function n$6(t2, r2) {
  const o2 = Object.keys(t2), c2 = Object.keys(r2);
  return o2.length === c2.length && o2.every(((o3) => {
    const c3 = t2[o3], i2 = r2[o3];
    return "function" == typeof c3 ? `${c3}` == `${i2}` : e$7(c3) && e$7(i2) ? n$6(c3, i2) : c3 === i2;
  }));
}
/*! License details at fancyapps.com/license */
const e$6 = function(n2) {
  for (const t2 of s$9) t2.getState() === i$6.Running && t2.tick(a$7 ? n2 - a$7 : 0);
  a$7 = n2, u$4 = window.requestAnimationFrame(e$6);
};
var i$6, o$5, r$5;
!(function(n2) {
  n2[n2.Initializing = 0] = "Initializing", n2[n2.Running = 1] = "Running", n2[n2.Paused = 2] = "Paused", n2[n2.Completed = 3] = "Completed", n2[n2.Destroyed = 4] = "Destroyed";
})(i$6 || (i$6 = {})), (function(n2) {
  n2[n2.Spring = 0] = "Spring", n2[n2.Ease = 1] = "Ease";
})(o$5 || (o$5 = {})), (function(n2) {
  n2[n2.Loop = 0] = "Loop", n2[n2.Reverse = 1] = "Reverse";
})(r$5 || (r$5 = {}));
const s$9 = /* @__PURE__ */ new Set();
let u$4 = null, a$7 = 0;
function c$2() {
  let a2 = i$6.Initializing, f2 = o$5.Ease, l2 = 0, g2 = 0, p2 = c$2.Easings.Linear, m2 = 500, d2 = 0, b2 = 0, S = 0, h2 = 0, y2 = 1 / 0, E2 = 0.01, R2 = 0.01, M2 = false, j = {}, w2 = null, v2 = {}, O2 = {}, C = {}, L = 0, I2 = 0, D2 = r$5.Loop, z2 = c$2.Easings.Linear;
  const N = /* @__PURE__ */ new Map();
  function V(n2, ...t2) {
    for (const e2 of N.get(n2) || []) e2(...t2);
  }
  function q(n2) {
    return g2 = 0, n2 ? w2 = setTimeout((() => {
      x2();
    }), n2) : x2(), F;
  }
  function x2() {
    a2 = i$6.Running, V("start", v2, O2);
  }
  function A2() {
    if (a2 = i$6.Completed, C = {}, V("end", v2), a2 === i$6.Completed) if (l2 < L) {
      if (l2++, D2 === r$5.Reverse) {
        const n2 = Object.assign({}, j);
        j = Object.assign({}, O2), O2 = n2;
      }
      q(I2);
    } else l2 = 0;
    return F;
  }
  const F = { getState: function() {
    return a2;
  }, easing: function(n2) {
    return p2 = n2, f2 = o$5.Ease, C = {}, F;
  }, duration: function(n2) {
    return m2 = n2, F;
  }, spring: function(n2 = {}) {
    f2 = o$5.Spring;
    const t2 = { velocity: 0, mass: 1, tension: 170, friction: 26, restDelta: 0.1, restSpeed: 0.1, maxSpeed: 1 / 0, clamp: true }, { velocity: e2, mass: i2, tension: r2, friction: s2, restDelta: u2, restSpeed: a3, maxSpeed: c2, clamp: l3 } = Object.assign(Object.assign({}, t2), n2);
    return d2 = e2, b2 = i2, S = r2, h2 = s2, R2 = u2, E2 = a3, y2 = c2, M2 = l3, C = {}, F;
  }, isRunning: function() {
    return a2 === i$6.Running;
  }, isSpring: function() {
    return f2 === o$5.Spring;
  }, from: function(n2) {
    return v2 = Object.assign({}, n2), F;
  }, to: function(n2) {
    return O2 = n2, F;
  }, repeat: function(n2, t2 = 0, e2 = r$5.Loop, i2) {
    return L = n2, I2 = t2, D2 = e2, z2 = i2 || p2, F;
  }, on: function(n2, t2) {
    var e2, i2;
    return e2 = n2, i2 = t2, N.set(e2, [...N.get(e2) || [], i2]), F;
  }, off: function(n2, t2) {
    var e2, i2;
    return e2 = n2, i2 = t2, N.has(e2) && N.set(e2, N.get(e2).filter(((n3) => n3 !== i2))), F;
  }, start: function(n2) {
    return a2 = i$6.Initializing, j = Object.assign({}, v2), n$6(j, O2) || (s$9.add(this), u$4 || (u$4 = window.requestAnimationFrame(e$6)), q(n2)), F;
  }, pause: function() {
    return w2 && (clearTimeout(w2), w2 = null), a2 === i$6.Running && (a2 = i$6.Paused, V("pause", v2)), F;
  }, end: A2, tick: function(e2) {
    e2 > 50 && (e2 = 50), g2 += e2;
    let s2 = 0, u2 = false;
    if (a2 !== i$6.Running) return F;
    if (f2 === o$5.Ease) {
      s2 = t$7(0, g2 / m2, 1), u2 = 1 === s2;
      const t2 = D2 === r$5.Reverse ? z2 : p2;
      for (const n2 in v2) v2[n2] = j[n2] + (O2[n2] - j[n2]) * t2(s2);
    }
    if (f2 === o$5.Spring) {
      const t2 = 1e-3 * e2;
      let i2 = 0;
      for (const e3 in v2) {
        const o2 = O2[e3];
        let r2 = v2[e3];
        if ("number" != typeof o2 || isNaN(o2) || "number" != typeof r2 || isNaN(r2)) continue;
        if (Math.abs(o2 - r2) <= R2) {
          v2[e3] = o2, C[e3] = 0;
          continue;
        }
        C[e3] || ("object" == typeof d2 && "number" == typeof d2[e3] ? C[e3] = d2[e3] : C[e3] = "number" == typeof d2 ? d2 : 0);
        let s3 = C[e3];
        s3 = t$7(-1 * Math.abs(y2), s3, Math.abs(y2));
        const u3 = s3 * b2 * h2;
        s3 += ((r2 > o2 ? -1 : 1) * (Math.abs(o2 - r2) * S) - u3) / b2 * t2, r2 += s3 * t2;
        const a3 = v2[e3] > o2 ? r2 < o2 : r2 > o2;
        let c3 = Math.abs(s3) < E2 && Math.abs(o2 - r2) <= R2;
        M2 && a3 && (c3 = true), c3 ? (r2 = o2, s3 = 0) : i2++, v2[e3] = r2, C[e3] = s3;
      }
      u2 = !i2;
    }
    const c2 = Object.assign({}, O2);
    return V("step", v2, j, O2, s2), u2 && a2 === i$6.Running && n$6(O2, c2) && (a2 = i$6.Completed, A2()), F;
  }, getStartValues: function() {
    return j;
  }, getCurrentValues: function() {
    return v2;
  }, getCurrentVelocities: function() {
    return C;
  }, getEndValues: function() {
    return O2;
  }, destroy: function() {
    a2 = i$6.Destroyed, w2 && (clearTimeout(w2), w2 = null), j = v2 = O2 = {}, s$9.delete(this);
  } };
  return F;
}
c$2.destroy = () => {
  for (const n2 of s$9) n2.destroy();
  u$4 && (cancelAnimationFrame(u$4), u$4 = null);
}, c$2.Easings = { Linear: function(n2) {
  return n2;
}, EaseIn: function(n2) {
  return 0 === n2 ? 0 : Math.pow(2, 10 * n2 - 10);
}, EaseOut: function(n2) {
  return 1 === n2 ? 1 : 1 - Math.pow(2, -10 * n2);
}, EaseInOut: function(n2) {
  return 0 === n2 ? 0 : 1 === n2 ? 1 : n2 < 0.5 ? Math.pow(2, 20 * n2 - 10) / 2 : (2 - Math.pow(2, -20 * n2 + 10)) / 2;
} };
/*! License details at fancyapps.com/license */
function e$5(e2) {
  const t2 = [], n2 = "undefined" != typeof TouchEvent && e2 instanceof TouchEvent ? e2.touches : e2 instanceof MouseEvent && "mouseup" !== e2.type ? [e2] : [];
  for (const e3 of n2) t2.push({ x: e3.clientX, y: e3.clientY, ts: Date.now() });
  return t2;
}
function t$5(e2) {
  const t2 = [], n2 = "undefined" != typeof TouchEvent && e2 instanceof TouchEvent ? e2.changedTouches : e2 instanceof MouseEvent ? [e2] : [];
  for (const e3 of n2) t2.push({ x: e3.clientX, y: e3.clientY, ts: Date.now() });
  return t2;
}
function n$5(e2) {
  const t2 = e2[0], n2 = e2[1] || t2;
  return { x: (t2.x + n2.x) / 2, y: (t2.y + n2.y) / 2, ts: n2.ts };
}
function o$4(e2) {
  const t2 = e2[0], n2 = e2[1] || e2[0];
  return t2 && n2 ? -1 * Math.sqrt((n2.x - t2.x) * (n2.x - t2.x) + (n2.y - t2.y) * (n2.y - t2.y)) : 0;
}
const s$8 = (e2) => {
  e2.cancelable && e2.preventDefault();
}, i$5 = { passive: false }, c$1 = { panThreshold: 5, swipeThreshold: 3, ignore: ["textarea", "input", "select", "[contenteditable]", "[data-selectable]", "[data-draggable]"] };
let a$6 = false, r$4 = true;
const u$3 = (u2, l2) => {
  let d2, f2, h2, v2 = Object.assign(Object.assign({}, c$1), l2), p2 = [], m2 = [], E2 = [], g2 = false, w2 = false, y2 = false, T2 = 0, b2 = 0, M2 = 0, x2 = 0, L = 0, P = 0, D2 = 0, X = 0, Y = 0, j = [], k2 = 0, R2 = 0;
  const z2 = /* @__PURE__ */ new Map();
  function A2(e2) {
    const t2 = o$4(m2), n2 = o$4(E2), s2 = t2 && n2 ? t2 / n2 : 0, i2 = Math.abs(D2) > Math.abs(X) ? D2 : X, c2 = { srcEvent: d2, isPanRecognized: g2, isSwipeRecognized: w2, firstTouch: p2, previousTouch: E2, currentTouch: m2, deltaX: M2, deltaY: x2, offsetX: L, offsetY: P, velocityX: D2, velocityY: X, velocity: i2, angle: Y, axis: h2, scale: s2, center: f2 };
    for (const t3 of z2.get(e2) || []) t3(c2);
  }
  function O2(e2) {
    const t2 = Date.now();
    j = j.filter(((e3) => !e3.ts || e3.ts > t2 - 100)), e2 && j.push(e2);
  }
  function S() {
    if (D2 = 0, X = 0, j.length > 3) {
      const e2 = j[0], t2 = j[j.length - 1];
      if (e2 && t2) {
        const n2 = t2.x - e2.x, o2 = t2.y - e2.y, s2 = e2.ts && t2.ts ? t2.ts - e2.ts : 0;
        s2 > 0 && (D2 = Math.abs(n2) > 3 ? n2 / (s2 / 30) : 0, X = Math.abs(o2) > 3 ? o2 / (s2 / 30) : 0);
      }
    }
  }
  function q(t2) {
    if (t2 instanceof MouseEvent) {
      if (a$6) return;
    } else a$6 = true;
    const o2 = t2.composedPath()[0], i2 = v2.ignore.join(",");
    if (o2.matches(i2) || o2.closest(i2)) return;
    if ("undefined" != typeof MouseEvent && t2 instanceof MouseEvent && (!t2.buttons || 0 !== t2.button)) return;
    t2 instanceof MouseEvent && s$8(t2);
    const c2 = Date.now(), r2 = c2 - (T2 || c2);
    y2 = r2 > 0 && r2 <= 250, T2 = c2, clearTimeout(k2), d2 = t2, t2 instanceof MouseEvent && (window.addEventListener("mousemove", C), window.addEventListener("mouseup", I2)), window.addEventListener("blur", B), m2 = e$5(t2), p2 = [...m2], E2 = [], b2 = m2.length, f2 = n$5(m2), 1 === b2 && (g2 = false, w2 = false), b2 && O2(n$5(m2)), A2("start");
  }
  function C(t2) {
    var s2;
    if (!p2.length) return;
    if (t2.defaultPrevented) return;
    d2 = t2, E2 = [...m2], m2 = e$5(t2), b2 = m2.length, f2 = n$5(m2);
    const i2 = f2, c2 = n$5(E2);
    if (M2 = i2.x - c2.x, x2 = i2.y - c2.y, O2(i2), S(), A2("move"), m2.length > 1) {
      const e2 = o$4(m2), t3 = o$4(E2);
      Math.abs(e2 - t3) >= 0.1 && A2("pinch");
    }
    if (!g2 && p2.length) {
      const e2 = n$5(p2);
      L = i2.x - e2.x, P = i2.y - e2.y, g2 = Math.abs(L) > v2.panThreshold || Math.abs(P) > v2.panThreshold, g2 && (r$4 = false, clearTimeout(R2), R2 = 0, Y = Math.abs(180 * Math.atan2(P, L) / Math.PI), h2 = Y > 45 && Y < 135 ? "y" : "x", p2 = [...m2], E2 = [...m2], null === (s2 = window.getSelection()) || void 0 === s2 || s2.removeAllRanges(), A2("panstart"));
    }
    g2 && (M2 || x2) && A2("pan");
  }
  function I2(o2) {
    if (d2 = o2, !p2.length) return;
    const s2 = e$5(o2), i2 = t$5(o2);
    if (b2 = s2.length, f2 = n$5(i2), i2.length && O2(n$5(i2)), S(), E2 = [...m2], m2 = [...s2], p2 = [...s2], s2.length > 0) A2("end"), g2 = false, w2 = false, j = [];
    else {
      const e2 = v2.swipeThreshold;
      (Math.abs(D2) > e2 || Math.abs(X) > e2) && (w2 = true), g2 && A2("panend"), w2 && A2("swipe"), g2 || w2 || (A2("tap"), y2 ? A2("doubleTap") : k2 = setTimeout((function() {
        A2("singleTap");
      }), 250)), A2("end"), F();
    }
  }
  function B() {
    clearTimeout(k2), F(), g2 && A2("panend"), A2("end");
  }
  function F() {
    g2 = false, w2 = false, y2 = false, b2 = 0, j = [], m2 = [], E2 = [], p2 = [], M2 = 0, x2 = 0, L = 0, P = 0, D2 = 0, X = 0, Y = 0, h2 = void 0, window.removeEventListener("mousemove", C), window.removeEventListener("mouseup", I2), window.removeEventListener("blur", B), r$4 || R2 || (R2 = setTimeout((() => {
      r$4 = true, R2 = 0;
    }), 100));
  }
  function G(e2) {
    const t2 = e2.target;
    a$6 = false, t2 && !e2.defaultPrevented && (r$4 || (s$8(e2), e2.stopPropagation()));
  }
  const H = { init: function() {
    if (u2) return u2.addEventListener("click", G, i$5), u2.addEventListener("mousedown", q, i$5), u2.addEventListener("touchstart", q, i$5), u2.addEventListener("touchmove", C, i$5), u2.addEventListener("touchend", I2), u2.addEventListener("touchcancel", I2), H;
  }, on: function(e2, t2) {
    return (function(e3, t3) {
      z2.set(e3, [...z2.get(e3) || [], t3]);
    })(e2, t2), H;
  }, off: function(e2, t2) {
    return z2.has(e2) && z2.set(e2, z2.get(e2).filter(((e3) => e3 !== t2))), H;
  }, isPointerDown: () => b2 > 0, destroy: function() {
    clearTimeout(k2), clearTimeout(R2), R2 = 0, u2 && (u2.removeEventListener("click", G, i$5), u2.removeEventListener("mousedown", q, i$5), u2.removeEventListener("touchstart", q, i$5), u2.removeEventListener("touchmove", C, i$5), u2.removeEventListener("touchend", I2), u2.removeEventListener("touchcancel", I2)), u2 = null, F();
  } };
  return H;
};
u$3.isClickAllowed = () => r$4;
/*! License details at fancyapps.com/license */
const o$3 = { IMAGE_ERROR: "This image couldn't be loaded. <br /> Please try again later.", MOVE_UP: "Move up", MOVE_DOWN: "Move down", MOVE_LEFT: "Move left", MOVE_RIGHT: "Move right", ZOOM_IN: "Zoom in", ZOOM_OUT: "Zoom out", TOGGLE_FULL: "Toggle zoom level", TOGGLE_1TO1: "Toggle zoom level", ITERATE_ZOOM: "Toggle zoom level", ROTATE_CCW: "Rotate counterclockwise", ROTATE_CW: "Rotate clockwise", FLIP_X: "Flip horizontally", FLIP_Y: "Flip vertically", RESET: "Reset" };
/*! License details at fancyapps.com/license */
const s$7 = (s2, t2 = "") => {
  s2 && s2.classList && t2.split(" ").forEach(((t3) => {
    t3 && s2.classList.add(t3);
  }));
};
/*! License details at fancyapps.com/license */
const f = (e2) => {
  e2.cancelable && e2.preventDefault();
}, d = (e2, t2 = 1e4) => (e2 = parseFloat(e2 + "") || 0, Math.round((e2 + Number.EPSILON) * t2) / t2);
var g$1, h$1;
!(function(e2) {
  e2.Reset = "reset", e2.Zoom = "zoom", e2.ZoomIn = "zoomIn", e2.ZoomOut = "zoomOut", e2.ZoomTo = "zoomTo", e2.ToggleCover = "toggleCover", e2.ToggleFull = "toggleFull", e2.ToggleMax = "toggleMax", e2.IterateZoom = "iterateZoom", e2.Pan = "pan", e2.Swipe = "swipe", e2.Move = "move", e2.MoveLeft = "moveLeft", e2.MoveRight = "moveRight", e2.MoveUp = "moveUp", e2.MoveDown = "moveDown", e2.RotateCCW = "rotateCCW", e2.RotateCW = "rotateCW", e2.FlipX = "flipX", e2.FlipY = "flipY";
})(g$1 || (g$1 = {})), (function(e2) {
  e2.Cover = "cover", e2.Full = "full", e2.Max = "max";
})(h$1 || (h$1 = {}));
const m$1 = { x: 0, y: 0, scale: 1, angle: 0, flipX: 1, flipY: 1 }, p = { bounds: true, classes: { container: "f-panzoom", wrapper: "f-panzoom__wrapper", content: "f-panzoom__content", viewport: "f-panzoom__viewport" }, clickAction: g$1.ToggleFull, dblClickAction: false, gestures: {}, height: "auto", l10n: o$3, maxScale: 4, minScale: 1, mouseMoveFactor: 1, panMode: "drag", protected: false, singleClickAction: false, spinnerTpl: '<div class="f-spinner"></div>', wheelAction: g$1.Zoom, width: "auto" };
let v, b$1 = 0, y = 0, x = 0;
const w = (c2, h2 = {}, w2 = {}) => {
  let M2, E2, T2, k2, L, j, O2, A2 = 0, C = Object.assign(Object.assign({}, p), h2), S = {}, F = Object.assign({}, m$1), Z = Object.assign({}, m$1);
  const X = [];
  function Y(e2) {
    let t2 = C[e2];
    return t2 && "function" == typeof t2 ? t2(ge) : t2;
  }
  const P = /* @__PURE__ */ new Map();
  function I2(e2, ...t2) {
    const n2 = [...P.get(e2) || []];
    C.on && n2.push(C.on[e2]);
    for (const e3 of n2) e3 && e3 instanceof Function && e3(ge, ...t2);
    "*" !== e2 && I2("*", e2, ...t2);
  }
  function R2(e2) {
    if (3 !== A2) return;
    const t2 = e2.target;
    if (n$7(t2)) return;
    const i2 = Date.now(), a2 = [-e2.deltaX || 0, -e2.deltaY || 0, -e2.detail || 0].reduce((function(e3, t3) {
      return Math.abs(t3) > Math.abs(e3) ? t3 : e3;
    })), s2 = t$7(-1, a2, 1);
    I2("wheel", e2, s2);
    const l2 = Y("wheelAction");
    if (!l2) return;
    if (e2.defaultPrevented) return;
    const r2 = Z.scale;
    let c3 = r2 * (s2 > 0 ? 1.5 : 0.5);
    if (l2 === g$1.Zoom) {
      const t3 = Math.abs(e2.deltaY) < 100 && Math.abs(e2.deltaX) < 100;
      if (i2 - y < (t3 ? 200 : 45)) return void f(e2);
      y = i2;
      const n2 = V(), a3 = K();
      if (d(c3) < d(n2) && d(r2) <= d(n2) ? (x += Math.abs(s2), c3 = n2) : d(c3) > d(a3) && d(r2) >= d(a3) ? (x += Math.abs(s2), c3 = a3) : (x = 0, c3 = t$7(n2, c3, a3)), x > 7) return;
    }
    switch (f(e2), l2) {
      case g$1.Pan:
        ne(l2, { srcEvent: e2, deltaX: 2 * -e2.deltaX, deltaY: 2 * -e2.deltaY });
        break;
      case g$1.Zoom:
        ne(g$1.ZoomTo, { srcEvent: e2, scale: c3, center: { x: e2.clientX, y: e2.clientY } });
        break;
      default:
        ne(l2, { srcEvent: e2 });
    }
  }
  function z2(e2) {
    var n2, i2;
    const o2 = e2.composedPath()[0];
    if (!u$3.isClickAllowed()) return;
    if (!n$8(o2) || e2.defaultPrevented) return;
    if (!(null == c2 ? void 0 : c2.contains(o2))) return;
    if (o2.hasAttribute("disabled") || o2.hasAttribute("aria-disabled")) return;
    const a2 = o2.closest("[data-panzoom-action]"), s2 = null === (n2 = null == a2 ? void 0 : a2.dataset) || void 0 === n2 ? void 0 : n2.panzoomAction, l2 = (null === (i2 = null == a2 ? void 0 : a2.dataset) || void 0 === i2 ? void 0 : i2.panzoomValue) || "";
    if (s2) {
      switch (s2) {
        case g$1.ZoomTo:
        case g$1.ZoomIn:
        case g$1.ZoomOut:
          ne(s2, { scale: parseFloat(l2 || "") || void 0 });
          break;
        case g$1.MoveLeft:
        case g$1.MoveRight:
          ne(s2, { deltaX: parseFloat(l2 || "") || void 0 });
          break;
        case g$1.MoveUp:
        case g$1.MoveDown:
          ne(s2, { deltaY: parseFloat(l2 || "") || void 0 });
          break;
        default:
          ne(s2);
      }
      return;
    }
    if (!(null == M2 ? void 0 : M2.contains(o2))) return;
    const u2 = { srcEvent: e2 };
    if (ne(Y("clickAction"), u2), Y("dblClickAction")) {
      const e3 = Date.now(), t2 = e3 - (b$1 || e3);
      b$1 = e3, t2 > 0 && t2 <= 250 ? (v && (clearTimeout(v), v = void 0), ne(Y("dblClickAction"), u2)) : v = setTimeout((() => {
        ne(Y("singleClickAction"), u2);
      }), 250);
    }
  }
  function D2(e2) {
    if (O2 = e2, !_2()) return;
    if (3 !== A2 || F.scale <= 1 || Z.scale <= 1) return;
    if (((null == M2 ? void 0 : M2.dataset.animationName) || "").indexOf("zoom") > -1) return;
    const t2 = B(Z.scale);
    if (!t2) return;
    const { x: n2, y: i2 } = t2;
    ne(g$1.Pan, { deltaX: n2 - Z.x, deltaY: i2 - Z.y });
  }
  function H() {
    var e2;
    c2 && (c2.classList.remove("is-loading"), null === (e2 = c2.querySelector(".f-spinner")) || void 0 === e2 || e2.remove());
  }
  function W() {
    if (!c2 || !M2) return;
    if (E2 instanceof HTMLImageElement && (!E2.complete || !E2.naturalWidth)) return H(), A2 = 2, null == M2 || M2.classList.add("has-error"), void I2("error");
    I2("loaded");
    const { width: e2, height: t2 } = $();
    E2 && (E2.setAttribute("width", e2 + ""), E2.setAttribute("height", t2 + "")), M2 && (M2.classList.remove("has-error"), M2.setAttribute("width", e2 + ""), M2.setAttribute("height", t2 + ""), M2.style.aspectRatio = `${e2 / t2 || ""}`), L = c$2().on("start", ((e3, t3) => {
      Z = Object.assign(Object.assign({}, m$1), t3), void 0 !== t3.angle && (t3.angle = 90 * Math.round(t3.angle / 90)), void 0 !== t3.flipX && (t3.flipX = t3.flipX > 0 ? 1 : -1), void 0 !== t3.flipY && (t3.flipY = t3.flipY > 0 ? 1 : -1), te(), I2("animationStart");
    })).on("pause", ((e3) => {
      Z = Object.assign(Object.assign({}, m$1), e3);
    })).on("step", ((e3) => {
      if (3 !== A2) return;
      if (!L) return;
      if (!c2 || !c2.parentElement) return void L.end();
      if (F = Object.assign(Object.assign({}, m$1), e3), _2() || !Y("bounds") || (null == k2 ? void 0 : k2.isPointerDown()) || Z.scale > F.scale || Z.scale < U()) return void ie();
      const t3 = Q(Z.scale);
      let n3 = false, i2 = false, a2 = false, s2 = false;
      F.x < t3.x[0] && (n3 = true), F.x > t3.x[1] && (i2 = true), F.y < t3.y[0] && (s2 = true), F.y > t3.y[1] && (a2 = true);
      let l2 = false, r2 = false, u2 = false, f2 = false;
      Z.x < t3.x[0] && (l2 = true), Z.x > t3.x[1] && (r2 = true), Z.y < t3.y[0] && (f2 = true), Z.y > t3.y[1] && (u2 = true);
      let d2 = false;
      (i2 && r2 || n3 && l2) && (Z.x = t$7(t3.x[0], Z.x, t3.x[1]), d2 = true), (a2 && u2 || s2 && f2) && (Z.y = t$7(t3.y[0], Z.y, t3.y[1]), d2 = true), d2 && L.spring({ tension: 94, friction: 17, maxSpeed: 555 * Z.scale, restDelta: 0.1, restSpeed: 0.1, velocity: L.getCurrentVelocities() }).from(F).to(Z).start(), ie();
    })).on("end", (() => {
      ee(), (null == L ? void 0 : L.isRunning()) || (te(), I2("animationEnd"));
    })), (function() {
      const e3 = Y("gestures");
      e3 && T2 && E2 && (k2 = u$3(T2, e3).on("start", ((e4) => {
        if (!L) return;
        const t3 = e4.srcEvent;
        _2() || ((F.scale > 1 || e4.currentTouch.length > 1) && (null == t3 || t3.stopPropagation(), L.pause()), 1 === e4.currentTouch.length && I2("touchStart"));
      })).on("move", ((e4) => {
        _2() || (1 !== Z.scale || e4.currentTouch.length > 1) && (e4.srcEvent.preventDefault(), e4.srcEvent.stopPropagation());
      })).on("pan", ((e4) => {
        if (_2()) return;
        const t3 = e4.srcEvent;
        (1 !== Z.scale || e4.currentTouch.length > 1) && (f(t3), ne(g$1.Pan, e4));
      })).on("swipe", ((e4) => {
        _2() || Z.scale > 1 && ne(g$1.Swipe, e4);
      })).on("tap", ((e4) => {
        I2("click", e4);
      })).on("singleTap", ((e4) => {
        I2("singleClick", e4);
      })).on("doubleTap", ((e4) => {
        I2("dblClick", e4);
      })).on("pinch", ((e4) => {
        _2() || (e4.scale > U() ? ne(g$1.ZoomIn, e4) : e4.scale < U() ? ne(g$1.ZoomOut, e4) : ne(g$1.Pan, e4));
      })).on("end", ((e4) => {
        _2() || (e4.currentTouch.length ? (e4.srcEvent.stopPropagation(), f(e4.srcEvent), null == L || L.end()) : (te(), ee(), I2("touchEnd")));
      })).init());
    })(), T2 && (T2.addEventListener("wheel", R2, { passive: false }), X.push((() => {
      null == T2 || T2.removeEventListener("wheel", R2, { passive: false });
    }))), null == c2 || c2.addEventListener("click", z2), null === document || void 0 === document || document.addEventListener("mousemove", D2), X.push((() => {
      null == c2 || c2.removeEventListener("click", z2), null === document || void 0 === document || document.removeEventListener("mousemove", D2);
    }));
    const n2 = Object.assign(Object.assign({}, Y("startPos") || {}), { scale: U() });
    if (F = Object.assign(Object.assign({}, m$1), n2), Z = Object.assign(Object.assign({}, m$1), n2), _2()) {
      const e3 = B(Z.scale);
      if (e3) {
        const { x: t3, y: n3 } = e3;
        F.x = t3, F.y = n3, Z.x = t3, Z.y = n3;
      }
    }
    A2 = 3, ie(), te(), I2("ready"), requestAnimationFrame((() => {
      H(), T2 && (T2.style.visibility = "");
    }));
  }
  function q() {
    const e2 = { top: 0, left: 0, width: 0, height: 0 };
    if (M2) {
      const t2 = M2.getBoundingClientRect();
      Z.angle % 180 == 90 ? (e2.top = t2.top + 0.5 * t2.height - 0.5 * t2.width, e2.left = t2.left + 0.5 * t2.width - 0.5 * t2.height, e2.width = t2.height, e2.height = t2.width) : (e2.top = t2.top, e2.left = t2.left, e2.width = t2.width, e2.height = t2.height);
    }
    return e2;
  }
  function $() {
    let t2 = Y("width"), n2 = Y("height");
    if (E2 && "auto" === t2) {
      const e2 = E2.getAttribute("width");
      t2 = e2 ? parseFloat(e2 + "") : void 0 !== E2.dataset.width ? parseFloat(E2.dataset.width + "") : T2 instanceof HTMLImageElement ? T2.naturalWidth : E2 instanceof HTMLImageElement ? E2.naturalWidth : E2.getBoundingClientRect().width;
    } else t2 = t$8(t2) ? parseFloat(t2) : t2;
    if (E2 && "auto" === n2) {
      const e2 = E2.getAttribute("height");
      n2 = e2 ? parseFloat(e2 + "") : void 0 !== E2.dataset.height ? parseFloat(E2.dataset.height + "") : T2 instanceof HTMLImageElement ? T2.naturalHeight : E2 instanceof HTMLImageElement ? E2.naturalHeight : E2.getBoundingClientRect().height;
    } else n2 = t$8(n2) ? parseFloat(n2) : n2;
    return { width: t2, height: n2 };
  }
  function _2() {
    return "mousemove" === Y("panMode") && matchMedia("(hover: hover)").matches;
  }
  function B(e2) {
    const t2 = O2 || Y("event"), n2 = null == M2 ? void 0 : M2.getBoundingClientRect();
    if (!t2 || !n2 || e2 <= 1) return { x: 0, y: 0 };
    const i2 = (t2.clientX || 0) - n2.left, a2 = (t2.clientY || 0) - n2.top, s2 = n2.width, l2 = n2.height, r2 = Q(e2);
    if (e2 > 1) {
      const t3 = Y("mouseMoveFactor");
      t3 > 1 && (e2 *= t3);
    }
    let c3 = s2 * e2, u2 = l2 * e2, f2 = 0.5 * (c3 - s2) - i2 / s2 * 100 / 100 * (c3 - s2), d2 = 0.5 * (u2 - l2) - a2 / l2 * 100 / 100 * (u2 - l2);
    return f2 = t$7(r2.x[0], f2, r2.x[1]), d2 = t$7(r2.y[0], d2, r2.y[1]), { x: f2, y: d2 };
  }
  function N(e2 = "base") {
    if (!c2) return 1;
    const t2 = c2.getBoundingClientRect(), n2 = q(), { width: i2, height: a2 } = $(), s2 = (e3) => {
      if ("number" == typeof e3) return e3;
      switch (e3) {
        case "min":
        case "base":
          return 1;
        case "cover":
          return Math.max(t2.height / n2.height, t2.width / n2.width) || 1;
        case "full":
        case "max": {
          const e4 = Z.angle % 180 == 90 ? a2 : i2;
          return e4 && n2.width ? e4 / n2.width : 1;
        }
      }
    }, l2 = Y("minScale"), r2 = Y("maxScale"), u2 = Math.min(s2("full"), s2(l2)), f2 = "number" == typeof r2 ? s2("full") * r2 : Math.min(s2("full"), s2(r2));
    switch (e2) {
      case "min":
        return u2;
      case "base":
        return t$7(u2, 1, f2);
      case "cover":
        return s2("cover");
      case "full":
        return Math.min(f2, s2("full"));
      case "max":
        return f2;
    }
  }
  function V() {
    return N("min");
  }
  function U() {
    return N("base");
  }
  function G() {
    return N("cover");
  }
  function J() {
    return N("full");
  }
  function K() {
    return N("max");
  }
  function Q(e2) {
    const t2 = { x: [0, 0], y: [0, 0] }, n2 = null == c2 ? void 0 : c2.getBoundingClientRect();
    if (!n2) return t2;
    const i2 = q(), o2 = n2.width, a2 = n2.height;
    let s2 = i2.width, l2 = i2.height, r2 = e2 = void 0 === e2 ? Z.scale : e2, u2 = e2;
    if (_2() && e2 > 1) {
      const t3 = Y("mouseMoveFactor");
      t3 > 1 && (s2 * e2 > o2 + 0.01 && (r2 *= t3), l2 * e2 > a2 + 0.01 && (u2 *= t3));
    }
    return s2 *= r2, l2 *= u2, e2 > 1 && (s2 > o2 && (t2.x[0] = 0.5 * (o2 - s2), t2.x[1] = 0.5 * (s2 - o2)), t2.x[0] -= 0.5 * (i2.left - n2.left), t2.x[1] -= 0.5 * (i2.left - n2.left), t2.x[0] -= 0.5 * (i2.left + i2.width - n2.right), t2.x[1] -= 0.5 * (i2.left + i2.width - n2.right), l2 > a2 && (t2.y[0] = 0.5 * (a2 - l2), t2.y[1] = 0.5 * (l2 - a2)), t2.y[0] -= 0.5 * (i2.top - n2.top), t2.y[1] -= 0.5 * (i2.top - n2.top), t2.y[0] -= 0.5 * (i2.top + i2.height - n2.bottom), t2.y[1] -= 0.5 * (i2.top + i2.height - n2.bottom)), t2;
  }
  function ee() {
    if (!Y("bounds")) return;
    if (3 !== A2) return;
    if (!(null == c2 ? void 0 : c2.parentElement)) return;
    if (!L) return;
    const e2 = V(), t2 = K(), n2 = t$7(e2, Z.scale, t2);
    if (Z.scale < e2 - 0.01 || Z.scale > t2 + 0.01) return void ne(g$1.ZoomTo, { scale: n2 });
    if (L.isRunning()) return;
    if (null == k2 ? void 0 : k2.isPointerDown()) return;
    const i2 = Q(n2);
    Z.x < i2.x[0] || Z.x > i2.x[1] || Z.y < i2.y[0] || Z.y > i2.y[1] ? (Z.x = t$7(i2.x[0], Z.x, i2.x[1]), Z.y = t$7(i2.y[0], Z.y, i2.y[1]), L.spring({ tension: 170, friction: 17, restDelta: 1e-3, restSpeed: 1e-3, maxSpeed: 1 / 0, velocity: L.getCurrentVelocities() }), L.from(F).to(Z).start()) : ie();
  }
  function te() {
    if (!c2 || !c2.parentElement || !M2) return;
    const e2 = ce(), t2 = ue(), n2 = fe(), i2 = de(), o2 = ae(), a2 = se();
    M2.classList.toggle("is-fullsize", i2), M2.classList.toggle("is-expanded", n2), M2.classList.toggle("is-dragging", t2), M2.classList.toggle("can-drag", e2), M2.classList.toggle("will-zoom-in", o2), M2.classList.toggle("will-zoom-out", a2);
    const s2 = le(), l2 = re(), r2 = 3 !== A2;
    for (const e3 of (null == c2 ? void 0 : c2.querySelectorAll("[data-panzoom-action]")) || []) {
      const t3 = e3.dataset.panzoomAction;
      let n3 = false;
      if (r2) n3 = true;
      else switch (t3) {
        case g$1.ZoomIn:
          s2 || (n3 = true);
          break;
        case g$1.ZoomOut:
          l2 || (n3 = true);
          break;
        case g$1.ToggleFull:
          s2 || l2 || (n3 = true);
          const t4 = e3.querySelector("g");
          t4 && (t4.style.display = i2 ? "none" : "");
          break;
        case g$1.ToggleCover:
        case g$1.ToggleMax:
          s2 || l2 || (n3 = true);
      }
      n3 ? (e3.setAttribute("aria-disabled", ""), e3.setAttribute("tabindex", "-1")) : (e3.removeAttribute("aria-disabled"), e3.removeAttribute("tabindex"));
    }
  }
  function ne(e2, t2) {
    var n2;
    if (!c2 || !E2 || !L) return;
    if (e2 === g$1.Swipe && Math.abs(L.getCurrentVelocities().scale) > 0.01) return;
    let i2 = Object.assign({}, Z), a2 = Q(_2() ? Z.scale : F.scale);
    const r2 = L.getCurrentVelocities(), u2 = q(), f2 = ((null === (n2 = (t2 = t2 || {}).currentTouch) || void 0 === n2 ? void 0 : n2.length) || 0) > 1, d2 = t2.velocityX || 0, h3 = t2.velocityY || 0;
    let p2 = t2.center;
    !p2 && t2.srcEvent && (p2 = n$5(t$5(t2.srcEvent)));
    let v2 = t2.deltaX || 0, b2 = t2.deltaY || 0;
    switch (e2) {
      case g$1.MoveRight:
        v2 = t2.deltaX || 100;
        break;
      case g$1.MoveLeft:
        v2 = t2.deltaX || -100;
        break;
      case g$1.MoveUp:
        b2 = t2.deltaY || -100;
        break;
      case g$1.MoveDown:
        b2 = t2.deltaY || 100;
    }
    let y2 = [];
    switch (e2) {
      case g$1.Reset:
        Z = Object.assign({}, m$1), Z.scale = U();
        break;
      case g$1.Pan:
      case g$1.Move:
      case g$1.MoveLeft:
      case g$1.MoveRight:
      case g$1.MoveUp:
      case g$1.MoveDown:
        if (null == k2 ? void 0 : k2.isPointerDown()) {
          let e4 = 1, t3 = 1;
          Z.x <= a2.x[0] && d2 <= 0 && (e4 = Math.max(0.01, 1 - Math.abs(1 / u2.width * Math.abs(Z.x - a2.x[0]))), e4 *= 0.2), Z.x >= a2.x[1] && d2 >= 0 && (e4 = Math.max(0.01, 1 - Math.abs(1 / u2.width * Math.abs(Z.x - a2.x[1]))), e4 *= 0.2), Z.y <= a2.y[0] && h3 <= 0 && (t3 = Math.max(0.01, 1 - Math.abs(1 / u2.height * Math.abs(Z.y - a2.y[0]))), t3 *= 0.2), Z.y >= a2.y[1] && h3 >= 0 && (t3 = Math.max(0.01, 1 - Math.abs(1 / u2.height * Math.abs(Z.y - a2.y[1]))), t3 *= 0.2), Z.x += v2 * e4, Z.y += b2 * t3;
        } else Z.x = t$7(a2.x[0], Z.x + v2, a2.x[1]), Z.y = t$7(a2.y[0], Z.y + b2, a2.y[1]);
        break;
      case g$1.Swipe:
        const e3 = (e4 = 0) => Math.sign(e4) * Math.pow(Math.abs(e4), 1.5);
        Z.x += t$7(-1e3, e3(d2), 1e3), Z.y += t$7(-1e3, e3(h3), 1e3), h3 && !d2 && (Z.x = t$7(a2.x[0], Z.x, a2.x[1])), !h3 && d2 && (Z.y = t$7(a2.y[0], Z.y, a2.y[1])), r2.x = d2, r2.y = h3;
        break;
      case g$1.ZoomTo:
        Z.scale = t2.scale || 1;
        break;
      case g$1.ZoomIn:
        Z.scale = Z.scale * (t2.scale || 2), f2 || (Z.scale = Math.min(Z.scale, K()));
        break;
      case g$1.ZoomOut:
        Z.scale = Z.scale * (t2.scale || 0.5), f2 || (Z.scale = Math.max(Z.scale, V()));
        break;
      case g$1.ToggleCover:
        y2 = [U(), G()];
        break;
      case g$1.ToggleFull:
        y2 = [U(), J()];
        break;
      case g$1.ToggleMax:
        y2 = [U(), K()];
        break;
      case g$1.IterateZoom:
        y2 = [U(), J(), K()];
        break;
      case g$1.Zoom:
        const n3 = J();
        Z.scale >= n3 - 0.05 ? Z.scale = U() : Z.scale = Math.min(n3, Z.scale * (t2.scale || 2));
        break;
      case g$1.RotateCW:
        Z.angle += 90;
        break;
      case g$1.RotateCCW:
        Z.angle -= 90;
        break;
      case g$1.FlipX:
        Z.flipX *= -1;
        break;
      case g$1.FlipY:
        Z.flipY *= -1;
    }
    if (void 0 !== F.angle && Math.abs(F.angle) >= 360 && (Z.angle -= 360 * Math.floor(F.angle / 360), F.angle -= 360 * Math.floor(F.angle / 360)), y2.length) {
      const e3 = y2.findIndex(((e4) => e4 > Z.scale + 1e-4));
      Z.scale = y2[e3] || y2[0];
    }
    if (f2 && (Z.scale = t$7(V() * (f2 ? 0.8 : 1), Z.scale, K() * (f2 ? 1.6 : 1))), _2()) {
      const e3 = B(Z.scale);
      if (e3) {
        const { x: t3, y: n3 } = e3;
        Z.x = t3, Z.y = n3;
      }
    } else if (Z.scale !== i2.scale) {
      let e3 = 0, t3 = 0;
      if (p2) e3 = p2.x, t3 = p2.y;
      else {
        const n4 = c2.getBoundingClientRect();
        e3 = n4.x + 0.5 * n4.width, t3 = n4.y + 0.5 * n4.height;
      }
      let n3 = e3 - u2.left, s2 = t3 - u2.top;
      n3 -= 0.5 * u2.width, s2 -= 0.5 * u2.height;
      const l2 = (n3 - i2.x) / i2.scale, r3 = (s2 - i2.y) / i2.scale;
      Z.x = n3 - l2 * Z.scale, Z.y = s2 - r3 * Z.scale, !f2 && Y("bounds") && (a2 = Q(Z.scale), Z.x = t$7(a2.x[0], Z.x, a2.x[1]), Z.y = t$7(a2.y[0], Z.y, a2.y[1]));
    }
    if (e2 === g$1.Swipe) {
      let e3 = 94, t3 = 17, n3 = 500 * Z.scale, i3 = r2;
      L.spring({ tension: e3, friction: t3, maxSpeed: n3, restDelta: 0.1, restSpeed: 0.1, velocity: i3 });
    } else e2 === g$1.Pan || f2 ? L.spring({ tension: 750, friction: 17, restDelta: 0.01, restSpeed: 0.01, maxSpeed: 1 }) : L.spring({ tension: 170, friction: 17, restDelta: 1e-3, restSpeed: 1e-3, maxSpeed: 1 / 0, velocity: r2 });
    e2 === g$1.Reset && 0 === t2.velocity ? F = Object.assign({}, Z) : L.from(F).to(Z).start(), I2("action", e2);
  }
  function ie() {
    if (!M2 || !E2) return;
    if (E2 instanceof HTMLImageElement) {
      const { width: e3, height: t3 } = $();
      M2.style.maxWidth = `min(${e3}px, 100%)`, M2.style.maxHeight = `min(${t3}px, 100%)`;
    }
    let { x: e2, y: t2, scale: n2, angle: i2, flipX: o2, flipY: a2 } = F;
    const s2 = (function() {
      const e3 = q(), t3 = e3.width, n3 = e3.height, { width: i3, height: o3 } = $();
      if (!c2) return { x: 0, y: 0, width: 0, height: 0, scale: 0, flipX: 0, flipY: 0, angle: 0, fitWidth: t3, fitHeight: n3, fullWidth: i3, fullHeight: o3 };
      let { x: a3, y: s3, scale: l2, angle: r2, flipX: u2, flipY: f2 } = F, d2 = 1 / J(), g2 = i3, h3 = o3, m2 = F.scale * d2, p2 = Z.scale * d2;
      const v2 = Math.max(t3, n3), b2 = Math.min(t3, n3);
      i3 > o3 ? (g2 = v2, h3 = b2) : (g2 = b2, h3 = v2);
      m2 = i3 > o3 ? v2 * l2 / i3 || 1 : v2 * l2 / o3 || 1;
      let y2 = g2 ? i3 * p2 : 0, x2 = h3 ? o3 * p2 : 0;
      return a3 = a3 + 0.5 * g2 - 0.5 * y2, s3 = s3 + 0.5 * h3 - 0.5 * x2, { x: a3, y: s3, width: y2, height: x2, scale: g2 && h3 ? i3 * m2 / y2 : 0, flipX: u2, flipY: f2, angle: r2, fitWidth: t3, fitHeight: n3, fullWidth: i3, fullHeight: o3 };
    })();
    if (M2 && s2) {
      const { x: e3, y: t3, width: n3, height: o3, scale: a3, flipX: l2, flipY: r2 } = s2;
      let c3 = `translate(${d(e3)}px, ${d(t3)}px)`;
      c3 += 1 !== l2 || 1 !== r2 ? ` scaleX(${d(a3 * l2)}) scaleY(${d(a3 * r2)})` : ` scale(${d(a3)})`, 0 !== i2 && (c3 += ` rotate(${i2}deg)`), T2 && (T2.style.width = `${d(n3)}px`, T2.style.height = `${d(o3)}px`, T2.style.transform = `${c3}`);
    }
    I2("render");
  }
  function oe() {
    let e2 = Z.scale;
    const t2 = Y("clickAction");
    let n2 = U();
    if (t2) {
      let i2 = [];
      switch (t2) {
        case g$1.ZoomIn:
          n2 = 2 * e2;
          break;
        case g$1.ZoomOut:
          n2 = 0.5 * e2;
          break;
        case g$1.ToggleCover:
          i2 = [U(), G()];
          break;
        case g$1.ToggleFull:
          i2 = [U(), J()];
          break;
        case g$1.ToggleMax:
          i2 = [U(), K()];
          break;
        case g$1.IterateZoom:
          i2 = [U(), J(), K()];
          break;
        case g$1.Zoom:
          const t3 = J();
          n2 = e2 >= t3 - 0.05 ? U() : Math.min(t3, 2 * e2);
      }
      if (i2.length) {
        const t3 = i2.findIndex(((t4) => t4 > e2 + 1e-4));
        n2 = i2[t3] || U();
      }
    }
    return n2 = t$7(V(), n2, K()), n2;
  }
  function ae() {
    return 3 === A2 && oe() > Z.scale;
  }
  function se() {
    return 3 === A2 && oe() < Z.scale;
  }
  function le() {
    return 3 === A2 && Z.scale < K();
  }
  function re() {
    return 3 === A2 && Z.scale > V();
  }
  function ce() {
    return 3 === A2 && fe() && !!k2 && !_2();
  }
  function ue() {
    return 3 === A2 && (null == k2 ? void 0 : k2.isPointerDown()) && !_2();
  }
  function fe() {
    return 3 === A2 && Z.scale > U();
  }
  function de() {
    return 3 === A2 && Z.scale >= J();
  }
  const ge = { canDrag: ce, canZoomIn: le, canZoomOut: re, destroy: function() {
    I2("destroy");
    for (const e2 of Object.values(S)) null == e2 || e2.destroy(ge);
    for (const e2 of X) e2();
    return M2 && (M2.style.aspectRatio = "", M2.style.maxWidth = "", M2.style.maxHeight = ""), T2 && (T2.style.width = "", T2.style.height = "", T2.style.transform = ""), M2 = void 0, E2 = void 0, T2 = void 0, F = Object.assign({}, m$1), Z = Object.assign({}, m$1), null == L || L.destroy(), L = void 0, null == k2 || k2.destroy(), k2 = void 0, A2 = 4, ge;
  }, emit: I2, execute: ne, getBoundaries: Q, getContainer: function() {
    return c2;
  }, getFullDim: $, getGestures: function() {
    return k2;
  }, getMousemovePos: B, getOptions: function() {
    return C;
  }, getScale: N, getState: function() {
    return A2;
  }, getTransform: function(e2) {
    return true === e2 ? Z : F;
  }, getTween: function() {
    return L;
  }, getViewport: function() {
    return T2;
  }, getWrapper: function() {
    return M2;
  }, init: function() {
    return A2 = 0, I2("init"), (function() {
      for (const [e2, t2] of Object.entries(Object.assign(Object.assign({}, w2), C.plugins || {}))) if (e2 && !S[e2] && t2 instanceof Function) {
        const n2 = t2();
        n2.init(ge), S[e2] = n2;
      }
      I2("initPlugins");
    })(), (function() {
      if (!c2) return;
      const e2 = Object.assign(Object.assign({}, p.classes), Y("classes"));
      if (s$7(c2, e2.container), E2 = c2.querySelector("." + e2.content), !E2) return;
      E2.setAttribute("draggable", "false"), M2 = c2.querySelector("." + e2.wrapper), M2 || (M2 = document.createElement("div"), s$7(M2, e2.wrapper), E2.insertAdjacentElement("beforebegin", M2), M2.insertAdjacentElement("afterbegin", E2));
      if (!(E2 instanceof HTMLImageElement || E2 instanceof HTMLPictureElement)) return;
      if (T2 = c2.querySelector("." + e2.viewport), !T2) {
        T2 = document.createElement("div"), s$7(T2, e2.viewport);
        const t2 = E2.cloneNode(true);
        t2.classList.remove("is-lazyloading"), t2.classList.remove("is-lazyloaded"), T2.insertAdjacentElement("afterbegin", t2), M2.insertAdjacentElement("beforeend", T2);
      }
      E2 instanceof HTMLPictureElement && (E2 = E2.querySelector("img"));
      T2 instanceof HTMLPictureElement && (T2 = T2.querySelector("img"));
      if (T2.style.visibility = "hidden", Y("protected")) {
        T2.addEventListener("contextmenu", ((e4) => {
          e4.preventDefault();
        }));
        const e3 = document.createElement("div");
        s$7(e3, "f-panzoom__protected"), T2.appendChild(e3);
      }
      I2("initLayout");
    })(), (function() {
      if (!c2 || !(E2 && E2 instanceof HTMLImageElement)) return;
      A2 = 1, c2.classList.add("is-loading"), I2("loading");
      const e2 = () => {
        E2 && E2 instanceof HTMLImageElement && E2.decode().then((() => {
          requestAnimationFrame((() => {
            W();
          }));
        })).catch((() => {
          W();
        }));
      };
      if (E2.src && E2.complete) return void e2();
      (function() {
        if (!c2) return;
        if (null == c2 ? void 0 : c2.querySelector(".f-spinner")) return;
        const e3 = Y("spinnerTpl"), t2 = e$8(e3);
        t2 && (t2.classList.add("f-spinner"), c2.classList.add("is-loading"), null == M2 || M2.insertAdjacentElement("afterbegin", t2));
      })(), E2.addEventListener("load", e2, false), E2.addEventListener("error", e2, false), X.push((() => {
        null == E2 || E2.removeEventListener("load", e2, false), null == E2 || E2.removeEventListener("error", e2, false);
      }));
    })(), (function() {
      if (c2 && M2 && !j) {
        let e2 = null;
        j = new ResizeObserver((() => {
          e2 || (e2 = requestAnimationFrame((() => {
            c2 && c2.parentElement && 3 === A2 && (te(), ee(), I2("refresh")), e2 = null;
          })));
        })), j.observe(M2), X.push((() => {
          null == j || j.disconnect(), j = void 0, e2 && (cancelAnimationFrame(e2), e2 = null);
        }));
      }
    })(), ge;
  }, isDragging: ue, isExpanded: fe, isFullsize: de, localize: function(e2, t2 = []) {
    const n2 = Y("l10n") || {};
    e2 = String(e2).replace(/\{\{(\w+)\}\}/g, ((e3, t3) => n2[t3] || e3));
    for (let n3 = 0; n3 < t2.length; n3++) e2 = e2.split(t2[n3][0]).join(t2[n3][1]);
    return e2 = e2.replace(/\{\{(.*?)\}\}/g, ((e3, t3) => t3));
  }, off: function(e2, t2) {
    for (const n2 of e2 instanceof Array ? e2 : [e2]) P.has(n2) && P.set(n2, P.get(n2).filter(((e3) => e3 !== t2)));
    return ge;
  }, on: function(e2, t2) {
    for (const n2 of e2 instanceof Array ? e2 : [e2]) P.set(n2, [...P.get(n2) || [], t2]);
    return ge;
  }, version: "6.0.26", willZoomIn: ae, willZoomOut: se };
  return ge;
};
w.l10n = { en_EN: o$3 }, w.getDefaults = () => p;
/*! License details at fancyapps.com/license */
const e$4 = (e2, o2) => {
  let t2 = [];
  return e2.childNodes.forEach(((e3) => {
    e3.nodeType !== Node.ELEMENT_NODE || o2 && !e3.matches(o2) || t2.push(e3);
  })), t2;
};
/*! License details at fancyapps.com/license */
const r$3 = (t2, ...e2) => {
  const n2 = e2.length;
  for (let c2 = 0; c2 < n2; c2++) {
    const n3 = e2[c2] || {};
    Object.entries(n3).forEach((([e3, n4]) => {
      const c3 = Array.isArray(n4) ? [] : {};
      t2[e3] || Object.assign(t2, { [e3]: c3 }), t$6(n4) ? Object.assign(t2[e3], r$3(t2[e3], n4)) : Array.isArray(n4) ? Object.assign(t2, { [e3]: [...n4] }) : Object.assign(t2, { [e3]: n4 });
    }));
  }
  return t2;
};
/*! License details at fancyapps.com/license */
const t$4 = function(t2 = 0, n2 = 0, r2 = 0, c2 = 0, m2 = 0, p2 = false) {
  const s2 = (t2 - n2) / (r2 - n2) * (m2 - c2) + c2;
  return p2 ? c2 < m2 ? t$7(c2, s2, m2) : t$7(m2, s2, c2) : s2;
};
/*! License details at fancyapps.com/license */
const s$6 = (s2, t2 = "") => {
  s2 && s2.classList && t2.split(" ").forEach(((t3) => {
    t3 && s2.classList.remove(t3);
  }));
};
/*! License details at fancyapps.com/license */
const s$5 = (s2, t2 = "", c2) => {
  s2 && s2.classList && t2.split(" ").forEach(((t3) => {
    t3 && s2.classList.toggle(t3, c2 || false);
  }));
};
/*! License details at fancyapps.com/license */
const o$2 = Object.assign(Object.assign({}, o$3), { ERROR: "Something went wrong. <br /> Please try again later.", NEXT: "Next page", PREV: "Previous page", GOTO: "Go to page #%d", DOWNLOAD: "Download", TOGGLE_FULLSCREEN: "Toggle full-screen mode", TOGGLE_EXPAND: "Toggle full-size mode", TOGGLE_THUMBS: "Toggle thumbnails", TOGGLE_AUTOPLAY: "Toggle slideshow" });
/*! License details at fancyapps.com/license */
const g = (e2) => {
  e2.cancelable && e2.preventDefault();
}, m = { adaptiveHeight: false, center: true, classes: { container: "f-carousel", isEnabled: "is-enabled", isLTR: "is-ltr", isRTL: "is-rtl", isHorizontal: "is-horizontal", isVertical: "is-vertical", hasAdaptiveHeight: "has-adaptive-height", viewport: "f-carousel__viewport", slide: "f-carousel__slide", isSelected: "is-selected" }, dragFree: false, enabled: true, errorTpl: '<div class="f-html">{{ERROR}}</div>', fill: false, infinite: true, initialPage: 0, l10n: o$2, rtl: false, slides: [], slidesPerPage: "auto", spinnerTpl: '<div class="f-spinner"></div>', transition: "fade", tween: { clamp: true, mass: 1, tension: 160, friction: 25, restDelta: 1, restSpeed: 1, velocity: 0 }, vertical: false };
let h, b = 0;
const E = (p2, x2 = {}, y2 = {}) => {
  b++;
  let w2, M2, S, j, P, L = 0, A2 = Object.assign({}, m), T2 = Object.assign({}, m), O2 = {}, R2 = null, V = null, C = false, H = false, D2 = false, $ = false, z2 = "height", q = 0, F = true, I2 = 0, k2 = 0, B = 0, N = 0, _2 = "*", G = [], X = [];
  const Y = /* @__PURE__ */ new Set();
  let W = [], J = [], K = 0, Q = 0, U = 0;
  function Z(e2, ...t2) {
    let n2 = T2[e2];
    return n2 && n2 instanceof Function ? n2(He, ...t2) : n2;
  }
  function ee(e2, t2 = []) {
    const n2 = Z("l10n") || {};
    e2 = String(e2).replace(/\{\{(\w+)\}\}/g, ((e3, t3) => n2[t3] || e3));
    for (let n3 = 0; n3 < t2.length; n3++) e2 = e2.split(t2[n3][0]).join(t2[n3][1]);
    return e2 = e2.replace(/\{\{(.*?)\}\}/g, ((e3, t3) => t3));
  }
  const te = /* @__PURE__ */ new Map();
  function ne(e2, ...t2) {
    const n2 = [...te.get(e2) || []];
    T2.on && n2.push(T2.on[e2]);
    for (const e3 of n2) e3 && e3 instanceof Function && e3(He, ...t2);
    "*" !== e2 && ne("*", e2, ...t2);
  }
  function ie() {
    var t2, n2;
    const i2 = r$3({}, m, A2);
    r$3(i2, m, A2);
    let r2 = "";
    const l2 = A2.breakpoints || {};
    if (l2) for (const [e2, t3] of Object.entries(l2)) window.matchMedia(e2).matches && (r2 += e2, r$3(i2, t3));
    if (void 0 === P || r2 !== P) {
      if (P = r2, 0 !== L) {
        let e2 = null === (n2 = null === (t2 = J[I2]) || void 0 === t2 ? void 0 : t2.slides[0]) || void 0 === n2 ? void 0 : n2.index;
        void 0 === e2 && (e2 = T2.initialSlide), i2.initialSlide = e2, i2.slides = [];
        for (const e3 of G) e3.isVirtual && i2.slides.push(e3);
      }
      Re(), T2 = i2, false !== T2.enabled && (L = 0, ne("init"), (function() {
        for (const [e2, t3] of Object.entries(Object.assign(Object.assign({}, y2), T2.plugins || {}))) if (e2 && !O2[e2] && t3 instanceof Function) {
          const n3 = t3();
          n3.init(He, E), O2[e2] = n3;
        }
        ne("initPlugins");
      })(), (function() {
        if (!R2) return;
        const t3 = Z("classes") || {};
        s$7(R2, t3.container);
        const n3 = Z("style");
        if (n3 && t$6(n3)) for (const [e2, t4] of Object.entries(n3)) R2.style.setProperty(e2, t4);
        V = R2.querySelector(`.${t3.viewport}`), V || (V = document.createElement("div"), s$7(V, t3.viewport), V.append(...e$4(R2, `.${t3.slide}`)), R2.insertAdjacentElement("afterbegin", V)), R2.carousel = He, ne("initLayout");
      })(), (function() {
        if (!V) return;
        const e2 = Z("classes") || {};
        G = [], [...e$4(V, `.${e2.slide}`)].forEach(((e3) => {
          e3.parentElement && G.push(me(Object.assign({ el: e3, isVirtual: false }, e3.dataset || {})));
        })), ge(Z("slides"));
        for (const e3 of G) ne("addSlide", e3);
        for (const e3 of G) {
          const t3 = e3.el;
          (null == t3 ? void 0 : t3.parentElement) && (s$7(t3, T2.classes.slide), s$7(t3, e3.class), Ae(e3), ne("attachSlideEl", e3));
        }
        ne("initSlides");
      })(), ye(), (function() {
        if (R2 && (R2.addEventListener("click", je, { passive: false }), document.addEventListener("mousemove", oe), !S)) {
          let e2 = null;
          S = new ResizeObserver(((t3) => {
            e2 || (e2 = requestAnimationFrame((() => {
              !(function(e3) {
                var t4;
                if (!R2) return;
                if (0 === L) {
                  const n4 = null === (t4 = e3[0]) || void 0 === t4 ? void 0 : t4.contentBoxSize[0], i4 = (null == n4 ? void 0 : n4.blockSize) || 0, o3 = (null == n4 ? void 0 : n4.inlineSize) || 0;
                  return K = i4, Q = o3, L = 1, s$7(R2, (Z("classes") || {}).isEnabled), Oe(), M2 = c$2().on("start", (() => {
                    w2 && w2.isPointerDown() || (le(), Oe());
                  })).on("step", ((e4) => {
                    const t5 = q;
                    q = e4.pos, q !== t5 && (F = false, Oe());
                  })).on("end", ((e4) => {
                    (null == w2 ? void 0 : w2.isPointerDown()) || (q = e4.pos, M2 && !H && (q < B || q > N) ? M2.spring({ clamp: true, mass: 1, tension: 200, friction: 25, velocity: 0, restDelta: 1, restSpeed: 1 }).from({ pos: q }).to({ pos: t$7(B, q, N) }).start() : F || (F = true, ne("settle")));
                  })), se(), ae(), void ne("ready");
                }
                if (1 !== L) return;
                const n3 = J.length;
                ye(), se();
                const i3 = R2.getBoundingClientRect(), o2 = i3.height, s2 = i3.width;
                n3 > 1 && ($ && Math.abs(o2 - K) < 0.5 || !$ && Math.abs(s2 - Q) < 0.5) || (K = o2, Q = s2, $ && !o2 || !$ && !s2 || R2 && V && (n3 === J.length && (null == w2 ? void 0 : w2.isPointerDown()) || (Z("dragFree") && (H || q > B && q < N) ? (le(), Oe()) : Te(I2, { transition: false }))));
              })(t3), e2 = null;
            })));
          })), S.observe(R2);
        }
      })());
    }
  }
  function oe(e2) {
    h = e2;
  }
  function se() {
    if (!V) return;
    const e2 = Z("gestures");
    false !== e2 ? w2 || (w2 = u$3(V, e2).on("start", ((e3) => {
      var t2, n2;
      if (!M2) return;
      const { srcEvent: o2 } = e3;
      $ && n$7(o2.target), M2.pause(), M2.getCurrentVelocities().pos = 0;
      const s2 = null === (t2 = J[I2]) || void 0 === t2 ? void 0 : t2.slides[0];
      if (s2 && Y.has(s2.index) && s2.el && (q = s2.offset || 0, q += ((function(e4) {
        const t3 = window.getComputedStyle(e4), n3 = new DOMMatrixReadOnly(t3.transform);
        return { width: n3.m41 || 0, height: n3.m42 || 0 };
      })(s2.el)[z2] || 0) * (D2 && !$ ? 1 : -1)), Me(), !H) {
        (q < B || q > N) && M2.spring({ clamp: true, mass: 1, tension: 500, friction: 25, velocity: (null === (n2 = M2.getCurrentVelocities()) || void 0 === n2 ? void 0 : n2.pos) || 0, restDelta: 1, restSpeed: 1 }).from({ pos: q }).to({ pos: t$7(B, q, N) }).start();
      }
    })).on("move", ((e3) => {
      const { srcEvent: t2, axis: n2 } = e3, o2 = e3.srcEvent.target;
      o2 && n$7(o2) || (n2 || (t2.stopPropagation(), t2.stopImmediatePropagation()), ("y" === n2 && $ || "x" === n2 && !$) && (g(t2), t2.stopPropagation()));
    })).on("panstart", ((e3) => {
      (null == e3 ? void 0 : e3.axis) === ($ ? "y" : "x") && s$7(V, "is-dragging");
    })).on("panend", (() => {
      s$6(V, "is-dragging");
    })).on("pan", ((e3) => {
      var t2;
      const { deltaX: n2, deltaY: i2, currentTouch: o2, axis: s2 } = e3;
      if (!M2) return;
      if (o2.length > 1) return;
      if ("y" === s2 && !$ || "x" === s2 && $) return;
      const r2 = D2 && !$ ? 1 : -1;
      let l2 = $ ? i2 : n2, a2 = (null == M2 ? void 0 : M2.isRunning()) ? M2.getEndValues().pos : q, c2 = 1;
      H || (a2 <= B && l2 * r2 < 0 ? (c2 = Math.max(0.01, 1 - Math.abs(1 / fe() * Math.abs(a2 - B))), c2 *= 0.2) : a2 >= N && l2 * r2 > 0 && (c2 = Math.max(0.01, 1 - Math.abs(1 / fe() * Math.abs(a2 - N))), c2 *= 0.2)), a2 += l2 * c2 * r2, M2.spring({ clamp: true, mass: 1, tension: 700, friction: 25, velocity: (null === (t2 = M2.getCurrentVelocities()) || void 0 === t2 ? void 0 : t2.pos) || 0, restDelta: 1, restSpeed: 1 }).from({ pos: q }).to({ pos: a2 }).start();
    })).on("end", ((e3) => {
      var t2, n2;
      const { axis: i2, velocityX: o2, velocityY: s2, currentTouch: r2 } = e3, l2 = J.length, c2 = Z("dragFree");
      if (r2.length > 0 || !M2) return;
      if (!l2) return;
      const d2 = Z("vertical") ? s2 : o2;
      let u2 = (null == M2 ? void 0 : M2.isRunning()) ? M2.getEndValues().pos : q;
      const f2 = D2 && !$ ? 1 : -1;
      if (u2 += d2 * (c2 ? 5 : 1) * f2, !H && (d2 * f2 <= 0 && u2 < B || d2 * f2 >= 0 && u2 > N)) {
        let e4 = 0;
        return Math.abs(d2) > 0 && (e4 = 2 * Math.abs(d2), e4 = Math.min(0.3 * fe(), e4)), u2 = t$7(B + -1 * e4, u2, N + e4), void M2.spring({ clamp: true, mass: 1, tension: 380, friction: 25, velocity: -1 * d2, restDelta: 1, restSpeed: 1 }).from({ pos: q }).to({ pos: u2 }).start();
      }
      if (c2 || (null === (t2 = O2.Autoscroll) || void 0 === t2 ? void 0 : t2.isEnabled())) return void (Math.abs(d2) > 10 ? M2.spring({ clamp: true, mass: 1, tension: 150, friction: 25, velocity: -1 * d2, restDelta: 1, restSpeed: 1 }).from({ pos: q }).to({ pos: u2 }).start() : M2.isRunning() || F || (F = true, ne("settle")));
      if (!c2 && !(null === (n2 = O2.Autoscroll) || void 0 === n2 ? void 0 : n2.isEnabled()) && (!e3.offsetX && !e3.offsetY || "y" === i2 && !$ || "x" === i2 && $)) return void Te(I2, { transition: "tween" });
      let v2 = de(u2);
      Math.abs(d2) > 10 && v2 === I2 && (v2 += d2 > 0 ? D2 && !$ ? 1 : -1 : D2 && !$ ? -1 : 1), Te(v2, { transition: "tween", tween: { velocity: -1 * d2 } });
    })).init()) : w2 && (w2.destroy(), w2 = void 0);
  }
  function re(e2 = "*") {
    var t2;
    const n2 = [];
    for (const i2 of G) ("*" === e2 || i2.class && i2.class.includes(e2) || i2.el && (null === (t2 = i2.el) || void 0 === t2 ? void 0 : t2.classList.contains(e2))) && n2.push(i2);
    j = void 0, _2 = e2, X = [...n2];
  }
  function le() {
    if (!M2) return;
    const e2 = de((null == M2 ? void 0 : M2.isRunning()) ? M2.getEndValues().pos : q);
    e2 !== I2 && (j = I2, I2 = e2, Ae(), ae(), ce(), ne("change", I2, j));
  }
  function ae() {
    var e2;
    if (!R2) return;
    s$5(V, "is-draggable", !!w2 && J.length > 0);
    for (const e3 of R2.querySelectorAll("[data-carousel-index]")) e3.innerHTML = I2 + "";
    for (const e3 of R2.querySelectorAll("[data-carousel-page]")) e3.innerHTML = I2 + 1 + "";
    for (const e3 of R2.querySelectorAll("[data-carousel-pages]")) e3.innerHTML = J.length + "";
    for (const e3 of R2.querySelectorAll("[data-carousel-go-prev]")) e3.toggleAttribute("aria-disabled", !Ve());
    for (const e3 of R2.querySelectorAll("[data-carousel-go-next]")) e3.toggleAttribute("aria-disabled", !Ce());
    let t2 = false;
    const n2 = null === (e2 = J[I2]) || void 0 === e2 ? void 0 : e2.slides[0];
    n2 && (n2.downloadSrc || "image" === n2.type && n2.src) && (t2 = true);
    for (const e3 of R2.querySelectorAll("[data-carousel-download]")) e3.toggleAttribute("aria-disabled", !t2);
  }
  function ce(e2) {
    var t2;
    if (!R2) return;
    e2 || (e2 = null === (t2 = J[I2]) || void 0 === t2 ? void 0 : t2.slides[0]);
    const n2 = e2.el;
    if (n2) for (const t3 of n2.querySelectorAll("[data-slide-index]")) t3.innerHTML = e2.index + 1 + "";
  }
  function de(e2) {
    var t2, n2, i2;
    if (!J.length || !M2) return 0;
    const o2 = ve();
    let s2 = e2;
    H ? s2 -= Math.floor((e2 - (null === (t2 = J[0]) || void 0 === t2 ? void 0 : t2.pos)) / o2) * o2 : s2 = t$7(null === (n2 = J[0]) || void 0 === n2 ? void 0 : n2.pos, e2, null === (i2 = J[J.length - 1]) || void 0 === i2 ? void 0 : i2.pos);
    const r2 = /* @__PURE__ */ new Map();
    let l2 = 0;
    for (const e3 of J) {
      const t3 = Math.abs(e3.pos - s2), n3 = Math.abs(e3.pos - s2 - o2), i3 = Math.abs(e3.pos - s2 + o2), a2 = Math.min(t3, n3, i3);
      r2.set(l2, a2), l2++;
    }
    const c2 = r2.size > 0 ? [...r2.entries()].reduce(((e3, t3) => t3[1] < e3[1] ? t3 : e3)) : [I2, 0];
    return parseInt(c2[0]);
  }
  function ue() {
    return U;
  }
  function fe() {
    return V && V.getBoundingClientRect()[z2] || 0;
  }
  function ve(e2 = true) {
    return X.reduce(((e3, t2) => e3 + t2.dim), 0) + (X.length - (H && e2 ? 0 : 1)) * U;
  }
  function pe(e2) {
    const t2 = ve();
    let n2 = fe();
    if (!V) return [];
    const i2 = [];
    if (!t2 || !n2) return [];
    e2 = void 0 === e2 ? q : e2, H && (e2 -= Math.floor(e2 / t2) * t2);
    let o2 = 0, s2 = 0;
    if (C) {
      const e3 = V.getBoundingClientRect();
      o2 = Math.abs(e3.left), s2 = Math.abs(window.innerWidth - e3.right);
    }
    let r2 = 0;
    for (let l2 of X) {
      const a2 = (t3 = 0) => {
        i2.indexOf(l2) > -1 || (l2.pos = r2 - e2 + t3 || 0, l2.offset + t3 > e2 - l2.dim - o2 + 0.51 && l2.offset + t3 < e2 + n2 + s2 - 0.51 && i2.push(l2));
      };
      l2.offset = r2, H && (a2(t2), a2(-1 * t2)), a2(), r2 += l2.dim + U;
    }
    return i2;
  }
  function ge(e2, t2) {
    const n2 = [];
    for (const t3 of Array.isArray(e2) ? e2 : [e2]) {
      const e3 = me(Object.assign(Object.assign({}, t3), { isVirtual: true }));
      n2.push(e3);
    }
    G.splice(void 0 === t2 ? G.length : t2, 0, ...n2), xe();
    for (const e3 of n2) he(e3);
    return re(_2), n2;
  }
  function me(e2) {
    return (t$8(e2) || e2 instanceof HTMLElement) && (e2 = { html: e2 }), Object.assign({ index: -1, el: void 0, class: "", isVirtual: true, dim: 0, pos: 0, offset: 0, html: "", src: "" }, e2);
  }
  function he(e2) {
    if (!e2) return;
    let t2 = e2.el;
    t2 || (t2 = document.createElement("div"), e2.el = t2);
    const n2 = e2.html ? e2.html instanceof HTMLElement ? e2.html : e$8(e2.html) : void 0;
    n2 && (s$7(n2, "f-html"), e2.htmlEl = n2, s$7(t2, "has-html"), t2.append(n2), ne("contentReady", e2));
  }
  function be(e2) {
    if (!V || !e2) return;
    let t2 = e2.el;
    if (t2) {
      if (t2.setAttribute("index", e2.index + ""), t2.parentElement !== V) {
        let n2;
        s$7(t2, T2.classes.slide), s$7(t2, e2.class), Ae(e2);
        for (const t3 of G) if (t3.index > e2.index) {
          n2 = t3.el;
          break;
        }
        V.insertBefore(t2, n2 && V.contains(n2) ? n2 : null), ne("attachSlideEl", e2);
      }
      return t2;
    }
  }
  function Ee(e2) {
    const t2 = null == e2 ? void 0 : e2.el;
    t2 && (t2.remove(), we(t2), ne("detachSlideEl", e2));
  }
  function xe() {
    for (let e2 = 0; e2 < G.length; e2++) {
      const t2 = G[e2], n2 = t2.el;
      n2 && (t2.index !== e2 && we(n2), n2.setAttribute("index", `${e2}`)), t2.index = e2;
    }
  }
  function ye() {
    var e2, n2, i2, o2, s2;
    if (!R2 || !V) return;
    D2 = Z("rtl"), $ = Z("vertical"), z2 = $ ? "height" : "width";
    const r2 = Z("classes");
    s$5(R2, r2.isLTR, !D2), s$5(R2, r2.isRTL, D2), s$5(R2, r2.isHorizontal, !$), s$5(R2, r2.isVertical, $), s$5(R2, r2.hasAdaptiveHeight, Z("adaptiveHeight")), C = "visible" === window.getComputedStyle(V).getPropertyValue("overflow-" + ($ ? "y" : "x"));
    const l2 = V.getBoundingClientRect();
    if (!l2.width && !l2.height) return;
    U = V && parseFloat(getComputedStyle(V).getPropertyValue("--f-carousel-gap")) || 0;
    const d2 = (function() {
      let e3 = 0;
      if (V) {
        let t2 = document.createElement("div");
        s$7(t2, T2.classes.slide), V.appendChild(t2), e3 = t2.getBoundingClientRect()[z2], t2.remove(), t2 = void 0;
      }
      return e3;
    })();
    for (const n3 of X) {
      const i3 = n3.el;
      let o3 = 0;
      if (!n3.isVirtual && i3 && n$8(i3)) {
        let t2 = false;
        i3.parentElement && i3.parentElement === V || (V.appendChild(i3), t2 = true), o3 = i3.getBoundingClientRect()[z2], t2 && (null === (e2 = i3.parentElement) || void 0 === e2 || e2.removeChild(i3));
      } else o3 = d2;
      n3.dim = o3;
    }
    if (H = false, Z("infinite")) {
      H = true;
      const e3 = ve();
      let t2 = fe();
      if (C) {
        const e4 = V.getBoundingClientRect();
        t2 += e4.left, t2 += e4.right - e4.width;
      }
      for (let i3 = 0; i3 < X.length; i3++) {
        const o3 = (null === (n2 = X[i3]) || void 0 === n2 ? void 0 : n2.dim) + U;
        if (e3 - o3 < t2 && e3 - o3 - t2 < o3) {
          H = false;
          break;
        }
      }
    }
    if ((function() {
      var e3;
      if (!R2) return;
      xe();
      const t2 = fe(), n3 = ve(false);
      let i3 = Z("slidesPerPage");
      i3 = "auto" === i3 ? 1 / 0 : parseFloat(i3 + ""), J = [];
      let o3 = 0, s3 = 0;
      for (const n4 of X) (!J.length || o3 + n4.dim - t2 > 0.05 || s3 >= i3) && (J.push({ index: J.length, slides: [], dim: 0, offset: 0, pos: 0 }), o3 = 0, s3 = 0), null === (e3 = J[J.length - 1]) || void 0 === e3 || e3.slides.push(n4), o3 += n4.dim + U, s3++;
      const r3 = Z("center"), l3 = Z("fill");
      let c2 = 0;
      for (const e4 of J) {
        e4.dim = (e4.slides.length - 1) * U;
        for (const t3 of e4.slides) e4.dim += t3.dim;
        e4.offset = c2, e4.pos = c2, false !== r3 && (e4.pos -= 0.5 * (t2 - e4.dim)), l3 && !H && n3 > t2 && (e4.pos = t$7(0, e4.pos, n3 - t2)), c2 += e4.dim + U;
      }
      const d3 = [];
      let u2;
      for (const e4 of J) {
        const t3 = Object.assign({}, e4);
        u2 && t3.pos === u2.pos ? (u2.dim += t3.dim, u2.slides = [...u2.slides, ...t3.slides]) : (u2 = t3, t3.index = d3.length, d3.push(t3));
      }
      J = d3, ae();
    })(), B = (null === (i2 = J[0]) || void 0 === i2 ? void 0 : i2.pos) || 0, N = (null === (o2 = J[J.length - 1]) || void 0 === o2 ? void 0 : o2.pos) || 0, 0 === L) !(function() {
      var e3;
      j = void 0, I2 = Z("initialPage");
      const t2 = Z("initialSlide") || void 0;
      void 0 !== t2 && (I2 = He.getPageIndex(t2) || 0), I2 = t$7(0, I2, J.length - 1), q = (null === (e3 = J[I2]) || void 0 === e3 ? void 0 : e3.pos) || 0, k2 = q;
    })();
    else {
      const e3 = (null == M2 ? void 0 : M2.isRunning()) ? M2.getEndValues().pos : q;
      (e3 < B || e3 > N) && (I2 = t$7(0, I2, J.length - 1), k2 = (null === (s2 = J[I2 || 0]) || void 0 === s2 ? void 0 : s2.pos) || 0);
    }
    ne("refresh");
  }
  function we(e2) {
    if (!e2 || !n$8(e2)) return;
    const n2 = parseInt(e2.getAttribute("index") || "-1");
    let i2 = "";
    for (const t2 of Array.from(e2.classList)) {
      const e3 = t2.match(/^f-(\w+)(Out|In)$/);
      e3 && e3[1] && (i2 = e3[1] + "");
    }
    if (!e2 || !i2) return;
    const o2 = [`f-${i2}Out`, `f-${i2}In`, "to-prev", "to-next", "from-prev", "from-next"];
    e2.removeEventListener("animationend", Se), s$6(e2, o2.join(" ")), Y.delete(n2);
  }
  function Me() {
    if (!V) return;
    const e2 = Y.size;
    for (const e3 of X) we(e3.el);
    Y.clear(), e2 && Oe();
  }
  function Se(e2) {
    "f-" === e2.animationName.substring(0, 2) && (we(e2.target), Y.size || (s$6(R2, "in-transition"), !F && Math.abs(He.getPosition(true) - k2) < 0.5 && (F = true, ne("settle"))), Oe());
  }
  function je(e2) {
    var t2;
    if (e2.defaultPrevented) return;
    const n2 = e2.composedPath()[0];
    if (n2.closest("[data-carousel-go-prev]")) return g(e2), void He.prev();
    if (n2.closest("[data-carousel-go-next]")) return g(e2), void He.next();
    const i2 = n2.closest("[data-carousel-go-to]");
    if (i2) return g(e2), void He.goTo(parseFloat(i2.dataset.carouselGoTo || "") || 0);
    if (n2.closest("[data-carousel-download]")) {
      g(e2);
      const n3 = null === (t2 = J[I2]) || void 0 === t2 ? void 0 : t2.slides[0];
      if (n3 && (n3.downloadSrc || "image" === n3.type && n3.src)) {
        const e3 = n3.downloadFilename, t3 = document.createElement("a"), i3 = n3.downloadSrc || n3.src || "";
        t3.href = i3, t3.target = "_blank", t3.download = e3 || i3, t3.click();
      }
    } else ne("click", e2);
  }
  function Pe(e2) {
    var t2;
    const n2 = e2.el;
    n2 && (null === (t2 = n2.querySelector(".f-spinner")) || void 0 === t2 || t2.remove());
  }
  function Le(e2) {
    var t2;
    const n2 = e2.el;
    n2 && (null === (t2 = n2.querySelector(".f-html.is-error")) || void 0 === t2 || t2.remove(), s$6(n2, "has-error"));
  }
  function Ae(e2) {
    var t2;
    e2 || (e2 = null === (t2 = J[I2]) || void 0 === t2 ? void 0 : t2.slides[0]);
    const i2 = null == e2 ? void 0 : e2.el;
    if (!i2) return;
    let o2 = Z("formatCaption", e2);
    void 0 === o2 && (o2 = e2.caption), o2 = o2 || "";
    const s2 = Z("captionEl");
    if (s2 && s2 instanceof HTMLElement) {
      if (e2.index !== I2) return;
      if (t$8(o2) && (s2.innerHTML = ee(o2 + "")), o2 instanceof HTMLElement) {
        if (o2.parentElement === s2) return;
        s2.innerHTML = "", o2.parentElement && (o2 = o2.cloneNode(true)), s2.append(o2);
      }
      return;
    }
    if (!o2) return;
    let r2 = e2.captionEl || i2.querySelector(".f-caption");
    !r2 && o2 instanceof HTMLElement && o2.classList.contains("f-caption") && (r2 = o2), r2 || (r2 = document.createElement("div"), s$7(r2, "f-caption"), t$8(o2) ? r2.innerHTML = ee(o2 + "") : o2 instanceof HTMLElement && (o2.parentElement && (o2 = o2.cloneNode(true)), r2.append(o2)));
    const l2 = `f-caption-${b}_${e2.index}`;
    r2.setAttribute("id", l2), r2.dataset.selectable = "true", s$7(i2, "has-caption"), i2.setAttribute("aria-labelledby", l2), e2.captionEl = r2, i2.insertAdjacentElement("beforeend", r2);
  }
  function Te(t2, i2 = {}) {
    var o2, r2;
    let { transition: l2, tween: u2 } = Object.assign({ transition: T2.transition, tween: T2.tween }, i2 || {});
    if (!R2 || !M2) return;
    const f2 = J.length;
    if (!f2) return;
    if ((function(e2, t3) {
      var i3, o3, s2, r3;
      if (!(R2 && M2 && t3 && t$8(t3) && "tween" !== t3)) return false;
      if ((null === (i3 = J[I2]) || void 0 === i3 ? void 0 : i3.slides.length) > 1) return false;
      const l3 = J.length;
      let u3 = e2 > I2 ? 1 : -1;
      e2 = H ? (e2 % l3 + l3) % l3 : t$7(0, e2, l3 - 1), D2 && (u3 *= -1);
      const f3 = null === (o3 = J[I2]) || void 0 === o3 ? void 0 : o3.slides[0], v3 = null == f3 ? void 0 : f3.index, p3 = null === (s2 = J[e2]) || void 0 === s2 ? void 0 : s2.slides[0], g2 = null == p3 ? void 0 : p3.index, m2 = null === (r3 = J[e2]) || void 0 === r3 ? void 0 : r3.pos;
      if (void 0 === g2 || void 0 === v3 || v3 === g2 || q === m2 || Math.abs(fe() - ((null == p3 ? void 0 : p3.dim) || 0)) > 1) return false;
      F = false, M2.pause(), Me(), s$7(R2, "in-transition"), q = k2 = m2;
      const h2 = be(f3), b2 = be(p3);
      return le(), h2 && (Y.add(v3), h2.style.transform = "", h2.addEventListener("animationend", Se), s$6(h2, T2.classes.isSelected), h2.removeAttribute("aria-hidden"), s$7(h2, `f-${t3}Out to-${u3 > 0 ? "next" : "prev"}`)), b2 && (Y.add(g2), b2.style.transform = "", b2.addEventListener("animationend", Se), s$7(b2, T2.classes.isSelected), b2.removeAttribute("aria-hidden"), s$7(b2, `f-${t3}In from-${u3 > 0 ? "prev" : "next"}`)), Oe(), true;
    })(t2, l2)) return;
    t2 = H ? (t2 % f2 + f2) % f2 : t$7(0, t2, f2 - 1), k2 = (null === (o2 = J[t2 || 0]) || void 0 === o2 ? void 0 : o2.pos) || 0;
    const v2 = M2.isRunning() ? M2.getEndValues().pos : q;
    if (Math.abs(k2 - v2) < 1) return q = k2, I2 !== t2 && (Ae(), ae(), ce(), j = I2, I2 = t2, ne("change", I2, j)), Oe(), void (F || (F = true, ne("settle")));
    if (M2.pause(), Me(), H) {
      const e2 = ve(), t3 = Math.floor((v2 - (null === (r2 = J[0]) || void 0 === r2 ? void 0 : r2.pos)) / e2), n2 = k2 + t3 * e2;
      k2 = [n2 + e2, n2, n2 - e2].reduce((function(e3, t4) {
        return Math.abs(t4 - v2) < Math.abs(e3 - v2) ? t4 : e3;
      }));
    }
    false !== l2 && t$6(u2) ? M2.spring(r$3({}, T2.tween, u2)).from({ pos: q }).to({ pos: k2 }).start() : (q = k2, le(), Oe(), F || (F = true, ne("settle")));
  }
  function Oe() {
    var e2;
    if (!R2 || !V) return;
    const t2 = J[I2];
    W = pe();
    const n2 = /* @__PURE__ */ new Set();
    let i2;
    const s2 = [];
    for (const o2 of X) {
      if (o2.isVirtual && !Y.has(o2.index) && W.indexOf(o2) < 0) continue;
      let r2 = be(o2);
      if (!r2) continue;
      s2.push(o2);
      const l2 = (null === (e2 = null == t2 ? void 0 : t2.slides) || void 0 === e2 ? void 0 : e2.indexOf(o2)) > -1;
      if (l2 && n2.add(r2), Z("adaptiveHeight") && l2) {
        const e3 = (r2.firstElementChild || r2).getBoundingClientRect().height;
        i2 = null == i2 ? e3 : Math.max(i2, e3);
      }
    }
    V && i2 && (V.style.height = `${i2}px`), [...e$4(V, `.${T2.classes.slide}`)].forEach(((e3) => {
      const t3 = parseInt(e3.getAttribute("index") || "-1"), i3 = G[t3];
      i3 || e3.remove();
      const o2 = n2.has(e3);
      if (s$5(e3, T2.classes.isSelected, o2), o2 ? e3.removeAttribute("aria-hidden") : e3.setAttribute("aria-hidden", "true"), i3.isVirtual && !Y.has(i3.index) && W.indexOf(i3) < 0) return void Ee(i3);
      let s3 = i3.pos ? Math.round(1e4 * i3.pos) / 1e4 : 0, l2 = 0, a2 = 0, c2 = 0, d2 = 0, f2 = T2.setTransform || void 0;
      Y.has(i3.index) || (l2 = $ ? 0 : D2 ? -1 * s3 : s3, a2 = $ ? s3 : 0, c2 = t$4(l2, 0, i3.dim, 0, 100), d2 = t$4(a2, 0, i3.dim, 0, 100)), f2 instanceof Function && !Y.has(i3.index) ? f2(He, i3, { x: l2, y: a2, xPercent: c2, yPercent: d2 }) : e3.style.transform = l2 || a2 ? `translate3d(${c2}%, ${d2}%,0)` : "";
    })), ne("render", s2);
  }
  function Re() {
    var e2;
    null == R2 || R2.removeEventListener("click", je), Me(), document.removeEventListener("mousemove", oe), null == S || S.disconnect(), S = void 0;
    for (const n2 of G) n2.el && n$8(n2.el) && (n2.state = void 0, Pe(n2), Le(n2), Ee(n2), n2.isVirtual ? (null === (e2 = n2.el) || void 0 === e2 || e2.remove(), n2.el = void 0) : (n2.el.style.transform = "", null == V || V.appendChild(n2.el)));
    for (const e3 of Object.values(O2)) null == e3 || e3.destroy();
    O2 = {}, null == w2 || w2.destroy(), w2 = void 0, null == M2 || M2.destroy(), M2 = void 0;
    for (const [e3, t2] of Object.entries(T2.classes || {})) "container" !== e3 && s$6(R2, t2);
    s$6(V, "is-draggable");
  }
  function Ve() {
    return H || I2 > 0;
  }
  function Ce() {
    return H || I2 < J.length - 1;
  }
  const He = { add: function(e2, t2) {
    var n2, i2;
    let o2 = q;
    const s2 = I2, r2 = ve(), l2 = (null == M2 ? void 0 : M2.isRunning()) ? M2.getEndValues().pos : q, a2 = Math.floor((l2 - (null === (n2 = J[0]) || void 0 === n2 ? void 0 : n2.pos)) / r2), c2 = ge(e2, t2);
    for (const e3 of c2) ne("addSlide", e3);
    return re(_2), ye(), M2 && (s2 === I2 && (o2 -= a2 * r2), k2 = (null === (i2 = J[I2 || 0]) || void 0 === i2 ? void 0 : i2.pos) || 0, o2 === k2 ? q = k2 : M2.spring({ clamp: true, mass: 1, tension: 300, friction: 25, restDelta: 1, restSpeed: 1 }).from({ pos: o2 }).to({ pos: k2 }).start()), Oe(), He;
  }, canGoPrev: Ve, canGoNext: Ce, destroy: function() {
    return ne("destroy"), window.removeEventListener("resize", ie), Re(), te.clear(), R2 = null, J = [], G = [], T2 = Object.assign({}, m), O2 = {}, X = [], P = "", _2 = "*", L = 2, He;
  }, emit: ne, filter: function(e2 = "*") {
    return re(e2), ye(), Oe(), ne("filter", e2), He;
  }, getContainer: function() {
    return R2;
  }, getGapDim: ue, getGestures: function() {
    return w2;
  }, getLastMouseMove: function() {
    return h;
  }, getOption: function(e2) {
    return Z(e2);
  }, getOptions: function() {
    return T2;
  }, getPage: function() {
    return J[I2];
  }, getPageIndex: function(e2) {
    if (void 0 !== e2) {
      for (const t2 of J || []) for (const n2 of t2.slides) if (n2.index === e2) return t2.index;
      return -1;
    }
    return I2;
  }, getPageProgress: function(e2, t2) {
    var n2;
    void 0 === e2 && (e2 = I2);
    const i2 = J[e2];
    if (!i2) return e2 > I2 ? -1 : 1;
    const o2 = ve(), s2 = ue();
    let r2 = i2.pos, l2 = He.getPosition();
    if (H && true !== t2) {
      const e3 = Math.floor((l2 - (null === (n2 = J[0]) || void 0 === n2 ? void 0 : n2.pos)) / o2);
      l2 -= e3 * o2, r2 = [r2 + o2, r2, r2 - o2].reduce((function(e4, t3) {
        return Math.abs(t3 - l2) < Math.abs(e4 - l2) ? t3 : e4;
      }));
    }
    return (l2 - r2) / (i2.dim + s2);
  }, getPageVisibility: function(e2) {
    var t2;
    void 0 === e2 && (e2 = I2);
    const n2 = J[e2];
    if (!n2) return e2 > I2 ? -1 : 1;
    const i2 = He.getPosition(), o2 = fe();
    let s2 = n2.pos;
    if (H) {
      const e3 = He.getPosition(), n3 = ve(), i3 = s2 + Math.floor((e3 - (null === (t2 = J[0]) || void 0 === t2 ? void 0 : t2.pos)) / n3) * n3;
      s2 = [i3 + n3, i3, i3 - n3].reduce((function(t3, n4) {
        return Math.abs(n4 - e3) < Math.abs(t3 - e3) ? n4 : t3;
      }));
    }
    return s2 > i2 && s2 + n2.dim < i2 + o2 ? 1 : s2 < i2 ? (s2 + n2.dim - i2) / n2.dim : s2 + n2.dim > i2 + o2 ? (i2 + o2 - s2) / n2.dim : 0;
  }, getPages: function() {
    return J;
  }, getPlugins: function() {
    return O2;
  }, getPosition: function(e2) {
    var t2;
    let n2 = q;
    if (H && true !== e2) {
      const e3 = ve();
      n2 -= Math.floor((q - (null === (t2 = J[0]) || void 0 === t2 ? void 0 : t2.pos) || 0) / e3) * e3;
    }
    return n2;
  }, getSlides: function() {
    return G;
  }, getState: function() {
    return L;
  }, getTotalSlideDim: ve, getTween: function() {
    return M2;
  }, getViewport: function() {
    return V;
  }, getViewportDim: fe, getVisibleSlides: function(e2) {
    return void 0 === e2 ? W : pe(e2);
  }, goTo: Te, hasNavigated: function() {
    return void 0 !== j;
  }, hideError: Le, hideLoading: Pe, init: function() {
    if (!p2 || !n$8(p2)) throw new Error("No Element found");
    return 0 !== L && (Re(), L = 0), R2 = p2, A2 = x2, window.removeEventListener("resize", ie), A2.breakpoints && window.addEventListener("resize", ie), ie(), He;
  }, isInfinite: function() {
    return H;
  }, isInTransition: function() {
    return Y.size > 0;
  }, isRTL: function() {
    return D2;
  }, isSettled: function() {
    return F;
  }, isVertical: function() {
    return $;
  }, localize: function(e2, t2 = []) {
    return ee(e2, t2);
  }, next: function(e2 = {}) {
    return Te(I2 + 1, e2), He;
  }, off: function(e2, t2) {
    for (const n2 of e2 instanceof Array ? e2 : [e2]) te.has(n2) && te.set(n2, te.get(n2).filter(((e3) => e3 !== t2)));
    return He;
  }, on: function(e2, t2) {
    for (const n2 of e2 instanceof Array ? e2 : [e2]) te.set(n2, [...te.get(n2) || [], t2]);
    return He;
  }, prev: function(e2 = {}) {
    return Te(I2 - 1, e2), He;
  }, remove: function(e2) {
    void 0 === e2 && (e2 = G.length - 1);
    const t2 = G[e2];
    return t2 && (ne("removeSlide", t2), t2.el && (we(t2.el), t2.el.remove(), t2.el = void 0), G.splice(e2, 1), re(_2), ye(), Oe()), He;
  }, setPosition: function(e2) {
    q = e2, le(), Oe();
  }, showError: function(e2, t2) {
    Pe(e2), Le(e2);
    const n2 = e2.el;
    if (n2) {
      const i2 = document.createElement("div");
      s$7(i2, "f-html"), s$7(i2, "is-error"), i2.innerHTML = ee(t2 || "<p>{{ERROR}}</p>"), e2.htmlEl = i2, s$7(n2, "has-html"), s$7(n2, "has-error"), n2.insertAdjacentElement("afterbegin", i2), ne("contentReady", e2);
    }
    return He;
  }, showLoading: function(e2) {
    const t2 = e2.el, n2 = null == t2 ? void 0 : t2.querySelector(".f-spinner");
    if (!t2 || n2) return He;
    const i2 = Z("spinnerTpl"), o2 = e$8(i2);
    return o2 && (s$7(o2, "f-spinner"), t2.insertAdjacentElement("beforeend", o2)), He;
  }, version: "6.0.26" };
  return He;
};
E.l10n = { en_EN: o$2 }, E.getDefaults = () => m;
/*! License details at fancyapps.com/license */
const t$3 = (t2 = true, e2 = "--f-scrollbar-compensate", s2 = "--f-body-margin", o2 = "hide-scrollbar") => {
  const n2 = document, r2 = n2.body, l2 = n2.documentElement;
  if (t2) {
    if (r2.classList.contains(o2)) return;
    let t3 = window.innerWidth - l2.getBoundingClientRect().width;
    t3 < 0 && (t3 = 0), l2.style.setProperty(e2, `${t3}px`);
    const n3 = parseFloat(window.getComputedStyle(r2).marginRight);
    n3 && r2.style.setProperty(s2, `${n3}px`), r2.classList.add(o2);
  } else r2.classList.remove(o2), r2.style.setProperty(s2, ""), n2.documentElement.style.setProperty(e2, "");
};
/*! License details at fancyapps.com/license */
function e$3() {
  return !("undefined" == typeof window || !window.document || !window.document.createElement);
}
/*! License details at fancyapps.com/license */
const n$4 = function(n2 = "", t2 = "", o2 = "") {
  return n2.split(t2).join(o2);
};
/*! License details at fancyapps.com/license */
const a$5 = { tpl: (e2) => `<img class="f-panzoom__content" 
    ${e2.srcset ? 'data-lazy-srcset="{{srcset}}"' : ""} 
    ${e2.sizes ? 'data-lazy-sizes="{{sizes}}"' : ""} 
    data-lazy-src="{{src}}" alt="{{alt}}" />` }, s$4 = () => {
  let s2;
  function l2(t2, o2) {
    const n2 = null == s2 ? void 0 : s2.getOptions().Zoomable;
    let i2 = (t$6(n2) ? Object.assign(Object.assign({}, a$5), n2) : a$5)[t2];
    return i2 && "function" == typeof i2 && o2 ? i2(o2) : i2;
  }
  function c2() {
    s2 && (s2.on("addSlide", u2), s2.on("removeSlide", f2), s2.on("attachSlideEl", m2), s2.on("click", d2), s2.on("change", r2));
  }
  function r2() {
    g2();
  }
  function d2(e2, t2) {
    const o2 = t2.target;
    o2 && !t2.defaultPrevented && o2.dataset.panzoomAction && p2(o2.dataset.panzoomAction);
  }
  function u2(e2, i2) {
    if (!s2) return;
    const a2 = i2.el;
    if (!a2) return;
    const c3 = i2.src || i2.lazySrc || "", r3 = i2.alt || i2.caption || `Image #${i2.index}`, d3 = i2.srcset || i2.lazySrcset || "", u3 = i2.sizes || i2.lazySizes || "";
    if (c3 && t$8(c3) && !i2.html && (!i2.type || "image" === i2.type)) {
      i2.type = "image";
      let e3 = l2("tpl", i2);
      e3 = n$4(e3, "{{src}}", c3 + ""), e3 = n$4(e3, "{{alt}}", r3 + ""), e3 = n$4(e3, "{{srcset}}", d3 + ""), e3 = n$4(e3, "{{sizes}}", u3 + ""), a2.insertAdjacentHTML("afterbegin", e3);
    }
    if (!a2.querySelector(".f-panzoom__content")) return;
    const f3 = i2.width && "auto" !== i2.width ? parseFloat(i2.width + "") : "auto", m3 = i2.height && "auto" !== i2.height ? parseFloat(i2.height + "") : "auto", p3 = w(a2, Object.assign({ width: f3, height: m3, classes: { container: "f-zoomable" }, event: () => null == s2 ? void 0 : s2.getLastMouseMove(), spinnerTpl: () => (null == s2 ? void 0 : s2.getOption("spinnerTpl")) || "" }, l2("Panzoom")));
    p3.on("*", ((e3, t2, ...o2) => {
      s2 && ("loading" === t2 && (i2.state = 0), "loaded" === t2 && (i2.state = 1), "error" === t2 && (i2.state = 2, null == s2 || s2.showError(i2, "{{IMAGE_ERROR}}")), s2.emit(`panzoom:${t2}`, i2, ...o2), "ready" === t2 && s2.emit("contentReady", i2), i2.index === s2.getPageIndex() && g2());
    })), i2.panzoomRef = p3;
  }
  function f2(e2, t2) {
    t2.panzoomRef && (t2.panzoomRef.destroy(), t2.panzoomRef = void 0);
  }
  function m2(e2, t2) {
    const o2 = t2.panzoomRef;
    if (o2) switch (o2.getState()) {
      case 0:
        o2.init();
        break;
      case 3:
        o2.execute(g$1.Reset, { velocity: 0 });
    }
  }
  function g2() {
    var e2;
    const t2 = null == s2 ? void 0 : s2.getContainer();
    if (!t2) return;
    const o2 = null === (e2 = null == s2 ? void 0 : s2.getPage()) || void 0 === e2 ? void 0 : e2.slides[0].panzoomRef, n2 = (null == o2 ? void 0 : o2.canZoomIn()) || false, a2 = (null == o2 ? void 0 : o2.canZoomOut()) || false, l3 = (null == o2 ? void 0 : o2.isFullsize()) || false, c3 = !o2 || 3 !== (null == o2 ? void 0 : o2.getState());
    for (const e3 of (null == t2 ? void 0 : t2.querySelectorAll("[data-panzoom-action]")) || []) {
      const t3 = e3.dataset.panzoomAction;
      let o3 = false;
      if (c3) o3 = true;
      else switch (t3) {
        case g$1.ZoomIn:
          n2 || (o3 = true);
          break;
        case g$1.ZoomOut:
          a2 || (o3 = true);
          break;
        case g$1.ToggleFull:
          n2 || a2 || (o3 = true);
          const t4 = e3.querySelector("g");
          t4 && (t4.style.display = l3 ? "none" : "");
          break;
        case g$1.ToggleCover:
        case g$1.ToggleMax:
          n2 || a2 || (o3 = true);
      }
      o3 ? (e3.setAttribute("aria-disabled", ""), e3.setAttribute("tabindex", "-1")) : (e3.removeAttribute("aria-disabled"), e3.removeAttribute("tabindex"));
    }
  }
  function p2(e2, ...t2) {
    var o2;
    null === (o2 = null == s2 ? void 0 : s2.getPage().slides[0].panzoomRef) || void 0 === o2 || o2.execute(e2, ...t2);
  }
  return { init: function(e2) {
    s2 = e2, false !== s2.getOptions().Zoomable && s2.on("initPlugins", c2);
  }, destroy: function() {
    if (s2) {
      s2.off("addSlide", u2), s2.off("removeSlide", f2), s2.off("attachSlideEl", m2), s2.off("click", d2), s2.off("change", r2);
      for (const e2 of s2.getSlides()) f2(0, e2);
    }
    s2 = void 0;
  }, execute: p2 };
};
/*! License details at fancyapps.com/license */
const e$2 = { syncOnChange: false, syncOnClick: true, syncOnHover: false }, i$4 = () => {
  let i2, t2;
  function o2() {
    const t3 = null == i2 ? void 0 : i2.getOptions().Sync;
    return t$6(t3) ? Object.assign(Object.assign({}, e$2), t3) : e$2;
  }
  function s2(n2) {
    var e2, s3, l3;
    i2 && n2 && (t2 = n2, i2.getOptions().classes = Object.assign(Object.assign({}, i2.getOptions().classes), { isSelected: "" }), i2.getOptions().initialSlide = (null === (s3 = null === (e2 = t2.getPage()) || void 0 === e2 ? void 0 : e2.slides[0]) || void 0 === s3 ? void 0 : s3.index) || 0, o2().syncOnChange && i2.on("change", c2), o2().syncOnClick && i2.on("click", g2), o2().syncOnHover && (null === (l3 = i2.getViewport()) || void 0 === l3 || l3.addEventListener("mouseover", u2)), (function() {
      if (!i2 || !t2) return;
      i2.on("ready", d2), i2.on("refresh", a2), t2.on("change", r2), t2.on("filter", f2);
    })());
  }
  function l2() {
    const n2 = o2().target;
    i2 && n2 && s2(n2);
  }
  function d2() {
    v2();
  }
  function c2() {
    var n2;
    if (i2 && t2) {
      const e2 = (null === (n2 = i2.getPage()) || void 0 === n2 ? void 0 : n2.slides) || [], o3 = t2.getPageIndex(e2[0].index || 0);
      o3 > -1 && t2.goTo(o3, i2.hasNavigated() ? void 0 : { tween: false, transition: false }), v2();
    }
  }
  function r2() {
    var n2;
    if (i2 && t2) {
      const e2 = i2.getPageIndex((null === (n2 = t2.getPage()) || void 0 === n2 ? void 0 : n2.slides[0].index) || 0);
      e2 > -1 && i2.goTo(e2, t2.hasNavigated() ? void 0 : { tween: false, transition: false }), v2();
    }
  }
  function g2(n2, e2) {
    var o3;
    if (!i2 || !t2) return;
    if (null === (o3 = i2.getTween()) || void 0 === o3 ? void 0 : o3.isRunning()) return;
    const s3 = null == i2 ? void 0 : i2.getOptions().classes.slide;
    if (!s3) return;
    const l3 = s3 ? e2.target.closest(`.${s3}`) : null;
    if (l3) {
      const n3 = parseInt(l3.getAttribute("index") || "") || 0, e3 = t2.getPageIndex(n3);
      t2.goTo(e3);
    }
  }
  function u2(n2) {
    i2 && g2(0, n2);
  }
  function a2() {
    var n2;
    if (i2 && t2) {
      const e2 = i2.getPageIndex((null === (n2 = t2.getPage()) || void 0 === n2 ? void 0 : n2.slides[0].index) || 0);
      e2 > -1 && i2.goTo(e2, { tween: false, transition: false }), v2();
    }
  }
  function f2(n2, e2) {
    i2 && t2 && (i2.filter(e2), r2());
  }
  function v2() {
    var n2, e2, o3;
    if (!t2) return;
    const s3 = (null === (e2 = null === (n2 = t2.getPage()) || void 0 === n2 ? void 0 : n2.slides[0]) || void 0 === e2 ? void 0 : e2.index) || 0;
    for (const n3 of (null == i2 ? void 0 : i2.getSlides()) || []) null === (o3 = n3.el) || void 0 === o3 || o3.classList.toggle("is-selected", n3.index === s3);
  }
  return { init: function(n2) {
    i2 = n2, i2.on("initSlides", l2);
  }, destroy: function() {
    var n2;
    null == i2 || i2.off("ready", d2), null == i2 || i2.off("refresh", a2), null == i2 || i2.off("change", c2), null == i2 || i2.off("click", g2), null === (n2 = null == i2 ? void 0 : i2.getViewport()) || void 0 === n2 || n2.removeEventListener("mouseover", u2), null == t2 || t2.off("change", r2), null == t2 || t2.off("filter", f2), t2 = void 0, null == i2 || i2.off("initSlides", l2), i2 = void 0;
  }, getTarget: function() {
    return t2;
  } };
};
/*! License details at fancyapps.com/license */
const t$2 = { showLoading: true, preload: 1 }, a$4 = "is-lazyloading", s$3 = "is-lazyloaded", l$3 = () => {
  let l2;
  function n2() {
    const a2 = null == l2 ? void 0 : l2.getOptions().Lazyload;
    return t$6(a2) ? Object.assign(Object.assign({}, t$2), a2) : t$2;
  }
  function o2(e2) {
    const t2 = e2.el;
    if (!t2) return;
    const o3 = "[data-lazy-src],[data-lazy-srcset],[data-lazy-bg]", i3 = Array.from(t2.querySelectorAll(o3));
    t2.matches(o3) && i3.push(t2);
    for (const t3 of i3) {
      const o4 = t3.dataset.lazySrc, i4 = t3.dataset.lazySrcset, d2 = t3.dataset.lazySizes, r2 = t3.dataset.lazyBg, c2 = (t3 instanceof HTMLImageElement || t3 instanceof HTMLSourceElement) && (o4 || i4), u2 = t3 instanceof HTMLElement && r2;
      if (!c2 && !u2) continue;
      const f2 = o4 || i4 || r2;
      if (f2) {
        if (c2 && f2) n2().showLoading && (null == l2 || l2.showLoading(e2)), t3.addEventListener("load", (() => {
          null == l2 || l2.hideLoading(e2), t3 instanceof HTMLImageElement ? t3.decode().then((() => {
            t3.classList.remove(a$4), t3.classList.add(s$3);
          })) : (t3.classList.remove(a$4), t3.classList.add(s$3)), null == l2 || l2.emit("lazyLoad:loaded", e2, t3, f2);
        })), t3.addEventListener("error", (() => {
          null == l2 || l2.hideLoading(e2), t3.classList.remove(a$4), t3.classList.add("has-lazyerror"), null == l2 || l2.emit("lazyLoad:error", e2, t3, f2);
        })), t3.classList.add("f-lazyload"), t3.classList.add(a$4), null == l2 || l2.emit("lazyLoad:load", e2, t3, f2), o4 && (t3.src = o4), i4 && (t3.srcset = i4), d2 && (t3.sizes = d2);
        else if (u2) {
          if (!document.body.contains(t3)) {
            document.createElement("img").src = r2;
          }
          t3.style.backgroundImage = `url('${r2}')`;
        }
        delete t3.dataset.lazySrc, delete t3.dataset.lazySrcset, delete t3.dataset.lazySizes, delete t3.dataset.lazyBg;
      }
    }
  }
  function i2() {
    if (!l2) return;
    const e2 = [...l2.getVisibleSlides()], t2 = n2().preload;
    if (t2 > 0) {
      const a2 = l2.getPosition(), s2 = l2.getViewportDim();
      e2.push(...l2.getVisibleSlides(a2 + s2 * t2), ...l2.getVisibleSlides(a2 - s2 * t2));
    }
    for (const t3 of e2) o2(t3);
  }
  return { init: function(e2) {
    l2 = e2, l2.on("render", i2);
  }, destroy: function() {
    null == l2 || l2.off("render", i2), l2 = void 0;
  } };
};
/*! License details at fancyapps.com/license */
const r$2 = { prevTpl: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" tabindex="-1"><path d="M15 3l-9 9 9 9"></path></svg>', nextTpl: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" tabindex="-1"><path d="M9 3l9 9-9 9"></path></svg>' }, s$2 = () => {
  let s2, i2, l2;
  function a2() {
    const t2 = null == s2 ? void 0 : s2.getOptions().Arrows;
    return t$6(t2) ? Object.assign(Object.assign({}, r$2), t2) : r$2;
  }
  function u2(e2) {
    if (!s2) return;
    const o2 = `<button data-carousel-go-${e2} tabindex="0" class="f-button is-arrow is-${e2}" title="{{${e2.toUpperCase()}}}">` + a2()[`${e2}Tpl`] + "</button", r2 = e$8(s2.localize(o2)) || void 0;
    return r2 && s$7(r2, a2()[`${e2}Class`]), r2;
  }
  function g2() {
    var t2;
    null == i2 || i2.remove(), i2 = void 0, null == l2 || l2.remove(), l2 = void 0, null === (t2 = null == s2 ? void 0 : s2.getContainer()) || void 0 === t2 || t2.classList.remove("has-arrows");
  }
  function c2() {
    s2 && false !== s2.getOptions().Arrows && s2.getPages().length > 1 ? (!(function() {
      if (!s2) return;
      const t2 = s2.getViewport();
      t2 && (i2 || (i2 = u2("prev"), i2 && t2.insertAdjacentElement("beforebegin", i2)), l2 || (l2 = u2("next"), l2 && t2.insertAdjacentElement("afterend", l2)), s$5(s2.getContainer(), "has-arrows", !(!i2 && !l2)));
    })(), s2 && (null == i2 || i2.toggleAttribute("aria-disabled", !s2.canGoPrev()), null == l2 || l2.toggleAttribute("aria-disabled", !s2.canGoNext()))) : g2();
  }
  return { init: function(t2) {
    s2 = t2.on(["change", "refresh"], c2);
  }, destroy: function() {
    g2(), null == s2 || s2.off(["change", "refresh"], c2), s2 = void 0;
  } };
};
/*! License details at fancyapps.com/license */
const t$1 = { moveLeft: { tpl: '<button data-panzoom-action="moveLeft" class="f-button" title="{{MOVE_LEFT}}"><svg><path d="M5 12h14M5 12l6 6M5 12l6-6"/></svg></button>' }, moveRight: { tpl: '<button data-panzoom-action="moveRight" class="f-button" title="{{MOVE_RIGHT}}"><svg><path d="M5 12h14M13 18l6-6M13 6l6 6"/></svg></button>' }, moveUp: { tpl: '<button data-panzoom-action="moveUp" class="f-button" title="{{MOVE_UP}}"><svg><path d="M12 5v14M18 11l-6-6M6 11l6-6"/></svg></button>' }, moveDown: { tpl: '<button data-panzoom-action="moveDown" class="f-button" title="{{MOVE_DOWN}}"><svg><path d="M12 5v14M18 13l-6 6M6 13l6 6"/></svg></button>' }, zoomIn: { tpl: '<button data-panzoom-action="zoomIn" class="f-button" title="{{ZOOM_IN}}"><svg><circle cx="11" cy="11" r="7.5"/><path d="m21 21-4.35-4.35M11 8v6M8 11h6"/></svg></button>' }, zoomOut: { tpl: '<button data-panzoom-action="zoomOut" class="f-button" title="{{ZOOM_OUT}}"><svg><circle cx="11" cy="11" r="7.5"/><path d="m21 21-4.35-4.35M8 11h6"/></svg></button>' }, toggle1to1: { tpl: '<button data-panzoom-action="toggleFull" class="f-button" title="{{TOGGLE_FULL}}"><svg><path d="M3.51 3.07c5.74.02 11.48-.02 17.22.02 1.37.1 2.34 1.64 2.18 3.13 0 4.08.02 8.16 0 12.23-.1 1.54-1.47 2.64-2.79 2.46-5.61-.01-11.24.02-16.86-.01-1.36-.12-2.33-1.65-2.17-3.14 0-4.07-.02-8.16 0-12.23.1-1.36 1.22-2.48 2.42-2.46Z"/><path d="M5.65 8.54h1.49v6.92m8.94-6.92h1.49v6.92M11.5 9.4v.02m0 5.18v0"/></svg></button>' }, toggleFull: { tpl: '<button data-panzoom-action="toggleFull" class="f-button" title="{{TOGGLE_FULL}}"><svg><g><line x1="11" y1="8" x2="11" y2="14"></line></g><circle cx="11" cy="11" r="7.5"/><path d="m21 21-4.35-4.35M8 11h6"/></svg></button>' }, rotateCCW: { tpl: '<button data-panzoom-action="rotateCCW" class="f-button" title="{{ROTATE_CCW}}"><svg><path d="M15 4.55a8 8 0 0 0-6 14.9M9 15v5H4M18.37 7.16v.01M13 19.94v.01M16.84 18.37v.01M19.37 15.1v.01M19.94 11v.01"/></svg></button>' }, rotateCW: { tpl: '<button data-panzoom-action="rotateCW" class="f-button" title="{{ROTATE_CW}}"><svg><path d="M9 4.55a8 8 0 0 1 6 14.9M15 15v5h5M5.63 7.16v.01M4.06 11v.01M4.63 15.1v.01M7.16 18.37v.01M11 19.94v.01"/></svg></button>' }, flipX: { tpl: '<button data-panzoom-action="flipX" class="f-button" title="{{FLIP_X}}"><svg><path d="M12 3v18M16 7v10h5L16 7M8 7v10H3L8 7"/></svg></button>' }, flipY: { tpl: '<button data-panzoom-action="flipY" class="f-button" title="{{FLIP_Y}}"><svg><path d="M3 12h18M7 16h10L7 21v-5M7 8h10L7 3v5"/></svg></button>' }, reset: { tpl: '<button data-panzoom-action="reset" class="f-button" title="{{RESET}}"><svg><path d="M20 11A8.1 8.1 0 0 0 4.5 9M4 5v4h4M4 13a8.1 8.1 0 0 0 15.5 2m.5 4v-4h-4"/></svg></button>' } };
/*! License details at fancyapps.com/license */
var i$3;
!(function(t2) {
  t2.Left = "left", t2.middle = "middle", t2.right = "right";
})(i$3 || (i$3 = {}));
const s$1 = Object.assign({ counter: { tpl: '<div class="f-carousel__counter"><span data-carousel-page></span>/<span data-carousel-pages></span></div>' }, download: { tpl: '<button data-carousel-download class="f-button" title="{{DOWNLOAD}}"><svg><path d="M4 17v2a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-2M7 11l5 5 5-5M12 4v12"/></svg></button>' }, autoplay: { tpl: '<button data-autoplay-action="toggle" class="f-button" title="{{TOGGLE_AUTOPLAY}}"><svg><g><path d="M5 3.5 19 12 5 20.5Z"/></g><g><path d="M8 4v15M17 4v15"/></g></svg></button>' }, thumbs: { tpl: '<button data-thumbs-action="toggle" class="f-button" title="{{TOGGLE_THUMBS}}"><svg><rect width="18" height="14" x="3" y="3" rx="2"/><path d="M4 21h1M9 21h1M14 21h1M19 21h1"/></svg></button>' } }, t$1), a$3 = { absolute: false, display: { left: [], middle: ["zoomIn", "zoomOut", "toggle1to1", "rotateCCW", "rotateCW", "flipX", "flipY", "reset"], right: [] }, enabled: "auto", items: {} }, u$2 = () => {
  let i2, u2;
  function d2() {
    const e2 = null == i2 ? void 0 : i2.getOptions().Toolbar;
    return t$6(e2) ? Object.assign(Object.assign({}, a$3), e2) : a$3;
  }
  function r2() {
    var t2, a2, r3;
    if (!(null == i2 ? void 0 : i2.getOptions().Toolbar)) return;
    if (!i2 || u2) return;
    let c2 = d2().enabled;
    if (!c2) return;
    let f2 = d2().absolute;
    const g2 = i2.getSlides().length > 1;
    let p2 = false, b2 = false;
    for (const t3 of i2.getSlides()) t3.panzoomRef && (p2 = true), (t3.downloadSrc || "image" === t3.type && t3.src) && (b2 = true);
    let m2 = (null === (t2 = i2.getPlugins().Thumbs) || void 0 === t2 ? void 0 : t2.isEnabled()) || false, v2 = g2 && i2.getPlugins().Autoplay || false, h2 = i2.getPlugins().Fullscreen && (document.fullscreenEnabled || document.webkitFullscreenEnabled);
    if ("auto" === c2 && (c2 = p2), !c2) return;
    u2 = document.createElement("div"), u2.classList.add("f-carousel__toolbar");
    const j = d2().display, y2 = r$3({}, s$1, d2().items);
    for (const t3 of ["left", "middle", "right"]) {
      const l2 = j[t3] || [], s2 = document.createElement("div");
      s2.classList.add("f-carousel__toolbar__column"), s2.classList.add(`is-${t3}`);
      for (const t4 of l2) {
        let l3;
        if (t$8(t4)) {
          if ("counter" === t4 && !g2) continue;
          if ("autoplay" === t4 && !v2) continue;
          if (t$1[t4] && !p2) continue;
          if ("fullscreen" === t4 && !h2) continue;
          if ("thumbs" === t4 && !m2) continue;
          if ("download" === t4 && !b2) continue;
          l3 = y2[t4];
        }
        if ("object" == typeof t4 && (l3 = t4), l3 && l3.tpl) {
          let t5 = i2.localize(l3.tpl);
          t5 = t5.split("<svg>").join('<svg tabindex="-1" width="24" height="24" viewBox="0 0 24 24">');
          const e2 = e$8(t5);
          e2 && ("function" == typeof l3.click && i2 && e2.addEventListener("click", ((t6) => {
            t6.preventDefault(), t6.stopPropagation(), "function" == typeof l3.click && i2 && l3.click(i2, t6);
          })), s2.append(e2));
        }
      }
      u2.append(s2);
    }
    u2.childElementCount && (true === f2 && u2.classList.add("is-absolute"), null === (a2 = i2.getContainer()) || void 0 === a2 || a2.classList.add("has-toolbar"), null === (r3 = i2.getViewport()) || void 0 === r3 || r3.insertAdjacentElement("beforebegin", u2));
  }
  return { init: function(t2) {
    i2 = t2, i2.on("initSlides", r2);
  }, destroy: function() {
    var t2;
    null == i2 || i2.off("initSlides", r2), null === (t2 = null == i2 ? void 0 : i2.getContainer()) || void 0 === t2 || t2.classList.remove("has-toolbar"), null == u2 || u2.remove(), u2 = void 0;
  }, add: function(t2, e2) {
    s$1[t2] = e2;
  }, isEnabled: function() {
    return !!u2;
  } };
};
/*! License details at fancyapps.com/license */
const e$1 = { autoStart: true, pauseOnHover: true, showProgressbar: true, timeout: 2e3 }, n$3 = () => {
  let n2, o2, i2 = false, a2 = false, l2 = false, s2 = null;
  function r2(o3) {
    const i3 = null == n2 ? void 0 : n2.getOptions().Autoplay;
    let a3 = (t$6(i3) ? Object.assign(Object.assign({}, e$1), i3) : e$1)[o3];
    return a3 && "function" == typeof a3 && n2 ? a3(n2) : a3;
  }
  function u2() {
    var t2;
    const e2 = (null === (t2 = null == n2 ? void 0 : n2.getPage()) || void 0 === t2 ? void 0 : t2.slides) || [];
    for (const t3 of e2) if (0 === t3.state) return true;
    return false;
  }
  function d2() {
    clearTimeout(o2), o2 = void 0;
  }
  function g2() {
    if (o2) return;
    if (l2) return;
    if (u2()) return;
    if (!(null == n2 ? void 0 : n2.isSettled())) return;
    !(function() {
      var t3, e2, o3, i3;
      if (!n2) return;
      if (v2(), !r2("showProgressbar")) return;
      let a3 = r2("progressbarParentEl");
      !a3 && (null === (t3 = n2.getPlugins().Toolbar) || void 0 === t3 ? void 0 : t3.isEnabled()) && (a3 = n2.getContainer());
      if (!a3 && true !== (null === (e2 = n2.getPlugins().Toolbar) || void 0 === e2 ? void 0 : e2.isEnabled())) {
        const t4 = (null === (o3 = n2.getPages()[0]) || void 0 === o3 ? void 0 : o3.slides) || [], e3 = (null === (i3 = n2.getPage()) || void 0 === i3 ? void 0 : i3.slides) || [];
        1 === t4.length && 1 === e3.length && (a3 = e3[0].el);
      }
      a3 || (a3 = n2.getViewport());
      if (!a3) return;
      s2 = document.createElement("div"), s2.classList.add("f-progressbar"), a3.prepend(s2);
      const l3 = r2("timeout") || 1e3;
      s2.style.animationDuration = `${l3}ms`;
    })();
    const t2 = r2("timeout");
    o2 = setTimeout((() => {
      n2 && i2 && !a2 && (n2.isInfinite() || n2.getPageIndex() !== n2.getPages().length - 1 ? n2.next() : n2.goTo(0));
    }), t2);
  }
  function f2() {
    var t2, e2;
    if (!n2 || n2.getPages().length < 2 || false === n2.getOptions().Autoplay) return;
    if (i2) return;
    i2 = true, n2.emit("autoplay:start", r2("timeout")), null === (t2 = n2.getContainer()) || void 0 === t2 || t2.classList.add("has-autoplay"), null === (e2 = n2.getTween()) || void 0 === e2 || e2.on("start", b2);
    const o3 = null == n2 ? void 0 : n2.getContainer();
    o3 && r2("pauseOnHover") && matchMedia("(hover: hover)").matches && (o3.addEventListener("mouseenter", E2, false), o3.addEventListener("mouseleave", x2, false)), n2.on("change", h2), n2.on("settle", y2), n2.on("contentReady", p2), n2.on("panzoom:animationStart", c2), n2.isSettled() && g2();
  }
  function c2() {
    var t2, e2;
    if (d2(), v2(), i2 && n2) {
      n2.emit("autoplay:end"), null === (t2 = n2.getContainer()) || void 0 === t2 || t2.classList.remove("has-autoplay"), null === (e2 = n2.getTween()) || void 0 === e2 || e2.off("start", b2);
      const o3 = null == n2 ? void 0 : n2.getContainer();
      o3 && (o3.removeEventListener("mouseenter", E2, false), o3.removeEventListener("mouseleave", x2, false));
    }
    n2 && (n2.off("change", h2), n2.off("settle", y2), n2.off("contentReady", p2), n2.off("panzoom:animationStart", c2)), i2 = false, a2 = false;
  }
  function v2() {
    s2 && (s2.remove(), s2 = null);
  }
  function m2() {
    n2 && n2.getPages().length > 1 && r2("autoStart") && f2();
  }
  function p2(t2) {
    n2 && n2.getPageIndex(t2.index) === n2.getPageIndex() && (!i2 || l2 || u2() || g2());
  }
  function P(t2, e2) {
    const n3 = e2.target;
    n3 && !e2.defaultPrevented && "toggle" === n3.dataset.autoplayAction && L.toggle();
  }
  function h2() {
    !n2 || !(null == n2 ? void 0 : n2.isInfinite()) && n2.getPageIndex() === n2.getPages().length - 1 ? c2() : (v2(), d2());
  }
  function y2() {
    !i2 || l2 || a2 || g2();
  }
  function b2() {
    d2(), v2();
  }
  function E2() {
    l2 = true, i2 && (v2(), d2());
  }
  function x2() {
    l2 = false, i2 && !a2 && (null == n2 ? void 0 : n2.isSettled()) && g2();
  }
  const L = { init: function(t2) {
    n2 = t2, n2.on("ready", m2), n2.on("click", P);
  }, destroy: function() {
    c2(), null == n2 || n2.off("ready", m2), null == n2 || n2.off("click", P), n2 = void 0;
  }, isEnabled: () => i2, pause: function() {
    a2 = true, d2();
  }, resume: function() {
    a2 = false, i2 && !l2 && g2();
  }, start() {
    f2();
  }, stop() {
    c2();
  }, toggle() {
    i2 ? c2() : f2();
  } };
  return L;
};
/*! License details at fancyapps.com/license */
const r$1 = { Carousel: { Lazyload: { showLoading: false } }, minCount: 2, showOnStart: true, thumbTpl: '<button aria-label="Slide to #{{page}}"><img draggable="false" alt="{{alt}}" data-lazy-src="{{src}}" /></button>', type: "modern" };
let u$1;
const a$2 = () => {
  let a2, d2, c2, f2 = 0, m2 = 0, g2 = true;
  function h2(e2) {
    const n2 = null == a2 ? void 0 : a2.getOptions().Thumbs;
    let i2 = (t$6(n2) ? Object.assign(Object.assign({}, r$1), n2) : r$1)[e2];
    return i2 && "function" == typeof i2 ? i2() : i2;
  }
  function v2() {
    if (!a2) return false;
    if (false === (null == a2 ? void 0 : a2.getOptions().Thumbs)) return false;
    let t2 = 0;
    for (const e2 of a2.getSlides()) e2.thumbSrc && t2++;
    return t2 >= h2("minCount");
  }
  function p2() {
    return "modern" === h2("type");
  }
  function b2(t2 = false) {
    var e2;
    const n2 = null == a2 ? void 0 : a2.getContainer();
    if (!a2 || !n2 || c2) return;
    if (!v2()) return;
    if (!c2) {
      const t3 = n2.nextElementSibling;
      (null == t3 ? void 0 : t3.classList.contains("f-thumbs")) && (c2 = t3);
    }
    if (!c2) {
      c2 = document.createElement("div");
      const t3 = h2("parentEl");
      t3 ? t3.insertAdjacentElement("beforeend", c2) : n2.insertAdjacentElement("afterend", c2);
    }
    const i2 = null === (e2 = h2("Carousel")) || void 0 === e2 ? void 0 : e2.classes;
    (null == i2 ? void 0 : i2.container) && s$7(c2, i2.container), s$7(c2, "f-thumbs"), s$7(c2, `is-${h2("type")}`), s$7(c2, "is-syncing"), t2 && (c2.style.maxHeight = "0px");
  }
  function y2(t2) {
    const e2 = t2.thumb ? t2.thumb instanceof HTMLImageElement ? t2.thumb.src : t2.thumb : t2.thumbSrc || void 0, i2 = void 0 === t2.thumbAlt ? `Thumbnail #${t2.index}` : t2.thumbAlt + "";
    let o2 = h2("thumbTpl");
    return o2 = n$4(o2, "{{alt}}", i2), o2 = n$4(o2, "{{src}}", e2 + ""), o2 = n$4(o2, "{{index}}", `${t2.index}`), o2 = n$4(o2, "{{page}}", `${t2.index || 1}`), { html: o2, class: t2.thumbClass };
  }
  function S() {
    var t2;
    if (!u$1) return;
    if (!a2 || !c2 || d2) return;
    const n2 = [];
    for (const t3 of a2.getSlides()) n2.push(y2(t3));
    n2.length && (d2 = u$1(c2, r$3({}, { Sync: { target: a2 }, Lazyload: { preload: 1 }, slides: n2, classes: { container: "f-thumbs", viewport: "f-thumbs__viewport", slide: "f-thumbs__slide" }, initialSlide: a2.getOptions().initialPage, center: true, fill: !p2(), infinite: false, dragFree: true, rtl: a2.getOptions().rtl || false, slidesPerPage: (t3) => {
      let e2 = 0;
      return p2() && (!(function() {
        if (!p2()) return;
        if (!c2) return;
        const t4 = (t5) => c2 && parseFloat(getComputedStyle(c2).getPropertyValue("--f-thumb-" + t5)) || 0;
        f2 = t4("width"), m2 = t4("clip-width");
      })(), e2 = 4 * (f2 - m2)), t3 && t3.getTotalSlideDim() <= t3.getViewportDim() - e2 ? 1 / 0 : 1;
    } }, r$1.Carousel || {}, h2("Carousel") || {}), { Sync: i$4, Lazyload: l$3 }), d2.on("ready", (() => {
      null == a2 || a2.emit("thumbs:ready");
    })), d2.on("destroy", (() => {
      null == a2 || a2.emit("thumbs:destroy");
    })), d2.init(), null === (t2 = d2.getGestures()) || void 0 === t2 || t2.on("start", (() => {
      g2 = false;
    })), d2.on("click", ((t3, e2) => {
      const n3 = e2.target;
      if (n3) {
        const t4 = n3.matches("button") ? n3 : n3.firstElementChild;
        t4 && t4.matches("button") && (e2.preventDefault(), t4.focus({ preventScroll: true }));
      }
    })), s$7(a2.getContainer(), "has-thumbs"), L());
  }
  function x2() {
    v2() && h2("showOnStart") && (b2(), S());
  }
  function C() {
    var t2;
    v2() && (null == a2 || a2.on("addSlide", E2), null == a2 || a2.on("click", T2), null === (t2 = null == a2 ? void 0 : a2.getGestures()) || void 0 === t2 || t2.on("start", P));
  }
  function P() {
    var t2, e2;
    g2 = true;
    (null === (t2 = document.activeElement) || void 0 === t2 ? void 0 : t2.closest(".f-thumbs")) && (null === (e2 = document.activeElement) || void 0 === e2 || e2.blur());
  }
  function j() {
    var t2, e2;
    null == c2 || c2.classList.toggle("is-syncing", false === (null == a2 ? void 0 : a2.hasNavigated()) || (null === (t2 = null == a2 ? void 0 : a2.getTween()) || void 0 === t2 ? void 0 : t2.isRunning())), L(), (null === (e2 = null == a2 ? void 0 : a2.getGestures()) || void 0 === e2 ? void 0 : e2.isPointerDown()) && (function() {
      if (!p2()) return;
      if (!a2 || !d2) return;
      if (!g2) return;
      const t3 = d2.getTween(), e3 = d2.getPages(), n2 = a2.getPageIndex() || 0, o2 = a2.getPageProgress() || 0;
      if (!(a2 && e3 && e3[n2] && t3)) return;
      const l2 = t3.isRunning() ? t3.getCurrentValues().pos : d2.getPosition();
      if (void 0 === l2) return;
      let s2 = e3[n2].pos + o2 * (f2 - m2);
      s2 = t$7(e3[0].pos, s2, e3[e3.length - 1].pos), t3.from({ pos: l2 }).to({ pos: s2 }).start();
    })();
  }
  function w2() {
    g2 = true;
  }
  function E2(t2, e2) {
    null == d2 || d2.add(y2(e2), e2.index);
  }
  function T2(t2, e2) {
    const n2 = e2.target;
    n2 && !e2.defaultPrevented && "toggle" === n2.dataset.thumbsAction && (function() {
      if (c2 || (b2(true), S()), !c2) return;
      const t3 = (null == d2 ? void 0 : d2.isVertical()) ? "maxWidth" : "maxHeight", e3 = c2.style[t3];
      c2.style[t3] = e3 ? "" : "0px";
    })();
  }
  function L() {
    if (!p2()) return;
    if (!a2 || !d2) return;
    const t2 = (null == d2 ? void 0 : d2.getSlides()) || [];
    let e2 = -0.5 * f2;
    for (const n2 of t2) {
      const t3 = n2.el;
      if (!t3) continue;
      let i2 = a2.getPageProgress(n2.index) || 0;
      i2 = Math.max(-1, Math.min(1, i2)), i2 > -1 && i2 < 1 && (e2 += 0.5 * f2 * (1 - Math.abs(i2))), i2 = Math.round(1e4 * i2) / 1e4, e2 = Math.round(1e4 * e2) / 1e4, t3.style.setProperty("--progress", `${Math.abs(i2)}`), t3.style.setProperty("--shift", `${(null == a2 ? void 0 : a2.isRTL()) ? -1 * e2 : e2}px`), i2 > -1 && i2 < 1 && (e2 += 0.5 * f2 * (1 - Math.abs(i2)));
    }
  }
  return { init: function(t2, e2) {
    u$1 = e2, a2 = t2, a2.on("ready", C), a2.on("initSlides", x2), a2.on("render", j), a2.on("change", w2);
  }, destroy: function() {
    var t2, e2;
    null == a2 || a2.off("ready", C), null == a2 || a2.off("initSlides", x2), null == a2 || a2.off("render", j), null == a2 || a2.off("change", w2), null == a2 || a2.off("addSlide", E2), null == a2 || a2.off("click", T2), null === (t2 = null == a2 ? void 0 : a2.getGestures()) || void 0 === t2 || t2.off("start", P), null === (e2 = null == a2 ? void 0 : a2.getContainer()) || void 0 === e2 || e2.classList.remove("has-thumbs"), a2 = void 0, null == d2 || d2.destroy(), d2 = void 0, null == c2 || c2.remove(), c2 = void 0;
  }, getCarousel: function() {
    return d2;
  }, getContainer: function() {
    return c2;
  }, isEnabled: function() {
    return v2();
  } };
};
/*! License details at fancyapps.com/license */
const a$1 = { iframeAttr: { allow: "autoplay; fullscreen", scrolling: "auto" } }, i$2 = () => {
  let i2;
  function l2(t2, a2) {
    let i3 = a2.src;
    if (!t$8(i3)) return;
    let l3 = a2.type;
    if (!l3) {
      if (l3 || ("#" === i3.charAt(0) ? l3 = "inline" : i3.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.((a)?png|avif|gif|jp(g|eg)|pjp(eg)?|jfif|svg|webp|bmp|ico|tif(f)?)((\?|#).*)?$)/i) ? l3 = "image" : i3.match(/\.(pdf)((\?|#).*)?$/i) ? l3 = "pdf" : i3.match(/\.(html|php)((\?|#).*)?$/i) && (l3 = "iframe")), !l3) {
        const t3 = i3.match(/(?:maps\.)?google\.([a-z]{2,3}(?:\.[a-z]{2})?)\/(?:(?:(?:maps\/(?:place\/(?:.*)\/)?\@(.*),(\d+.?\d+?)z))|(?:\?ll=))(.*)?/i);
        t3 && (i3 = `https://maps.google.${t3[1]}/?ll=${(t3[2] ? t3[2] + "&z=" + Math.floor(parseFloat(t3[3])) + (t3[4] ? t3[4].replace(/^\//, "&") : "") : t3[4] + "").replace(/\?/, "&")}&output=${t3[4] && t3[4].indexOf("layer=c") > 0 ? "svembed" : "embed"}`, l3 = "gmap");
      }
      if (!l3) {
        const t3 = i3.match(/(?:maps\.)?google\.([a-z]{2,3}(?:\.[a-z]{2})?)\/(?:maps\/search\/)(.*)/i);
        t3 && (i3 = `https://maps.google.${t3[1]}/maps?q=${t3[2].replace("query=", "q=").replace("api=1", "")}&output=embed`, l3 = "gmap");
      }
      a2.src = i3, a2.type = l3;
    }
  }
  function o2(e2, l3) {
    "iframe" !== l3.type && "pdf" !== l3.type && "gmap" !== l3.type || (function(e3) {
      if (!i2 || !e3.el || !e3.src) return;
      const l4 = document.createElement("iframe");
      l4.classList.add("f-iframe");
      for (const [e4, o4] of Object.entries((function() {
        const e5 = null == i2 ? void 0 : i2.getOptions().Html;
        return t$6(e5) ? Object.assign(Object.assign({}, a$1), e5) : a$1;
      })().iframeAttr || {})) l4.setAttribute(e4, o4);
      l4.onerror = () => {
        i2 && 1 === i2.getState() && i2.showError(e3, "{{IFRAME_ERROR}}");
      }, l4.src = e3.src;
      const o3 = document.createElement("div");
      if (o3.classList.add("f-html"), o3.append(l4), e3.width) {
        let t2 = `${e3.width}`;
        t2.match(/^\d+$/) && (t2 += "px"), o3.style.maxWidth = `${t2}`;
      }
      if (e3.height) {
        let t2 = `${e3.height}`;
        t2.match(/^\d+$/) && (t2 += "px"), o3.style.maxHeight = `${t2}`;
      }
      if (e3.aspectRatio) {
        const t2 = e3.el.getBoundingClientRect();
        o3.style.aspectRatio = `${e3.aspectRatio}`, o3.style[t2.width > t2.height ? "width" : "height"] = "auto", o3.style[t2.width > t2.height ? "maxWidth" : "maxHeight"] = "none";
      }
      e3.contentEl = l4, e3.htmlEl = o3, e3.el.classList.add("has-html"), e3.el.classList.add("has-iframe"), e3.el.classList.add(`has-${e3.type}`), e3.el.prepend(o3), i2.emit("contentReady", e3);
    })(l3);
  }
  function n2(t2, e2) {
    var a2, l3;
    "iframe" !== e2.type && "pdf" !== e2.type && "gmap" !== e2.type || (null == i2 || i2.hideError(e2), null === (a2 = e2.contentEl) || void 0 === a2 || a2.remove(), e2.contentEl = void 0, null === (l3 = e2.htmlEl) || void 0 === l3 || l3.remove(), e2.htmlEl = void 0);
  }
  return { init: function(t2) {
    i2 = t2, i2.on("addSlide", l2), i2.on("attachSlideEl", o2), i2.on("detachSlideEl", n2);
  }, destroy: function() {
    null == i2 || i2.off("addSlide", l2), null == i2 || i2.off("attachSlideEl", o2), null == i2 || i2.off("detachSlideEl", n2), i2 = void 0;
  } };
};
/*! License details at fancyapps.com/license */
const n$2 = (t2, e2 = {}) => {
  const o2 = new URL(t2), n2 = new URLSearchParams(o2.search), i2 = new URLSearchParams();
  for (const [t3, o3] of [...n2, ...Object.entries(e2)]) {
    let e3 = o3 + "";
    if ("t" === t3) {
      let t4 = e3.match(/((\d*)m)?(\d*)s?/);
      t4 && i2.set("start", 60 * parseInt(t4[2] || "0") + parseInt(t4[3] || "0") + "");
    } else i2.set(t3, e3);
  }
  let l2 = i2 + "", s2 = t2.match(/#t=((.*)?\d+s)/);
  return s2 && (l2 += `#t=${s2[1]}`), l2;
}, i$1 = { autoplay: false, html5videoTpl: `<video class="f-html5video" playsinline controls controlsList="nodownload" poster="{{poster}}">
    <source src="{{src}}" type="{{format}}" />Sorry, your browser doesn't support embedded videos.</video>`, iframeAttr: { allow: "autoplay; fullscreen", scrolling: "auto", credentialless: "" }, vimeo: { byline: 1, color: "00adef", controls: 1, dnt: 1, muted: 0 }, youtube: { controls: 1, enablejsapi: 1, nocookie: 1, rel: 0, fs: 1 } }, l$2 = () => {
  let l2, s2 = false;
  function a2() {
    const e2 = null == l2 ? void 0 : l2.getOptions().Video;
    return t$6(e2) ? Object.assign(Object.assign({}, i$1), e2) : i$1;
  }
  function r2() {
    var t2;
    return null === (t2 = null == l2 ? void 0 : l2.getPage()) || void 0 === t2 ? void 0 : t2.slides[0];
  }
  const c2 = (t2) => {
    var e2;
    try {
      let o2 = JSON.parse(t2.data);
      if ("https://player.vimeo.com" === t2.origin) {
        if ("ready" === o2.event) for (let o3 of Array.from((null === (e2 = null == l2 ? void 0 : l2.getContainer()) || void 0 === e2 ? void 0 : e2.getElementsByClassName("f-iframe")) || [])) o3 instanceof HTMLIFrameElement && o3.contentWindow === t2.source && (o3.dataset.ready = "true");
      } else if (t2.origin.match(/^https:\/\/(www.)?youtube(-nocookie)?.com$/) && "onReady" === o2.event) {
        const t3 = document.getElementById(o2.id);
        t3 && (t3.dataset.ready = "true");
      }
    } catch (t3) {
    }
  };
  function d2(t2, o2) {
    const i2 = o2.src;
    if (!t$8(i2)) return;
    let l3 = o2.type;
    if (!l3 || "html5video" === l3) {
      const t3 = i2.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i);
      t3 && (l3 = "html5video", o2.html5videoFormat = o2.html5videoFormat || "video/" + ("ogv" === t3[1] ? "ogg" : t3[1]));
    }
    if (!l3 || "youtube" === l3) {
      const t3 = i2.match(/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(?:watch\?(?:.*&)?v=|v\/|u\/|shorts\/|embed\/?)?(videoseries\?list=(?:.*)|[\w-]{11}|\?listType=(?:.*)&list=(?:.*))(?:.*)/i);
      if (t3) {
        const e2 = Object.assign(Object.assign({}, a2().youtube), o2.youtube || {}), s3 = `www.youtube${e2.nocookie ? "-nocookie" : ""}.com`, r3 = n$2(i2, e2), c3 = encodeURIComponent(t3[2]);
        o2.videoId = c3, o2.src = `https://${s3}/embed/${c3}?${r3}`, o2.thumb = o2.thumb || `https://i.ytimg.com/vi/${c3}/mqdefault.jpg`, l3 = "youtube";
      }
    }
    if (!l3 || "vimeo" === l3) {
      const t3 = i2.match(/^.+vimeo.com\/(?:\/)?(video\/)?([\d]+)((\/|\?h=)([a-z0-9]+))?(.*)?/);
      if (t3) {
        const e2 = Object.assign(Object.assign({}, a2().vimeo), o2.vimeo || {}), s3 = n$2(i2, e2), r3 = encodeURIComponent(t3[2]), c3 = t3[5] || "";
        o2.videoId = r3, o2.src = `https://player.vimeo.com/video/${r3}?${c3 ? `h=${c3}${s3 ? "&" : ""}` : ""}${s3}`, l3 = "vimeo";
      }
    }
    o2.type = l3;
  }
  function u2(t2, n2) {
    "html5video" === n2.type && (function(t3) {
      if (!l2 || !t3.el || !t3.src) return;
      const { el: n3, src: i2 } = t3;
      if (!n3 || !i2) return;
      const s3 = t3.html5videoTpl || a2().html5videoTpl, r3 = t3.html5videoFormat || a2().html5videoFormat;
      if (!s3) return;
      const c3 = t3.poster || (t3.thumb && t$8(t3.thumb) ? t3.thumb : ""), d3 = e$8(s3.replace(/\{\{src\}\}/gi, i2 + "").replace(/\{\{format\}\}/gi, r3 || "").replace(/\{\{poster\}\}/gi, c3 + ""));
      if (!d3) return;
      const u3 = document.createElement("div");
      u3.classList.add("f-html"), u3.append(d3), t3.contentEl = d3, t3.htmlEl = u3, n3.classList.add(`has-${t3.type}`), n3.prepend(u3), h2(t3), l2.emit("contentReady", t3);
    })(n2), "youtube" !== n2.type && "vimeo" !== n2.type || (function(t3) {
      if (!l2 || !t3.el || !t3.src) return;
      const e2 = document.createElement("iframe");
      e2.classList.add("f-iframe"), e2.setAttribute("id", `f-iframe_${t3.videoId}`);
      for (const [t4, o3] of Object.entries(a2().iframeAttr || {})) e2.setAttribute(t4, o3);
      e2.onload = () => {
        var o3;
        l2 && 1 === l2.getState() && "youtube" === t3.type && (null === (o3 = e2.contentWindow) || void 0 === o3 || o3.postMessage(JSON.stringify({ event: "listening", id: e2.getAttribute("id") }), "*"));
      }, e2.onerror = () => {
        l2 && 1 === l2.getState() && (null == l2 || l2.showError(t3, "{{IFRAME_ERROR}}"));
      }, e2.src = t3.src;
      const o2 = document.createElement("div");
      o2.classList.add("f-html"), o2.append(e2), t3.contentEl = e2, t3.htmlEl = o2, t3.el.classList.add("has-html"), t3.el.classList.add("has-iframe"), t3.el.classList.add(`has-${t3.type}`), t3.el.prepend(o2), h2(t3), l2.emit("contentReady", t3);
    })(n2);
  }
  function m2(t2, e2) {
    var o2, n2;
    "html5video" !== e2.type && "youtube" !== e2.type && "vimeo" !== e2.type || (null === (o2 = e2.contentEl) || void 0 === o2 || o2.remove(), e2.contentEl = void 0, null === (n2 = e2.htmlEl) || void 0 === n2 || n2.remove(), e2.htmlEl = void 0), e2.poller && clearTimeout(e2.poller);
  }
  function f2() {
    s2 = false;
  }
  function p2() {
    if (s2) return;
    s2 = true;
    const t2 = r2();
    (t2 && void 0 !== t2.autoplay ? t2.autoplay : a2().autoplay) && ((function() {
      var t3;
      const e2 = r2(), o2 = null == e2 ? void 0 : e2.el;
      if (o2 && "html5video" === (null == e2 ? void 0 : e2.type)) try {
        const t4 = o2.querySelector("video");
        if (t4) {
          const e3 = t4.play();
          void 0 !== e3 && e3.then((() => {
          })).catch(((e4) => {
            t4.muted = true, t4.play();
          }));
        }
      } catch (t4) {
      }
      const n2 = null == e2 ? void 0 : e2.htmlEl;
      n2 instanceof HTMLIFrameElement && (null === (t3 = n2.contentWindow) || void 0 === t3 || t3.postMessage('{"event":"command","func":"stopVideo","args":""}', "*"));
    })(), (function() {
      const t3 = r2(), e2 = null == t3 ? void 0 : t3.type;
      if (!(null == t3 ? void 0 : t3.el) || "youtube" !== e2 && "vimeo" !== e2) return;
      const o2 = () => {
        if (t3.contentEl && t3.contentEl instanceof HTMLIFrameElement && t3.contentEl.contentWindow) {
          let e3;
          if ("true" === t3.contentEl.dataset.ready) return e3 = "youtube" === t3.type ? { event: "command", func: "playVideo" } : { method: "play", value: "true" }, e3 && t3.contentEl.contentWindow.postMessage(JSON.stringify(e3), "*"), void (t3.poller = void 0);
          "youtube" === t3.type && (e3 = { event: "listening", id: t3.contentEl.getAttribute("id") }, t3.contentEl.contentWindow.postMessage(JSON.stringify(e3), "*"));
        }
        t3.poller = setTimeout(o2, 250);
      };
      o2();
    })());
  }
  function h2(t2) {
    const e2 = null == t2 ? void 0 : t2.htmlEl;
    if (t2 && e2 && ("html5video" === t2.type || "youtube" === t2.type || "vimeo" === t2.type)) {
      if (e2.style.aspectRatio = "", e2.style.width = "", e2.style.height = "", e2.style.maxWidth = "", e2.style.maxHeight = "", t2.width) {
        let o2 = `${t2.width}`;
        o2.match(/^\d+$/) && (o2 += "px"), e2.style.maxWidth = `${o2}`;
      }
      if (t2.height) {
        let o2 = `${t2.height}`;
        o2.match(/^\d+$/) && (o2 += "px"), e2.style.maxHeight = `${o2}`;
      }
      if (t2.aspectRatio) {
        const o2 = t2.aspectRatio.split("/"), n2 = parseFloat(o2[0].trim()), i2 = o2[1] ? parseFloat(o2[1].trim()) : 0, l3 = n2 && i2 ? n2 / i2 : n2;
        e2.offsetHeight;
        const s3 = e2.getBoundingClientRect(), a3 = l3 < (s3.width || 1) / (s3.height || 1);
        e2.style.aspectRatio = `${t2.aspectRatio}`, e2.style.width = a3 ? "auto" : "", e2.style.height = a3 ? "" : "auto";
      }
    }
  }
  function v2() {
    h2(r2());
  }
  return { init: function(t2) {
    l2 = t2, l2.on("addSlide", d2), l2.on("attachSlideEl", u2), l2.on("detachSlideEl", m2), l2.on("ready", p2), l2.on("change", f2), l2.on("settle", p2), l2.on("refresh", v2), window.addEventListener("message", c2);
  }, destroy: function() {
    null == l2 || l2.off("addSlide", d2), null == l2 || l2.off("attachSlideEl", u2), null == l2 || l2.off("detachSlideEl", m2), null == l2 || l2.off("ready", p2), null == l2 || l2.off("change", f2), null == l2 || l2.off("settle", p2), null == l2 || l2.off("refresh", v2), window.removeEventListener("message", c2), l2 = void 0;
  } };
};
/*! License details at fancyapps.com/license */
const n$1 = { autoStart: false, btnTpl: '<button data-fullscreen-action="toggle" class="f-button" title="{{TOGGLE_FULLSCREEN}}"><svg><g><path d="M8 3H5a2 2 0 0 0-2 2v3M21 8V5a2 2 0 0 0-2-2h-3M3 16v3a2 2 0 0 0 2 2h3M16 21h3a2 2 0 0 0 2-2v-3"/></g><g><path d="M15 19v-2a2 2 0 0 1 2-2h2M15 5v2a2 2 0 0 0 2 2h2M5 15h2a2 2 0 0 1 2 2v2M5 9h2a2 2 0 0 0 2-2V5"/></g></svg></button>' }, t = "in-fullscreen-mode", l$1 = () => {
  let l2;
  function u2(t2) {
    const u3 = null == l2 ? void 0 : l2.getOptions().Fullscreen;
    let o3 = (t$6(u3) ? Object.assign(Object.assign({}, n$1), u3) : n$1)[t2];
    return o3 && "function" == typeof o3 && l2 ? o3(l2) : o3;
  }
  function o2() {
    var e2;
    null === (e2 = null == l2 ? void 0 : l2.getPlugins().Toolbar) || void 0 === e2 || e2.add("fullscreen", { tpl: u2("btnTpl") });
  }
  function c2() {
    if (u2("autoStart")) {
      const e2 = r2();
      e2 && d2(e2);
    }
  }
  function i2(e2, n2) {
    const t2 = n2.target;
    t2 && !n2.defaultPrevented && "toggle" === t2.dataset.fullscreenAction && b2();
  }
  function s2(e2) {
    r2() && "Escape" === e2.key && !e2.defaultPrevented && b2();
  }
  function r2() {
    return u2("el") || (null == l2 ? void 0 : l2.getContainer()) || void 0;
  }
  function a2() {
    const e2 = document;
    return e2.fullscreenEnabled ? !!e2.fullscreenElement : !!e2.webkitFullscreenEnabled && !!e2.webkitFullscreenElement;
  }
  function d2(e2) {
    const n2 = document;
    let l3;
    return e2 || (e2 = n2.documentElement), n2.fullscreenEnabled ? l3 = e2.requestFullscreen() : n2.webkitFullscreenEnabled && (l3 = e2.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT)), l3 && l3.then((() => {
      e2.classList.add(t);
    })), l3;
  }
  function f2() {
    const e2 = document;
    let n2;
    return e2.fullscreenEnabled ? n2 = e2.fullscreenElement && e2.exitFullscreen() : e2.webkitFullscreenEnabled && (n2 = e2.webkitFullscreenElement && e2.webkitExitFullscreen()), n2 && n2.then((() => {
      var e3;
      null === (e3 = r2()) || void 0 === e3 || e3.classList.remove(t);
    })), n2;
  }
  function b2() {
    const e2 = r2();
    e2 && (a2() ? f2() : d2(e2));
  }
  return { init: function(e2) {
    l2 = e2, l2.on("initPlugins", o2), l2.on("ready", c2), l2.on("click", i2);
  }, destroy: function() {
    null == l2 || l2.off("initPlugins", o2), null == l2 || l2.off("ready", c2), null == l2 || l2.off("click", i2), document.removeEventListener("keydown", s2, true);
  }, exit: f2, inFullscreen: a2, request: d2, toggle: b2 };
};
/*! License details at fancyapps.com/license */
let e, n = false, o$1 = false, i = false, r = false;
const l = () => {
  const t2 = new URL(document.URL).hash, e2 = t2.slice(1).split("-"), n2 = e2[e2.length - 1], o2 = n2 && /^\+?\d+$/.test(n2) && parseInt(e2.pop() || "1", 10) || 1;
  return { hash: t2, slug: e2.join("-"), index: o2 };
}, a = () => {
  if (!e || e.getInstance()) return;
  const { slug: t2, index: n2 } = l();
  if (!t2) return;
  let o2 = document.querySelector(`[data-slug="${t2}"]`);
  if (o2 && o2.dispatchEvent(new CustomEvent("click", { bubbles: true, cancelable: true })), !e || e.getInstance()) return;
  const i2 = document.querySelectorAll(`[data-fancybox="${t2}"]`);
  i2.length && (o2 = i2[n2 - 1], o2 && o2.dispatchEvent(new CustomEvent("click", { bubbles: true, cancelable: true })));
}, s = () => {
  var t2, n2, o2;
  if (!e) return;
  if (i) return;
  const s2 = null == e ? void 0 : e.getInstance();
  if (false === (null == s2 ? void 0 : s2.getOptions().Hash)) return;
  const { slug: c2, index: u2 } = l(), d2 = (null === (t2 = null == s2 ? void 0 : s2.getSlide()) || void 0 === t2 ? void 0 : t2.fancybox) || (null === (n2 = null == s2 ? void 0 : s2.getSlide()) || void 0 === n2 ? void 0 : n2.slug) || void 0;
  s2 && d2 && (c2 === d2 ? null === (o2 = s2.getCarousel()) || void 0 === o2 || o2.goTo(u2 - 1) : (r = true, s2.close(), r = false)), a();
}, c = () => {
  e && setTimeout((() => {
    n = true, a(), n = false, window.addEventListener("hashchange", s, false);
  }), 300);
}, u = () => {
  let t2, e2 = "auto", a2 = "";
  function s2() {
    if (!t2 || !t2.isTopMost()) return;
    if (false === t2.getOptions().Hash) return;
    const i2 = t2.getCarousel();
    if (!i2) return;
    const { hash: r2, slug: s3 } = l(), u3 = t2.getSlide();
    if (!u3) return;
    let d2 = u3.fancybox || "", h2 = parseInt(u3.index + "", 10) + 1;
    if (!d2) return;
    let f2 = `#${d2}-${h2}`;
    if (r2 !== f2 && (a2 = r2), history.scrollRestoration && (e2 = history.scrollRestoration, history.scrollRestoration = "manual"), i2.on("change", c2), !n) if (d2 === s3) try {
      window.history.replaceState({}, document.title, window.location.pathname + window.location.search + f2);
    } catch (t3) {
    }
    else try {
      window.history.pushState({}, document.title, window.location.pathname + window.location.search + f2), o$1 = true;
    } catch (t3) {
    }
  }
  function c2() {
    if (!t2 || !t2.isTopMost()) return;
    if (false === t2.getOptions().Hash) return;
    const { slug: e3 } = l(), n2 = t2.getSlide();
    if (!n2) return;
    let o2 = n2.fancybox || "", r2 = `#${o2}-${n2.index + 1}`;
    if (o2 === e3) {
      i = true;
      try {
        window.history.replaceState({}, document.title, window.location.pathname + window.location.search + r2);
      } catch (t3) {
      }
      i = false;
    }
  }
  function u2() {
    if (r) return;
    if (!t2 || !t2.isTopMost()) return;
    if (false === t2.getOptions().Hash) return;
    const e3 = t2.getSlide();
    if (!e3) return;
    if (e3.fancybox || "") {
      i = true;
      try {
        !o$1 || n || (function() {
          if (window.parent === window) return false;
          try {
            var t3 = window.frameElement;
          } catch (e4) {
            t3 = null;
          }
          return null === t3 ? "data:" === location.protocol : t3.hasAttribute("sandbox");
        })() ? window.history.replaceState({}, document.title, window.location.pathname + window.location.search + a2) : window.history.back();
      } catch (t3) {
      }
      i = false;
    }
  }
  return { init: function(e3) {
    t2 = e3, t2.on("ready", s2), t2.on("close", u2);
  }, destroy: function() {
    null == t2 || t2.off("ready", s2), null == t2 || t2.off("close", u2);
    const n2 = null == t2 ? void 0 : t2.getCarousel();
    n2 && n2.off("change", c2), t2 = void 0, history.scrollRestoration && e2 && (history.scrollRestoration = e2);
  } };
};
u.startFromUrl = a, u.setup = function(n2) {
  e || (e = n2, e$3() && (/complete|interactive|loaded/.test(document.readyState) ? c() : document.addEventListener("DOMContentLoaded", c)));
};
/*! License details at fancyapps.com/license */
const o = Object.assign(Object.assign({}, o$2), { CLOSE: "Close", NEXT: "Next", PREV: "Previous", MODAL: "You can close this modal content with the ESC key", ELEMENT_NOT_FOUND: "HTML Element Not Found", IFRAME_ERROR: "Error Loading Page" });
/*! License details at fancyapps.com/license */
const T = '<button class="f-button" title="{{CLOSE}}" data-fancybox-close><svg><path d="M19.286 4.714 4.714 19.286M4.714 4.714l14.572 14.572" /></svg></button>';
u$2().add("close", { tpl: T });
const A = (e2) => {
  e2 && e2.dispatchEvent(new CustomEvent("animationend", { bubbles: false, cancelable: true, currentTarget: e2 }));
}, M = (e2 = null, t2 = "", n2) => {
  if (!e2 || !e2.parentElement || !t2) return void (n2 && n2());
  A(e2);
  const o2 = (i2) => {
    i2.target === e2 && e2.dataset.animationName && (e2.removeEventListener("animationend", o2), delete e2.dataset.animationName, n2 && n2(), e2.classList.remove(t2));
  };
  e2.dataset.animationName = t2, e2.addEventListener("animationend", o2), s$7(e2, t2);
};
var k;
!(function(e2) {
  e2[e2.Init = 0] = "Init", e2[e2.Ready = 1] = "Ready", e2[e2.Closing = 2] = "Closing", e2[e2.Destroyed = 3] = "Destroyed";
})(k || (k = {}));
const _ = { ajax: null, backdropClick: "close", Carousel: {}, closeButton: "auto", closeExisting: false, delegateEl: void 0, dragToClose: true, fadeEffect: true, groupAll: false, groupAttr: "data-fancybox", hideClass: "f-fadeOut", hideScrollbar: true, id: void 0, idle: false, keyboard: { Escape: "close", Delete: "close", Backspace: "close", PageUp: "next", PageDown: "prev", ArrowUp: "prev", ArrowDown: "next", ArrowRight: "next", ArrowLeft: "prev" }, l10n: o, mainClass: "", mainStyle: {}, mainTpl: '<dialog class="fancybox__dialog">\n    <div class="fancybox__container" tabindex="0" aria-label="{{MODAL}}">\n      <div class="fancybox__backdrop"></div>\n      <div class="fancybox__carousel"></div>\n    </div>\n  </dialog>', on: {}, parentEl: void 0, placeFocusBack: true, showClass: "f-zoomInUp", startIndex: 0, sync: void 0, theme: "dark", triggerEl: void 0, triggerEvent: void 0, zoomEffect: true }, O = /* @__PURE__ */ new Map();
let D = 0;
const R = "with-fancybox", I = () => {
  let r2, w2, j, I2, H, B = k.Init, N = Object.assign({}, _), q = -1, V = {}, F = [], W = false, $ = true, K = 0;
  function U(e2, ...t2) {
    let n2 = N[e2];
    return n2 && "function" == typeof n2 ? n2(Pe, ...t2) : n2;
  }
  function X(e2, t2 = []) {
    const n2 = U("l10n") || {};
    e2 = String(e2).replace(/\{\{(\w+)\}\}/g, ((e3, t3) => n2[t3] || e3));
    for (let n3 = 0; n3 < t2.length; n3++) e2 = e2.split(t2[n3][0]).join(t2[n3][1]);
    return e2 = e2.replace(/\{\{(.*?)\}\}/g, ((e3, t3) => t3));
  }
  const G = /* @__PURE__ */ new Map();
  function Y(e2, ...t2) {
    const n2 = [...G.get(e2) || []];
    for (const [t3, o2] of Object.entries(N.on || {})) (t3 === e2 || t3.split(" ").indexOf(e2) > -1) && n2.push(o2);
    for (const e3 of n2) e3 && "function" == typeof e3 && e3(Pe, ...t2);
    "*" !== e2 && Y("*", e2, ...t2);
  }
  function Z(t2 = [], n2 = {}) {
    B !== k.Init && (Pe.destroy(), B = k.Init), N = r$3({}, _, n2), q = U("id") || "fancybox-" + ++D;
    const a2 = O.get(q);
    if (a2 && a2.destroy(), O.set(q, Pe), Y("init"), (function() {
      for (const [e2, t3] of Object.entries(Object.assign(Object.assign({}, z.Plugins), N.plugins || {}))) if (e2 && !V[e2] && t3 instanceof Function) {
        const n3 = t3();
        n3.init(Pe), V[e2] = n3;
      }
      Y("initPlugins");
    })(), (function(e2 = []) {
      Y("initSlides", e2), F = [...e2];
    })(t2), (function() {
      const t3 = U("parentEl") || document.body;
      if (!(t3 && t3 instanceof HTMLElement)) return;
      const n3 = X(U("mainTpl") || "");
      if (r2 = e$8(n3) || void 0, !r2) return;
      if (w2 = r2.querySelector(".fancybox__container"), !(w2 && w2 instanceof HTMLElement)) return;
      const l2 = U("mainClass");
      l2 && s$7(w2, l2);
      const a3 = U("mainStyle");
      if (a3 && t$6(a3)) for (const [e2, t4] of Object.entries(a3)) w2.style.setProperty(e2, t4);
      const u2 = U("theme"), d2 = "auto" === u2 ? window.matchMedia("(prefers-color-scheme:light)").matches : "light" === u2;
      w2.setAttribute("theme", d2 ? "light" : "dark"), r2.setAttribute("id", `${q}`), r2.addEventListener("keydown", ((e2) => {
        "Escape" === e2.key && e2.preventDefault();
      })), r2.addEventListener("wheel", ((e2) => {
        const t4 = e2.target;
        let n4 = U("wheel", e2);
        t4.closest(".f-thumbs") && (n4 = "slide");
        const o2 = "slide" === n4, s2 = [-e2.deltaX || 0, -e2.deltaY || 0, -e2.detail || 0].reduce((function(e3, t5) {
          return Math.abs(t5) > Math.abs(e3) ? t5 : e3;
        })), l3 = Math.max(-1, Math.min(1, s2)), r3 = Date.now();
        K && r3 - K < 300 ? o2 && e2.preventDefault() : (K = r3, Y("wheel", e2, l3), e2.defaultPrevented || ("close" === n4 ? we(e2) : "slide" === n4 && I2 && !n$7(t4) && (e2.preventDefault(), I2[l3 > 0 ? "prev" : "next"]())));
      }), { capture: true, passive: false }), r2.addEventListener("cancel", ((e2) => {
        we(e2);
      })), t3.append(r2), 1 === O.size && (U("hideScrollbar") && t$3(true), document.documentElement.classList.add(R));
      r2 instanceof HTMLDialogElement && r2.showModal();
      Y("initLayout");
    })(), (function() {
      if (j = (null == r2 ? void 0 : r2.querySelector(".fancybox__carousel")) || void 0, !j) return;
      const e2 = r$3({}, { Autoplay: { autoStart: false, pauseOnHover: false, progressbarParentEl: (e3) => {
        const t3 = e3.getContainer();
        return (null == t3 ? void 0 : t3.querySelector(".f-carousel__toolbar [data-autoplay-action]")) || t3;
      } }, Fullscreen: { el: w2 }, Toolbar: { absolute: true, display: { left: ["counter"], right: ["toggleFull", "autoplay", "fullscreen", "thumbs", "close"] } }, Video: { autoplay: true }, Thumbs: { minCount: 2, Carousel: { classes: { container: "fancybox__thumbs" } } }, classes: { container: "fancybox__carousel", viewport: "fancybox__viewport", slide: "fancybox__slide" }, spinnerTpl: '<div class="f-spinner" data-fancybox-close></div>', dragFree: false, slidesPerPage: 1, plugins: { Sync: i$4, Arrows: s$2, Lazyload: l$3, Zoomable: s$4, Html: i$2, Video: l$2, Autoplay: n$3, Fullscreen: l$1, Thumbs: a$2, Toolbar: u$2 } }, U("Carousel") || {}, { slides: F, enabled: true, initialPage: U("startIndex") || 0, l10n: U("l10n") });
      I2 = E(j, e2), Y("initCarousel", I2), I2.on("*", ((e3, t3, ...n3) => {
        Y(`Carousel.${t3}`, e3, ...n3);
      })), I2.on("attachSlideEl", Q), I2.on("detachSlideEl", ee), I2.on("contentReady", se), I2.on("ready", oe), I2.on("change", ne), I2.on("settle", ie), I2.on("thumbs:ready", le), I2.on("thumbs:destroy", le), I2.init();
    })(), r2 && w2) {
      if (U("closeExisting")) for (const [e2, t3] of O.entries()) e2 !== q && t3.close();
      U("fadeEffect") ? (setTimeout((() => {
        J();
      }), 500), s$7(w2, "is-revealing")) : J(), w2.classList.add("is-ready"), B = k.Ready, Y("ready");
    }
  }
  function J() {
    s$6(w2, "is-revealing");
    try {
      if (document.activeElement === r2) {
        ((null == w2 ? void 0 : w2.querySelector("[autofocus]")) || w2).focus();
      }
    } catch (e2) {
    }
  }
  function Q(e2, n2) {
    var o2;
    de(n2), null === (o2 = n2.el) || void 0 === o2 || o2.addEventListener("click", te), "inline" !== n2.type && "clone" !== n2.type || (function(e3) {
      if (!I2 || !e3 || !e3.el) return;
      let n3 = null;
      if (t$8(e3.src)) {
        const t2 = e3.src.split("#", 2).pop();
        n3 = t2 ? document.getElementById(t2) : null;
      }
      if (n3) {
        if (s$7(n3, "f-html"), "clone" === e3.type || n3.closest(".fancybox__carousel")) {
          n3 = n3.cloneNode(true);
          const t2 = n3.dataset.animationName;
          t2 && (n3.classList.remove(t2), delete n3.dataset.animationName);
          let o3 = n3.getAttribute("id");
          o3 = o3 ? `${o3}--clone` : `clone-${q}-${e3.index}`, n3.setAttribute("id", o3);
        } else if (n3.parentNode) {
          const t2 = document.createElement("div");
          t2.inert = true, n3.parentNode.insertBefore(t2, n3), e3.placeholderEl = t2;
        }
        e3.htmlEl = n3, s$7(e3.el, "has-html"), e3.el.prepend(n3), n3.classList.remove("hidden"), "none" === n3.style.display && (n3.style.display = ""), "none" === getComputedStyle(n3).getPropertyValue("display") && (n3.style.display = n3.dataset.display || "flex"), null == I2 || I2.emit("contentReady", e3);
      } else null == I2 || I2.showError(e3, "{{ELEMENT_NOT_FOUND}}");
    })(n2), "ajax" === n2.type && (function(e3) {
      const t2 = e3.el;
      if (!t2) return;
      if (e3.htmlEl || e3.xhr) return;
      null == I2 || I2.showLoading(e3), e3.state = 0;
      const n3 = new XMLHttpRequest();
      n3.onreadystatechange = function() {
        if (n3.readyState === XMLHttpRequest.DONE && B === k.Ready) if (null == I2 || I2.hideLoading(e3), e3.state = 1, 200 === n3.status) {
          let o4 = n3.responseText + "", i2 = null, s2 = null;
          if (e3.filter) {
            const t3 = document.createElement("div");
            t3.innerHTML = o4, s2 = t3.querySelector(e3.filter + "");
          }
          s2 && s2 instanceof HTMLElement ? i2 = s2 : (i2 = document.createElement("div"), i2.innerHTML = o4), i2.classList.add("f-html"), e3.htmlEl = i2, t2.classList.add("has-html"), t2.classList.add("has-ajax"), t2.prepend(i2), null == I2 || I2.emit("contentReady", e3);
        } else null == I2 || I2.showError(e3);
      };
      const o3 = U("ajax") || null;
      n3.open(o3 ? "POST" : "GET", e3.src + ""), n3.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), n3.setRequestHeader("X-Requested-With", "XMLHttpRequest"), n3.send(o3), e3.xhr = n3;
    })(n2);
  }
  function ee(e2, t2) {
    var n2;
    !(function(e3) {
      e3.closeButtonEl && (e3.closeButtonEl.remove(), e3.closeButtonEl = void 0);
    })(t2), null === (n2 = t2.el) || void 0 === n2 || n2.removeEventListener("click", te), "inline" !== t2.type && "clone" !== t2.type || (function(e3) {
      const t3 = e3.htmlEl, n3 = e3.placeholderEl;
      t3 && ("none" !== getComputedStyle(t3).getPropertyValue("display") && (t3.style.display = "none"), t3.offsetHeight);
      n3 && (t3 && n3.parentNode && n3.parentNode.insertBefore(t3, n3), n3.remove());
      e3.htmlEl = void 0, e3.placeholderEl = void 0;
    })(t2), t2.xhr && (t2.xhr.abort(), t2.xhr = void 0);
  }
  function te(e2) {
    if (!me()) return;
    if (B !== k.Ready) return e2.preventDefault(), void e2.stopPropagation();
    if (e2.defaultPrevented) return;
    if (!u$3.isClickAllowed()) return;
    const t2 = e2.composedPath()[0];
    t2.closest(".fancybox__carousel") && t2.classList.contains("fancybox__slide") && re(e2);
  }
  function ne() {
    $ = false, w2 && I2 && w2.classList.remove("is-revealing");
    const e2 = U("sync");
    if (I2 && e2) {
      const t2 = e2.getPageIndex(I2.getPageIndex()) || 0;
      e2.goTo(t2, { transition: false });
    }
  }
  function oe() {
    var e2;
    if (B !== k.Ready) return;
    fe(pe()), (function() {
      if (!U("dragToClose")) return;
      if (!I2) return;
      const e3 = I2.getViewport();
      if (!e3) return;
      const t3 = u$3(e3).init();
      if (!t3) return;
      let n2 = 0, o2 = 0, s2 = c$2().on("step", ((e4) => {
        n2 = e4.y;
        const t4 = null == I2 ? void 0 : I2.getViewport();
        if (w2 && t4) {
          const e5 = t$4(Math.abs(n2), 0, 0.5 * t4.getBoundingClientRect().height, 1, 0.5);
          w2.style.setProperty("--f-drag-opacity", e5 + ""), w2.style.setProperty("--f-drag-offset", n2 + "px");
        }
      })).on("end", (() => {
        if (!n2) {
          w2 && w2.style.removeProperty("--f-opacity");
          const e4 = null == I2 ? void 0 : I2.getViewport();
          e4 && (e4.style.transform = "");
        }
      }));
      t3.on("start", (function() {
        s2.pause();
      })).on("panstart", ((e4) => {
        var t4;
        const n3 = e4.srcEvent.target;
        n3 && !n$7(n3) && (null === (t4 = null == I2 ? void 0 : I2.getViewport()) || void 0 === t4 || t4.classList.add("is-dragging"));
      })).on("pan", (function(e4) {
        const t4 = e4.srcEvent.target;
        if (t4 && n$7(t4)) return;
        (null == I2 ? void 0 : I2.getViewport()) && "y" === e4.axis && (o2 += e4.deltaY, s2.spring({ clamp: true, mass: 1, tension: 860, friction: 17, restDelta: 0.01, restSpeed: 0.01 }).from({ y: n2 }).to({ y: o2 }).start());
      })).on("end", (function(e4) {
        s2.pause(), "y" === e4.axis && Math.abs(e4.velocityY) > 5 && Math.abs(o2) > 0 && (we(e4.srcEvent, "f-throwOut" + (e4.velocityY > 0 ? "Down" : "Up")), B === k.Closing) || 0 !== o2 && (o2 = 0, s2.spring({ clamp: true, mass: 1, tension: 140, friction: 25, restDelta: 0.1, restSpeed: 0.1, maxSpeed: 1 / 0 }).from({ y: n2 }).to({ y: o2 }).start());
      }));
    })(), document.body.addEventListener("click", ue), document.body.addEventListener("keydown", ce, { passive: false, capture: true }), he();
    const t2 = U("sync");
    t2 && (null === (e2 = t2.getTween()) || void 0 === e2 || e2.start());
  }
  function ie() {
    (null == I2 ? void 0 : I2.canGoNext()) ? he() : xe();
  }
  function se(e2, t2) {
    de(t2), fe(t2);
  }
  function le() {
    var e2;
    const t2 = null == I2 ? void 0 : I2.getPlugins().Thumbs;
    s$5(w2, "has-thumbs", (null == t2 ? void 0 : t2.isEnabled()) || false), s$5(w2, "has-vertical-thumbs", (null === (e2 = null == t2 ? void 0 : t2.getCarousel()) || void 0 === e2 ? void 0 : e2.isVertical()) || false);
  }
  function re(e2) {
    if (!!e2.composedPath()[0].closest("[data-fancybox-close]")) return void we(e2);
    if (Y("backdropClick", e2), e2.defaultPrevented) return;
    U("backdropClick") && we(e2);
  }
  function ae() {
    Ee();
  }
  function ce(e2) {
    if (!me()) return;
    if (B !== k.Ready) return;
    const t2 = e2.key, o2 = U("keyboard");
    if (!o2) return;
    if (e2.ctrlKey || e2.altKey || e2.shiftKey) return;
    const i2 = e2.composedPath()[0];
    if (!n$8(i2)) return;
    if ("Escape" !== t2 && ((e3) => {
      const t3 = ["input", "textarea", "select", "option", "video", "iframe", "[contenteditable]", "[data-selectable]", "[data-draggable]"].join(",");
      return e3.matches(t3) || e3.closest(t3);
    })(i2)) return;
    if (Y("keydown", e2), e2.defaultPrevented) return;
    const s2 = o2[t2];
    if (s2) switch (s2) {
      case "close":
        we(e2);
        break;
      case "next":
        e2.preventDefault(), null == I2 || I2.next();
        break;
      case "prev":
        e2.preventDefault(), null == I2 || I2.prev();
    }
  }
  function ue(e2) {
    if (!me()) return;
    if (B !== k.Ready) return;
    if (Ee(), e2.defaultPrevented) return;
    const t2 = e2.composedPath()[0], n2 = !!t2.closest("[data-fancybox-close]"), o2 = t2.classList.contains("fancybox__backdrop");
    (n2 || o2) && re(e2);
  }
  function de(e2) {
    var t2;
    const { el: n2, htmlEl: i2, closeButtonEl: s2 } = e2;
    if (!n2 || !i2 || s2) return;
    let l2 = U("closeButton");
    if ("auto" === l2 && (l2 = true !== (null === (t2 = null == I2 ? void 0 : I2.getPlugins().Toolbar) || void 0 === t2 ? void 0 : t2.isEnabled())), l2) {
      const t3 = e$8(X(T));
      t3 && (e2.closeButtonEl = i2.insertAdjacentElement("afterbegin", t3), n2.classList.add("has-close-btn"));
    }
  }
  function fe(e2) {
    if (!($ && I2 && 1 === I2.getState() && e2 && e2.index === I2.getOptions().initialPage && e2.el && e2.el.parentElement)) return;
    if (void 0 !== e2.state && 1 !== e2.state) return;
    $ = false;
    const t2 = e2.panzoomRef, n2 = null == t2 ? void 0 : t2.getTween(), o2 = U("zoomEffect") ? ve(e2) : void 0;
    if (t2 && n2 && o2) {
      const e3 = t2.getScale("base") || 1, { x: i3, y: s2 } = t2.getMousemovePos(e3) || { x: 0, y: 0 };
      return void n2.spring({ tension: 225, friction: 25, restDelta: 1e-3, restSpeed: 1e-3, maxSpeed: 1 / 0 }).from(o2).to({ x: i3, y: s2, scale: e3 }).start();
    }
    const i2 = (null == t2 ? void 0 : t2.getWrapper()) || e2.htmlEl;
    i2 && M(i2, U("showClass", e2));
  }
  function me() {
    var e2;
    return (null === (e2 = z.getInstance()) || void 0 === e2 ? void 0 : e2.getId()) === q;
  }
  function pe() {
    var e2;
    return null === (e2 = null == I2 ? void 0 : I2.getPage()) || void 0 === e2 ? void 0 : e2.slides[0];
  }
  function ge() {
    const e2 = pe();
    return e2 ? e2.triggerEl || U("triggerEl") : void 0;
  }
  function ve(e2) {
    var t2, n2;
    const o2 = null === (n2 = null === (t2 = e2.panzoomRef) || void 0 === t2 ? void 0 : t2.getWrapper()) || void 0 === n2 ? void 0 : n2.getBoundingClientRect(), i2 = null == o2 ? void 0 : o2.width, s2 = null == o2 ? void 0 : o2.height;
    if (!i2 || !s2) return;
    const l2 = e2.thumbEl;
    if (!l2) return;
    const r3 = l2.getBoundingClientRect();
    let a2 = r3.width, c2 = r3.height, u2 = r3.left, d2 = r3.top;
    if (!r3 || !a2 || !c2) return;
    if (!((e3) => {
      const t3 = e3.getBoundingClientRect(), n3 = e3.closest("[style]"), o3 = null == n3 ? void 0 : n3.parentElement;
      if (n3 && n3.style.transform && o3) {
        const e4 = o3.getBoundingClientRect();
        if (t3.left < e4.left || t3.left > e4.left + e4.width - t3.width) return false;
        if (t3.top < e4.top || t3.top > e4.top + e4.height - t3.height) return false;
      }
      const i3 = Math.max(document.documentElement.clientHeight, window.innerHeight), s3 = Math.max(document.documentElement.clientWidth, window.innerWidth);
      return !(t3.bottom < 0 || t3.top - i3 >= 0 || t3.right < 0 || t3.left - s3 >= 0);
    })(l2)) return;
    if (l2 instanceof HTMLImageElement) {
      const e3 = window.getComputedStyle(l2).getPropertyValue("object-fit");
      if ("contain" === e3 || "scale-down" === e3) {
        const { width: t3, height: n3 } = ((e4, t4, n4, o3, i3 = "contain") => {
          if ("contain" === i3 || e4 > n4 || t4 > o3) {
            const i4 = n4 / e4, s3 = o3 / t4, l3 = Math.min(i4, s3);
            e4 *= l3, t4 *= l3;
          }
          return { width: e4, height: t4 };
        })(l2.naturalWidth, l2.naturalHeight, a2, c2, e3);
        u2 += 0.5 * (a2 - t3), d2 += 0.5 * (c2 - n3), a2 = t3, c2 = n3;
      }
    }
    if (Math.abs(i2 / s2 - a2 / c2) > 0.1) return;
    return { x: u2 + 0.5 * a2 - (o2.left + 0.5 * i2), y: d2 + 0.5 * c2 - (o2.top + 0.5 * s2), scale: a2 / i2 };
  }
  function ye() {
    H && clearTimeout(H), H = void 0, document.removeEventListener("mousemove", ae);
  }
  function he() {
    if (W) return;
    if (H) return;
    const e2 = U("idle");
    e2 && (H = setTimeout(be, e2));
  }
  function be() {
    w2 && (ye(), s$7(w2, "is-idle"), document.addEventListener("mousemove", ae), W = true);
  }
  function Ee() {
    W && (xe(), he());
  }
  function xe() {
    ye(), null == w2 || w2.classList.remove("is-idle"), W = false;
  }
  function we(e2, t2) {
    var n2, o2, i2, s2, r3, a2;
    if (B === k.Closing || B === k.Destroyed) return;
    const c2 = new Event("shouldClose", { bubbles: true, cancelable: true });
    if (Y("shouldClose", c2, e2), c2.defaultPrevented) return;
    if (ye(), e2) {
      if (e2.defaultPrevented) return;
      e2.cancelable && e2.preventDefault(), e2.stopPropagation(), e2.stopImmediatePropagation();
    }
    if (B = k.Closing, I2) {
      null === (n2 = I2.getGestures()) || void 0 === n2 || n2.destroy(), null === (o2 = I2.getTween()) || void 0 === o2 || o2.pause();
      const e3 = pe(), t3 = null == e3 ? void 0 : e3.panzoomRef;
      e3 && t3 && r$3(t3.getOptions(), { clickAction: false, wheelAction: false, bounds: false, minScale: 0, maxScale: 1 / 0 });
      for (const e4 of I2.getSlides()) null === (s2 = null === (i2 = e4.panzoomRef) || void 0 === i2 ? void 0 : i2.getGestures()) || void 0 === s2 || s2.destroy(), null === (a2 = null === (r3 = e4.panzoomRef) || void 0 === r3 ? void 0 : r3.getTween()) || void 0 === a2 || a2.pause();
    }
    const u2 = null == I2 ? void 0 : I2.getPlugins().fullscreen;
    u2 && u2.inFullscreen() ? Promise.resolve(u2.exit()).then((() => {
      setTimeout((() => {
        Le(e2, t2);
      }), 150);
    })) : Le(e2, t2);
  }
  function Le(e2, t2) {
    var n2, o2, i2, s2, l2;
    if (B !== k.Closing) return;
    if (Y("close", e2), U("placeFocusBack")) {
      const e3 = ge();
      !e3 || (l2 = e3.getBoundingClientRect()).bottom > 0 && l2.right > 0 && l2.left < (window.innerWidth || document.documentElement.clientWidth) && l2.top < (window.innerHeight || document.documentElement.clientHeight) || e3.scrollIntoView({ behavior: "instant", block: "center", inline: "center" });
    }
    U("fadeEffect") && (null == w2 || w2.classList.remove("is-ready"), null == w2 || w2.classList.add("is-hiding")), null == w2 || w2.classList.add("is-closing");
    const r3 = pe(), a2 = null == r3 ? void 0 : r3.panzoomRef, c2 = null === (n2 = null == r3 ? void 0 : r3.panzoomRef) || void 0 === n2 ? void 0 : n2.getTween(), d2 = t2 || U("hideClass");
    let f2 = false, m2 = false;
    if (I2 && r3 && a2 && c2) {
      let e3;
      U("zoomEffect") && ((null === (i2 = null === (o2 = I2.getTween()) || void 0 === o2 ? void 0 : o2.getCurrentVelocities()) || void 0 === i2 ? void 0 : i2.pos) || 0) < 700 && 1 === r3.state && (e3 = ve(r3)), e3 && (f2 = true, I2.on("refresh", (() => {
        const e4 = ve(r3);
        e4 && c2.to(Object.assign(Object.assign({}, m$1), e4));
      })), c2.easing(c$2.Easings.EaseOut).duration(350).from(Object.assign({}, a2.getTransform())).to(Object.assign(Object.assign({}, m$1), e3)).start());
    }
    const p2 = (null == r3 ? void 0 : r3.htmlEl) || (null === (s2 = null == r3 ? void 0 : r3.panzoomRef) || void 0 === s2 ? void 0 : s2.getWrapper());
    p2 && A(p2), !f2 && d2 && p2 && (m2 = true, M(p2, d2, (() => {
      je();
    }))), f2 || m2 ? setTimeout((() => {
      je();
    }), 350) : je();
  }
  function je() {
    var e2, t2, n2, o2, i2;
    if (B === k.Destroyed) return;
    B = k.Destroyed, document.body.removeEventListener("click", ue), document.body.removeEventListener("keydown", ce, { passive: false, capture: true });
    const l2 = ge();
    Y("destroy"), null === (t2 = null === (e2 = U("sync")) || void 0 === e2 ? void 0 : e2.getPlugins().Autoplay) || void 0 === t2 || t2.resume(), null === (o2 = null === (n2 = U("sync")) || void 0 === n2 ? void 0 : n2.getPlugins().Autoscroll) || void 0 === o2 || o2.resume(), r2 instanceof HTMLDialogElement && r2.close(), null === (i2 = null == I2 ? void 0 : I2.getContainer()) || void 0 === i2 || i2.classList.remove("is-idle"), null == I2 || I2.destroy();
    for (const e3 of Object.values(V)) null == e3 || e3.destroy();
    if (V = {}, null == r2 || r2.remove(), r2 = void 0, w2 = void 0, I2 = void 0, O.delete(q), !O.size && (t$3(false), document.documentElement.classList.remove(R), U("placeFocusBack"))) try {
      null == l2 || l2.focus({ preventScroll: true });
    } catch (e3) {
    }
  }
  const Pe = { close: we, destroy: je, getCarousel: function() {
    return I2;
  }, getContainer: function() {
    return w2;
  }, getId: function() {
    return q;
  }, getOptions: function() {
    return N;
  }, getPlugins: function() {
    return V;
  }, getSlide: function() {
    return pe();
  }, getState: function() {
    return B;
  }, init: function(e2 = [], t2 = {}) {
    return Z(e2, t2), Pe;
  }, isCurrentSlide: function(e2) {
    const t2 = pe();
    return !(!e2 || !t2) && t2.index === e2.index;
  }, isTopMost: function() {
    return me();
  }, off: function(e2, t2) {
    return G.has(e2) && G.set(e2, G.get(e2).filter(((e3) => e3 !== t2))), Pe;
  }, on: function(e2, t2) {
    return G.set(e2, [...G.get(e2) || [], t2]), Pe;
  }, toggleIdle(e2) {
    (W || true === e2) && be(), W && false !== e2 || xe();
  } };
  return Pe;
};
const z = { Plugins: { Hash: u }, version: "6.0.26", openers: /* @__PURE__ */ new Map(), bind: function(e2, n2, o2) {
  if (!e$3()) return;
  let i2 = document.body, s2 = "[data-fancybox]", l2 = {};
  if (t$8(e2) ? (i2 = document.body, s2 = e2, "object" == typeof n2 && (l2 = n2 || {})) : e2 instanceof Element && (i2 = e2, t$8(n2) && (s2 = n2), "object" == typeof o2 && (l2 = o2 || {})), !(i2 && i2 instanceof Element && s2)) return false;
  const a2 = z.openers.get(i2) || /* @__PURE__ */ new Map();
  if (a2.set(s2, l2), z.openers.set(i2, a2), 1 === a2.size) {
    i2.addEventListener("click", z.fromEvent);
    for (const e3 of Object.values(z.Plugins)) {
      const t2 = e3.setup;
      "function" == typeof t2 && t2(z);
    }
  }
  return true;
}, close: function(e2 = true, ...t2) {
  if (e2) for (const e3 of O.values()) e3.close(...t2);
  else {
    const e3 = z.getInstance();
    e3 && e3.close(...t2);
  }
}, destroy: function() {
  let e2;
  for (; e2 = z.getInstance(); ) e2.destroy();
  for (const e3 of z.openers.keys()) e3.removeEventListener("click", z.fromEvent);
  z.openers.clear();
}, fromEvent: function(e2) {
  var t2, n2, o2;
  if (e2.defaultPrevented) return;
  if (e2.button && 0 !== e2.button) return;
  if (e2.ctrlKey || e2.metaKey || e2.shiftKey) return;
  let i2 = e2.composedPath()[0];
  if (i2.closest(".fancybox__container.is-hiding")) return e2.preventDefault(), void e2.stopPropagation();
  const s2 = i2.closest("[data-fancybox-delegate]") || void 0;
  if (s2) {
    const e3 = s2.dataset.fancyboxDelegate || "", t3 = document.querySelectorAll(`[data-fancybox="${e3}"]`);
    i2 = t3[parseInt(s2.dataset.fancyboxIndex || "", 10) || 0] || t3[0];
  }
  if (!(i2 && i2 instanceof Element)) return;
  let r2, a2, c2 = {};
  for (const [e3, t3] of z.openers) if (t3 && e3.contains(i2)) for (const [n3, o3] of t3) {
    let t4 = null;
    try {
      t4 = i2.closest(n3);
    } catch (e4) {
    }
    t4 && (i2 = t4, r2 = e3, a2 = n3, r$3(c2, o3 || {}));
  }
  if (!r2 || !a2) return;
  e2.preventDefault();
  const u2 = r$3({}, _, { triggerEvent: e2, triggerEl: i2, delegateEl: s2 }, c2), d2 = u2.groupAll, f2 = u2.groupAttr, m2 = f2 && i2 ? i2.getAttribute(`${f2}`) : "";
  let p2 = [];
  const g2 = null === (t2 = i2.closest(".f-carousel")) || void 0 === t2 ? void 0 : t2.carousel;
  if (g2) {
    const e3 = [];
    for (const t3 of null == g2 ? void 0 : g2.getSlides()) {
      const n3 = t3.el;
      n3 && (n3.matches(a2) ? e3.push(n3) : e3.push(...[].slice.call(n3.querySelectorAll(a2))));
    }
    e3.length && (p2 = [...e3], null === (n2 = g2.getPlugins().Autoplay) || void 0 === n2 || n2.pause(), null === (o2 = g2.getPlugins().Autoscroll) || void 0 === o2 || o2.pause(), u2.sync = g2);
  } else (!i2 || m2 || d2) && (p2 = [].slice.call(r2.querySelectorAll(a2)));
  if (i2 && !d2 && (p2 = m2 ? p2.filter(((e3) => e3.getAttribute(`${f2}`) === m2)) : [i2]), !p2.length) return;
  const v2 = z.getInstance();
  if (v2) {
    const e3 = v2.getOptions().triggerEl;
    if (e3 && p2.indexOf(e3) > -1) return;
  }
  return Object.assign({}, u2.Carousel || {}).rtl && (p2 = p2.reverse()), i2 && (u2.startIndex = p2.indexOf(i2)), z.fromNodes(p2, u2);
}, fromNodes: function(e2, t2) {
  t2 = r$3({}, _, t2 || {});
  const n2 = [], o2 = (e3) => e3 instanceof HTMLImageElement ? e3 : e3 instanceof HTMLElement ? e3.querySelector("img:not([aria-hidden])") : void 0;
  for (const i2 of e2) {
    const s2 = i2.dataset || {}, l2 = t2.delegateEl && e2.indexOf(i2) === t2.startIndex ? t2.delegateEl : void 0, r2 = o2(l2) || o2(i2) || void 0, a2 = s2.src || i2.getAttribute("href") || i2.getAttribute("currentSrc") || i2.getAttribute("src") || void 0, c2 = s2.thumb || s2.thumbSrc || (null == r2 ? void 0 : r2.getAttribute("currentSrc")) || (null == r2 ? void 0 : r2.getAttribute("src")) || (null == r2 ? void 0 : r2.dataset.lazySrc) || void 0, u2 = { src: a2, alt: s2.alt || (null == r2 ? void 0 : r2.getAttribute("alt")) || void 0, thumbSrc: c2, thumbEl: r2, triggerEl: i2, delegateEl: l2 };
    for (const e3 in s2) {
      let t3 = s2[e3] + "";
      t3 = "false" !== t3 && ("true" === t3 || t3), u2[e3] = t3;
    }
    n2.push(u2);
  }
  return z.show(n2, t2);
}, fromSelector: function(e2, n2, o2) {
  let i2 = document.body, s2 = "", r2 = {};
  if (t$8(e2) ? s2 = e2 : e2 instanceof Element && (i2 = e2, t$8(n2) && (s2 = n2), "object" == typeof o2 && (r2 = o2 || {})), !(i2 && i2 instanceof Element && s2)) return;
  const a2 = z.openers.get(i2);
  return a2 ? (r2 = r$3({}, a2.get(s2) || {}, r2), r2 ? z.fromNodes(Array.from(i2.querySelectorAll(s2)), r2) : void 0) : void 0;
}, getCarousel: function() {
  var e2;
  return (null === (e2 = z.getInstance()) || void 0 === e2 ? void 0 : e2.getCarousel()) || void 0;
}, getDefaults: function() {
  return _;
}, getInstance: function(e2) {
  if (e2) {
    const t2 = O.get(e2);
    return t2 && t2.getState() !== k.Destroyed ? t2 : void 0;
  }
  return Array.from(O.values()).reverse().find(((e3) => {
    if (e3.getState() !== k.Destroyed) return e3;
  })) || void 0;
}, getSlide: function() {
  var e2;
  return (null === (e2 = z.getInstance()) || void 0 === e2 ? void 0 : e2.getSlide()) || void 0;
}, show: function(e2 = [], t2 = {}) {
  return I().init(e2, t2);
}, unbind: function(e2, n2) {
  let o2 = document.body, i2 = "";
  if (t$8(e2) ? i2 = e2 : e2 instanceof Element && (o2 = e2, t$8(n2) && (i2 = n2)), o2) {
    const e3 = z.openers.get(o2);
    e3 && i2 && e3.delete(i2), (null == e3 ? void 0 : e3.size) && i2 || z.openers.delete(o2), o2.removeEventListener("click", z.fromEvent);
  }
} };
function fancybox() {
  z.bind();
}
fancybox();
var inputmaskExports = requireInputmask();
const Inputmask = /* @__PURE__ */ getDefaultExportFromCjs(inputmaskExports);
function mask() {
  let selector = document.querySelectorAll("input[name='tel']");
  if (selector) {
    var im = new Inputmask("+7 (999) 999-99-99");
    im.mask(selector);
  }
  let mailSelector = document.querySelectorAll("input[name='email']");
  if (mailSelector) {
    Inputmask({
      mask: "*{1,64}[.*{1,64}][.*{1,64}][.*{1,64}]@*{1,255}[.*{2,6}][.*{1,2}]",
      greedy: false,
      definitions: {
        "*": {
          validator: "[0-9A-Za-z!#$%&'*+/=?^_`{|}~-]",
          casing: "lower"
        }
      },
      onBeforePaste: function(pastedValue) {
        return pastedValue.toLowerCase().replace("mailto:", "").replace(/\s/g, "");
      },
      placeholder: "example@domain.com",
      clearIncomplete: true
    }).mask(mailSelector);
  }
}
mask();
const rollupInputs = {
  "Главная": "D:\\Проекты\\template\\template\\src\\html\\index.html",
  "ui_kit": "D:\\Проекты\\template\\template\\src\\html\\ui-kit.html",
  "error": "D:\\Проекты\\template\\template\\src\\html\\404.html"
};
function gitNav() {
  let block = document.querySelector(".git-nav-box");
  let ul = document.querySelector(".git-nav-box>ul");
  let path = "https://1dmitriy10.github.io/owenkomplekt/";
  block.addEventListener("click", function() {
    block.classList.toggle("show");
  });
  for (const key in rollupInputs) {
    let parts = rollupInputs[key].replace(/\\/g, "/").split("/"), lastPart = parts.pop(), href = lastPart, name = key;
    ul.insertAdjacentHTML("beforeend", addLiItem(name, href));
  }
  function addLiItem(name, href) {
    return `
      <li>
        <a href="${path}${href}">
          ${name}
        </a>
      </li>
      `;
  }
}
gitNav();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
